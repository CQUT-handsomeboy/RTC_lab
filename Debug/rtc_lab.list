
rtc_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006158  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001924  080062e8  080062e8  000072e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c0c  08007c0c  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007c0c  08007c0c  00008c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c14  08007c14  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c14  08007c14  00008c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c18  08007c18  00008c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007c1c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          00000380  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e8  200003e8  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bb4  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e7f  00000000  00000000  0001bc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  0001ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf5  00000000  00000000  0001fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024099  00000000  00000000  00020895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ffb  00000000  00000000  0004492e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6cd5  00000000  00000000  00059929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001305fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e64  00000000  00000000  00130644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001354a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062d0 	.word	0x080062d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080062d0 	.word	0x080062d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
 8000574:	615a      	str	r2, [r3, #20]
 8000576:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000578:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <MX_FSMC_Init+0xb8>)
 800057a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800057e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000580:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <MX_FSMC_Init+0xb8>)
 8000582:	4a26      	ldr	r2, [pc, #152]	@ (800061c <MX_FSMC_Init+0xbc>)
 8000584:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8000586:	4b24      	ldr	r3, [pc, #144]	@ (8000618 <MX_FSMC_Init+0xb8>)
 8000588:	2206      	movs	r2, #6
 800058a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800058c:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <MX_FSMC_Init+0xb8>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000592:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <MX_FSMC_Init+0xb8>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000598:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <MX_FSMC_Init+0xb8>)
 800059a:	2210      	movs	r2, #16
 800059c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800059e:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80005a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80005b0:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80005b6:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80005be:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <MX_FSMC_Init+0xb8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80005e0:	230f      	movs	r3, #15
 80005e2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80005ec:	2310      	movs	r3, #16
 80005ee:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80005f0:	2311      	movs	r3, #17
 80005f2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <MX_FSMC_Init+0xb8>)
 8000600:	f003 fc7a 	bl	8003ef8 <HAL_SRAM_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800060a:	f001 f895 	bl	8001738 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800060e:	bf00      	nop
 8000610:	3720      	adds	r7, #32
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000084 	.word	0x20000084
 800061c:	a0000104 	.word	0xa0000104

08000620 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <HAL_FSMC_MspInit+0xc8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d151      	bne.n	80006e0 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <HAL_FSMC_MspInit+0xc8>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <HAL_FSMC_MspInit+0xcc>)
 8000648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800064a:	4a28      	ldr	r2, [pc, #160]	@ (80006ec <HAL_FSMC_MspInit+0xcc>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6393      	str	r3, [r2, #56]	@ 0x38
 8000652:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <HAL_FSMC_MspInit+0xcc>)
 8000654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800065e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000662:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000670:	230c      	movs	r3, #12
 8000672:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4619      	mov	r1, r3
 8000678:	481d      	ldr	r0, [pc, #116]	@ (80006f0 <HAL_FSMC_MspInit+0xd0>)
 800067a:	f002 f86d 	bl	8002758 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800067e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000682:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000690:	230c      	movs	r3, #12
 8000692:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4619      	mov	r1, r3
 8000698:	4816      	ldr	r0, [pc, #88]	@ (80006f4 <HAL_FSMC_MspInit+0xd4>)
 800069a:	f002 f85d 	bl	8002758 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800069e:	f24c 7333 	movw	r3, #50995	@ 0xc733
 80006a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006b0:	230c      	movs	r3, #12
 80006b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	480f      	ldr	r0, [pc, #60]	@ (80006f8 <HAL_FSMC_MspInit+0xd8>)
 80006ba:	f002 f84d 	bl	8002758 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006d0:	230c      	movs	r3, #12
 80006d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4808      	ldr	r0, [pc, #32]	@ (80006fc <HAL_FSMC_MspInit+0xdc>)
 80006da:	f002 f83d 	bl	8002758 <HAL_GPIO_Init>
 80006de:	e000      	b.n	80006e2 <HAL_FSMC_MspInit+0xc2>
    return;
 80006e0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000d4 	.word	0x200000d4
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40021400 	.word	0x40021400
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40020c00 	.word	0x40020c00
 80006fc:	40021800 	.word	0x40021800

08000700 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000708:	f7ff ff8a 	bl	8000620 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b4b      	ldr	r3, [pc, #300]	@ (800085c <MX_GPIO_Init+0x148>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a4a      	ldr	r2, [pc, #296]	@ (800085c <MX_GPIO_Init+0x148>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b48      	ldr	r3, [pc, #288]	@ (800085c <MX_GPIO_Init+0x148>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b44      	ldr	r3, [pc, #272]	@ (800085c <MX_GPIO_Init+0x148>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a43      	ldr	r2, [pc, #268]	@ (800085c <MX_GPIO_Init+0x148>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b41      	ldr	r3, [pc, #260]	@ (800085c <MX_GPIO_Init+0x148>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b3d      	ldr	r3, [pc, #244]	@ (800085c <MX_GPIO_Init+0x148>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a3c      	ldr	r2, [pc, #240]	@ (800085c <MX_GPIO_Init+0x148>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b3a      	ldr	r3, [pc, #232]	@ (800085c <MX_GPIO_Init+0x148>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b36      	ldr	r3, [pc, #216]	@ (800085c <MX_GPIO_Init+0x148>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a35      	ldr	r2, [pc, #212]	@ (800085c <MX_GPIO_Init+0x148>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b33      	ldr	r3, [pc, #204]	@ (800085c <MX_GPIO_Init+0x148>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b2f      	ldr	r3, [pc, #188]	@ (800085c <MX_GPIO_Init+0x148>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a2e      	ldr	r2, [pc, #184]	@ (800085c <MX_GPIO_Init+0x148>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b2c      	ldr	r3, [pc, #176]	@ (800085c <MX_GPIO_Init+0x148>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BEEP_Pin|LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80007bc:	4828      	ldr	r0, [pc, #160]	@ (8000860 <MX_GPIO_Init+0x14c>)
 80007be:	f002 f97f 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = KEY2_Pin|KEY1_Pin|KEY0_Pin;
 80007c2:	231c      	movs	r3, #28
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007c6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4823      	ldr	r0, [pc, #140]	@ (8000864 <MX_GPIO_Init+0x150>)
 80007d8:	f001 ffbe 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BEEP_Pin|LED0_Pin|LED1_Pin;
 80007dc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	481a      	ldr	r0, [pc, #104]	@ (8000860 <MX_GPIO_Init+0x14c>)
 80007f6:	f001 ffaf 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_UP_Pin;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007fe:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000804:	2302      	movs	r3, #2
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_UP_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4816      	ldr	r0, [pc, #88]	@ (8000868 <MX_GPIO_Init+0x154>)
 8000810:	f001 ffa2 	bl	8002758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2006      	movs	r0, #6
 800081a:	f001 ff66 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800081e:	2006      	movs	r0, #6
 8000820:	f001 ff7f 	bl	8002722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2008      	movs	r0, #8
 800082a:	f001 ff5e 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800082e:	2008      	movs	r0, #8
 8000830:	f001 ff77 	bl	8002722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2009      	movs	r0, #9
 800083a:	f001 ff56 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800083e:	2009      	movs	r0, #9
 8000840:	f001 ff6f 	bl	8002722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	200a      	movs	r0, #10
 800084a:	f001 ff4e 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800084e:	200a      	movs	r0, #10
 8000850:	f001 ff67 	bl	8002722 <HAL_NVIC_EnableIRQ>

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	@ 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40021400 	.word	0x40021400
 8000864:	40021000 	.word	0x40021000
 8000868:	40020000 	.word	0x40020000

0800086c <display2>:
void display1(int my_hours,int my_minutes,int my_seconds);
void display2(void); // ��ʾ����
void display_current_time(void);

void display2(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af02      	add	r7, sp, #8
	sprintf(temp_str,"Alarm Set:%02d:%02d:%02d",myAlarm.hours,myAlarm.minutes,myAlarm.seconds);
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <display2+0x30>)
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <display2+0x30>)
 8000878:	6899      	ldr	r1, [r3, #8]
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <display2+0x30>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	460b      	mov	r3, r1
 8000882:	4907      	ldr	r1, [pc, #28]	@ (80008a0 <display2+0x34>)
 8000884:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <display2+0x38>)
 8000886:	f004 fcf1 	bl	800526c <siprintf>
	TFT_ShowLine(10,148,24,temp_str);
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <display2+0x38>)
 800088c:	2218      	movs	r2, #24
 800088e:	2194      	movs	r1, #148	@ 0x94
 8000890:	200a      	movs	r0, #10
 8000892:	f001 fbfd 	bl	8002090 <TFT_ShowLine>
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000184 	.word	0x20000184
 80008a0:	080062e8 	.word	0x080062e8
 80008a4:	20000124 	.word	0x20000124

080008a8 <setAlarmToA>:

// A���� ������
void setAlarmToA(int seconds)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  sAlarm.AlarmTime.Hours = 0;
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <setAlarmToA+0x5c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80008b6:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <setAlarmToA+0x5c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = seconds;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <setAlarmToA+0x5c>)
 80008c2:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 23;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <setAlarmToA+0x5c>)
 80008c6:	2217      	movs	r2, #23
 80008c8:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <setAlarmToA+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <setAlarmToA+0x5c>)
 80008d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <setAlarmToA+0x60>)
 80008d4:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <setAlarmToA+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <setAlarmToA+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;  // ����ν
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <setAlarmToA+0x5c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <setAlarmToA+0x5c>)
 80008ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80008f2:	2200      	movs	r2, #0
 80008f4:	4903      	ldr	r1, [pc, #12]	@ (8000904 <setAlarmToA+0x5c>)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <setAlarmToA+0x64>)
 80008f8:	f003 f8b6 	bl	8003a68 <HAL_RTC_SetAlarm_IT>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000ec 	.word	0x200000ec
 8000908:	80808000 	.word	0x80808000
 800090c:	2000019c 	.word	0x2000019c

08000910 <setAlarmToB>:

// B���� ʱ��������
void setAlarmToB(int hours,int minutes,int seconds)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  sAlarm.AlarmTime.Hours = hours;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <setAlarmToB+0x6c>)
 8000922:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = minutes;
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <setAlarmToB+0x6c>)
 800092a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = seconds;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <setAlarmToB+0x6c>)
 8000932:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 23;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <setAlarmToB+0x6c>)
 8000936:	2217      	movs	r2, #23
 8000938:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <setAlarmToB+0x6c>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <setAlarmToB+0x6c>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <setAlarmToB+0x6c>)
 8000948:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800094c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <setAlarmToB+0x6c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <setAlarmToB+0x6c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1; // ����ν
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <setAlarmToB+0x6c>)
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm.Alarm = RTC_ALARM_B;
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <setAlarmToB+0x6c>)
 8000964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 800096a:	2200      	movs	r2, #0
 800096c:	4903      	ldr	r1, [pc, #12]	@ (800097c <setAlarmToB+0x6c>)
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <setAlarmToB+0x70>)
 8000970:	f003 f87a 	bl	8003a68 <HAL_RTC_SetAlarm_IT>
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000ec 	.word	0x200000ec
 8000980:	2000019c 	.word	0x2000019c

08000984 <HAL_GPIO_EXTI_Callback>:

int keyState = 0;
int pressedKey;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim1);
 800098e:	4803      	ldr	r0, [pc, #12]	@ (800099c <HAL_GPIO_EXTI_Callback+0x18>)
 8000990:	f003 fb4a 	bl	8004028 <HAL_TIM_Base_Start_IT>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001c0 	.word	0x200001c0

080009a0 <onKeyUP>:

void onKeyUP()
{
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af04      	add	r7, sp, #16
	// �л�ģʽ
	printf("onKeyUP\r\n");
 80009a6:	485d      	ldr	r0, [pc, #372]	@ (8000b1c <onKeyUP+0x17c>)
 80009a8:	f004 fc58 	bl	800525c <puts>
	
	if(mode == SET_TIME_WEEKDAY)
 80009ac:	4b5c      	ldr	r3, [pc, #368]	@ (8000b20 <onKeyUP+0x180>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b0a      	cmp	r3, #10
 80009b2:	d103      	bne.n	80009bc <onKeyUP+0x1c>
	{
		mode = SET_ALARM_HOUR;
 80009b4:	4b5a      	ldr	r3, [pc, #360]	@ (8000b20 <onKeyUP+0x180>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	e005      	b.n	80009c8 <onKeyUP+0x28>
	} else {
		mode ++;
 80009bc:	4b58      	ldr	r3, [pc, #352]	@ (8000b20 <onKeyUP+0x180>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b56      	ldr	r3, [pc, #344]	@ (8000b20 <onKeyUP+0x180>)
 80009c6:	701a      	strb	r2, [r3, #0]
	}
	
	TFT_Clear(0x00);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fa30 	bl	8001e2e <TFT_Clear>
	
	switch(mode)
 80009ce:	4b54      	ldr	r3, [pc, #336]	@ (8000b20 <onKeyUP+0x180>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b0a      	cmp	r3, #10
 80009d4:	f200 8082 	bhi.w	8000adc <onKeyUP+0x13c>
 80009d8:	a201      	add	r2, pc, #4	@ (adr r2, 80009e0 <onKeyUP+0x40>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	08000a0d 	.word	0x08000a0d
 80009e4:	08000a7d 	.word	0x08000a7d
 80009e8:	08000a9d 	.word	0x08000a9d
 80009ec:	08000abd 	.word	0x08000abd
 80009f0:	08000a1b 	.word	0x08000a1b
 80009f4:	08000a29 	.word	0x08000a29
 80009f8:	08000a37 	.word	0x08000a37
 80009fc:	08000a45 	.word	0x08000a45
 8000a00:	08000a53 	.word	0x08000a53
 8000a04:	08000a61 	.word	0x08000a61
 8000a08:	08000a6f 	.word	0x08000a6f
	{
		case NORMAL:
			TFT_ShowLine(10,70,24,"NORMAL");
 8000a0c:	4b45      	ldr	r3, [pc, #276]	@ (8000b24 <onKeyUP+0x184>)
 8000a0e:	2218      	movs	r2, #24
 8000a10:	2146      	movs	r1, #70	@ 0x46
 8000a12:	200a      	movs	r0, #10
 8000a14:	f001 fb3c 	bl	8002090 <TFT_ShowLine>
			break;
 8000a18:	e060      	b.n	8000adc <onKeyUP+0x13c>
		case SET_TIME_HOUR:
			TFT_ShowLine(10,70,24,"SET_TIME_HOUR");
 8000a1a:	4b43      	ldr	r3, [pc, #268]	@ (8000b28 <onKeyUP+0x188>)
 8000a1c:	2218      	movs	r2, #24
 8000a1e:	2146      	movs	r1, #70	@ 0x46
 8000a20:	200a      	movs	r0, #10
 8000a22:	f001 fb35 	bl	8002090 <TFT_ShowLine>
			break;
 8000a26:	e059      	b.n	8000adc <onKeyUP+0x13c>
		case SET_TIME_MIN:
			TFT_ShowLine(10,70,24,"SET_TIME_MIN");
 8000a28:	4b40      	ldr	r3, [pc, #256]	@ (8000b2c <onKeyUP+0x18c>)
 8000a2a:	2218      	movs	r2, #24
 8000a2c:	2146      	movs	r1, #70	@ 0x46
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f001 fb2e 	bl	8002090 <TFT_ShowLine>
			break;
 8000a34:	e052      	b.n	8000adc <onKeyUP+0x13c>
		case SET_TIME_SEC:
			TFT_ShowLine(10,70,24,"SET_TIME_SEC");
 8000a36:	4b3e      	ldr	r3, [pc, #248]	@ (8000b30 <onKeyUP+0x190>)
 8000a38:	2218      	movs	r2, #24
 8000a3a:	2146      	movs	r1, #70	@ 0x46
 8000a3c:	200a      	movs	r0, #10
 8000a3e:	f001 fb27 	bl	8002090 <TFT_ShowLine>
			break;
 8000a42:	e04b      	b.n	8000adc <onKeyUP+0x13c>
		case SET_TIME_YEAR:
			TFT_ShowLine(10,70,24,"SET_TIME_YEAR");
 8000a44:	4b3b      	ldr	r3, [pc, #236]	@ (8000b34 <onKeyUP+0x194>)
 8000a46:	2218      	movs	r2, #24
 8000a48:	2146      	movs	r1, #70	@ 0x46
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f001 fb20 	bl	8002090 <TFT_ShowLine>
			break;
 8000a50:	e044      	b.n	8000adc <onKeyUP+0x13c>
		case SET_TIME_MONTH:
			TFT_ShowLine(10,70,24,"SET_TIME_MONTH");
 8000a52:	4b39      	ldr	r3, [pc, #228]	@ (8000b38 <onKeyUP+0x198>)
 8000a54:	2218      	movs	r2, #24
 8000a56:	2146      	movs	r1, #70	@ 0x46
 8000a58:	200a      	movs	r0, #10
 8000a5a:	f001 fb19 	bl	8002090 <TFT_ShowLine>
			break;
 8000a5e:	e03d      	b.n	8000adc <onKeyUP+0x13c>
		case SET_TIME_DAY:
			TFT_ShowLine(10,70,24,"SET_TIME_DAY");
 8000a60:	4b36      	ldr	r3, [pc, #216]	@ (8000b3c <onKeyUP+0x19c>)
 8000a62:	2218      	movs	r2, #24
 8000a64:	2146      	movs	r1, #70	@ 0x46
 8000a66:	200a      	movs	r0, #10
 8000a68:	f001 fb12 	bl	8002090 <TFT_ShowLine>
			break;
 8000a6c:	e036      	b.n	8000adc <onKeyUP+0x13c>
		case SET_TIME_WEEKDAY:
			TFT_ShowLine(10,70,24,"SET_TIME_WEEKDAY");
 8000a6e:	4b34      	ldr	r3, [pc, #208]	@ (8000b40 <onKeyUP+0x1a0>)
 8000a70:	2218      	movs	r2, #24
 8000a72:	2146      	movs	r1, #70	@ 0x46
 8000a74:	200a      	movs	r0, #10
 8000a76:	f001 fb0b 	bl	8002090 <TFT_ShowLine>
			break;
 8000a7a:	e02f      	b.n	8000adc <onKeyUP+0x13c>
		case SET_ALARM_HOUR:
			TFT_ShowLine(10,70,24,"SET_ALARM_HOUR");
 8000a7c:	4b31      	ldr	r3, [pc, #196]	@ (8000b44 <onKeyUP+0x1a4>)
 8000a7e:	2218      	movs	r2, #24
 8000a80:	2146      	movs	r1, #70	@ 0x46
 8000a82:	200a      	movs	r0, #10
 8000a84:	f001 fb04 	bl	8002090 <TFT_ShowLine>
			display1(alarmHours,alarmMinutes,alarmSeconds);
 8000a88:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <onKeyUP+0x1a8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b4c <onKeyUP+0x1ac>)
 8000a8e:	6811      	ldr	r1, [r2, #0]
 8000a90:	4a2f      	ldr	r2, [pc, #188]	@ (8000b50 <onKeyUP+0x1b0>)
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fda5 	bl	80015e4 <display1>
			break;
 8000a9a:	e01f      	b.n	8000adc <onKeyUP+0x13c>
		case SET_ALARM_MIN:
			TFT_ShowLine(10,70,24,"SET_ALARM_MIN");
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <onKeyUP+0x1b4>)
 8000a9e:	2218      	movs	r2, #24
 8000aa0:	2146      	movs	r1, #70	@ 0x46
 8000aa2:	200a      	movs	r0, #10
 8000aa4:	f001 faf4 	bl	8002090 <TFT_ShowLine>
			display1(alarmHours,alarmMinutes,alarmSeconds);
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <onKeyUP+0x1a8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a27      	ldr	r2, [pc, #156]	@ (8000b4c <onKeyUP+0x1ac>)
 8000aae:	6811      	ldr	r1, [r2, #0]
 8000ab0:	4a27      	ldr	r2, [pc, #156]	@ (8000b50 <onKeyUP+0x1b0>)
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fd95 	bl	80015e4 <display1>
			break;
 8000aba:	e00f      	b.n	8000adc <onKeyUP+0x13c>
		case SET_ALARM_SEC:
			TFT_ShowLine(10,70,24,"SET_ALARM_SEC");
 8000abc:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <onKeyUP+0x1b8>)
 8000abe:	2218      	movs	r2, #24
 8000ac0:	2146      	movs	r1, #70	@ 0x46
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f001 fae4 	bl	8002090 <TFT_ShowLine>
			display1(alarmHours,alarmMinutes,alarmSeconds);
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <onKeyUP+0x1a8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1f      	ldr	r2, [pc, #124]	@ (8000b4c <onKeyUP+0x1ac>)
 8000ace:	6811      	ldr	r1, [r2, #0]
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b50 <onKeyUP+0x1b0>)
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fd85 	bl	80015e4 <display1>
			break;
 8000ada:	bf00      	nop
	}
	display(hours,minutes,seconds,year,month,date,weekDay);
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <onKeyUP+0x1bc>)
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <onKeyUP+0x1c0>)
 8000ae2:	681c      	ldr	r4, [r3, #0]
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <onKeyUP+0x1c4>)
 8000ae6:	681d      	ldr	r5, [r3, #0]
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <onKeyUP+0x1c8>)
 8000aea:	681e      	ldr	r6, [r3, #0]
 8000aec:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <onKeyUP+0x1cc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <onKeyUP+0x1d0>)
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	491f      	ldr	r1, [pc, #124]	@ (8000b74 <onKeyUP+0x1d4>)
 8000af6:	6809      	ldr	r1, [r1, #0]
 8000af8:	9102      	str	r1, [sp, #8]
 8000afa:	9201      	str	r2, [sp, #4]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	4633      	mov	r3, r6
 8000b00:	462a      	mov	r2, r5
 8000b02:	4621      	mov	r1, r4
 8000b04:	f000 fccc 	bl	80014a0 <display>

	printf("mode:%d\r\n",mode);
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <onKeyUP+0x180>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481a      	ldr	r0, [pc, #104]	@ (8000b78 <onKeyUP+0x1d8>)
 8000b10:	f004 fb3c 	bl	800518c <iprintf>
}
 8000b14:	bf00      	nop
 8000b16:	3704      	adds	r7, #4
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b1c:	08006304 	.word	0x08006304
 8000b20:	20000180 	.word	0x20000180
 8000b24:	08006310 	.word	0x08006310
 8000b28:	08006318 	.word	0x08006318
 8000b2c:	08006328 	.word	0x08006328
 8000b30:	08006338 	.word	0x08006338
 8000b34:	08006348 	.word	0x08006348
 8000b38:	08006358 	.word	0x08006358
 8000b3c:	08006368 	.word	0x08006368
 8000b40:	08006378 	.word	0x08006378
 8000b44:	0800638c 	.word	0x0800638c
 8000b48:	20000174 	.word	0x20000174
 8000b4c:	20000178 	.word	0x20000178
 8000b50:	2000017c 	.word	0x2000017c
 8000b54:	0800639c 	.word	0x0800639c
 8000b58:	080063ac 	.word	0x080063ac
 8000b5c:	20000118 	.word	0x20000118
 8000b60:	2000011c 	.word	0x2000011c
 8000b64:	20000120 	.word	0x20000120
 8000b68:	20000164 	.word	0x20000164
 8000b6c:	20000168 	.word	0x20000168
 8000b70:	20000170 	.word	0x20000170
 8000b74:	2000016c 	.word	0x2000016c
 8000b78:	080063bc 	.word	0x080063bc

08000b7c <onKey0>:

void getTime(void);

void onKey0()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	// OK
	switch(mode)
 8000b80:	4b34      	ldr	r3, [pc, #208]	@ (8000c54 <onKey0+0xd8>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b0b      	cmp	r3, #11
 8000b86:	d051      	beq.n	8000c2c <onKey0+0xb0>
 8000b88:	2b0b      	cmp	r3, #11
 8000b8a:	dc53      	bgt.n	8000c34 <onKey0+0xb8>
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	dc02      	bgt.n	8000b96 <onKey0+0x1a>
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dc04      	bgt.n	8000b9e <onKey0+0x22>
 8000b94:	e04e      	b.n	8000c34 <onKey0+0xb8>
 8000b96:	3b04      	subs	r3, #4
 8000b98:	2b06      	cmp	r3, #6
 8000b9a:	d84b      	bhi.n	8000c34 <onKey0+0xb8>
 8000b9c:	e018      	b.n	8000bd0 <onKey0+0x54>
	{
		case SET_ALARM_HOUR:
		case SET_ALARM_MIN:
		case SET_ALARM_SEC:
			// �������ӵ�
			setAlarmToB(alarmHours,alarmMinutes,alarmSeconds);
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <onKey0+0xdc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a2e      	ldr	r2, [pc, #184]	@ (8000c5c <onKey0+0xe0>)
 8000ba4:	6811      	ldr	r1, [r2, #0]
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8000c60 <onKey0+0xe4>)
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff feb0 	bl	8000910 <setAlarmToB>
			
			myAlarm.hours = alarmHours;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	@ (8000c58 <onKey0+0xdc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8000c64 <onKey0+0xe8>)
 8000bb6:	6053      	str	r3, [r2, #4]
			myAlarm.minutes = alarmMinutes;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <onKey0+0xe0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a29      	ldr	r2, [pc, #164]	@ (8000c64 <onKey0+0xe8>)
 8000bbe:	6093      	str	r3, [r2, #8]
			myAlarm.seconds = alarmSeconds;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <onKey0+0xe4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a27      	ldr	r2, [pc, #156]	@ (8000c64 <onKey0+0xe8>)
 8000bc6:	60d3      	str	r3, [r2, #12]
			myAlarm.trigger_flag = 1;
 8000bc8:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <onKey0+0xe8>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
			break;
 8000bce:	e031      	b.n	8000c34 <onKey0+0xb8>
		case SET_TIME_YEAR:
		case SET_TIME_MONTH:
		case SET_TIME_DAY:
		case SET_TIME_WEEKDAY:
			// ����ʱ�����ڵ�
			sDate.Date = date;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <onKey0+0xec>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b25      	ldr	r3, [pc, #148]	@ (8000c6c <onKey0+0xf0>)
 8000bd8:	709a      	strb	r2, [r3, #2]
			sDate.Month = month;
 8000bda:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <onKey0+0xf4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b22      	ldr	r3, [pc, #136]	@ (8000c6c <onKey0+0xf0>)
 8000be2:	705a      	strb	r2, [r3, #1]
			sDate.WeekDay = weekDay;
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <onKey0+0xf8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <onKey0+0xf0>)
 8000bec:	701a      	strb	r2, [r3, #0]
			sDate.Year = year;
 8000bee:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <onKey0+0xfc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c6c <onKey0+0xf0>)
 8000bf6:	70da      	strb	r2, [r3, #3]
			
			sTime.Hours = hours;
 8000bf8:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <onKey0+0x100>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <onKey0+0x104>)
 8000c00:	701a      	strb	r2, [r3, #0]
			sTime.Minutes = minutes;
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <onKey0+0x108>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <onKey0+0x104>)
 8000c0a:	705a      	strb	r2, [r3, #1]
			sTime.Seconds = seconds;
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <onKey0+0x10c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <onKey0+0x104>)
 8000c14:	709a      	strb	r2, [r3, #2]
			
			HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8000c16:	2200      	movs	r2, #0
 8000c18:	4919      	ldr	r1, [pc, #100]	@ (8000c80 <onKey0+0x104>)
 8000c1a:	481c      	ldr	r0, [pc, #112]	@ (8000c8c <onKey0+0x110>)
 8000c1c:	f002 fd59 	bl	80036d2 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 8000c20:	2200      	movs	r2, #0
 8000c22:	4912      	ldr	r1, [pc, #72]	@ (8000c6c <onKey0+0xf0>)
 8000c24:	4819      	ldr	r0, [pc, #100]	@ (8000c8c <onKey0+0x110>)
 8000c26:	f002 fe4c 	bl	80038c2 <HAL_RTC_SetDate>
			break;
 8000c2a:	e003      	b.n	8000c34 <onKey0+0xb8>
		case ALARM:
			// ����ȷ�Ϲر�
			myAlarm.trigger_flag = 0; // �ر�����
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <onKey0+0xe8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
			break;
 8000c32:	bf00      	nop
	}
	mode = NORMAL; // ̫����
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <onKey0+0xd8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
	TFT_Clear(0x00);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f001 f8f7 	bl	8001e2e <TFT_Clear>
	getTime();
 8000c40:	f000 fbe8 	bl	8001414 <getTime>
	setAlarmToA(seconds + 1);
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <onKey0+0x10c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe2c 	bl	80008a8 <setAlarmToA>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000180 	.word	0x20000180
 8000c58:	20000174 	.word	0x20000174
 8000c5c:	20000178 	.word	0x20000178
 8000c60:	2000017c 	.word	0x2000017c
 8000c64:	20000184 	.word	0x20000184
 8000c68:	20000170 	.word	0x20000170
 8000c6c:	20000114 	.word	0x20000114
 8000c70:	20000168 	.word	0x20000168
 8000c74:	2000016c 	.word	0x2000016c
 8000c78:	20000164 	.word	0x20000164
 8000c7c:	20000118 	.word	0x20000118
 8000c80:	200000d8 	.word	0x200000d8
 8000c84:	2000011c 	.word	0x2000011c
 8000c88:	20000120 	.word	0x20000120
 8000c8c:	2000019c 	.word	0x2000019c

08000c90 <onKey1>:

void onKey1()
{
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af04      	add	r7, sp, #16
	// -
	switch(mode)
 8000c96:	4b90      	ldr	r3, [pc, #576]	@ (8000ed8 <onKey1+0x248>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	2b09      	cmp	r3, #9
 8000c9e:	f200 816a 	bhi.w	8000f76 <onKey1+0x2e6>
 8000ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ca8 <onKey1+0x18>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000ec9 	.word	0x08000ec9
 8000cac:	08000f1b 	.word	0x08000f1b
 8000cb0:	08000f49 	.word	0x08000f49
 8000cb4:	08000cd1 	.word	0x08000cd1
 8000cb8:	08000d19 	.word	0x08000d19
 8000cbc:	08000d61 	.word	0x08000d61
 8000cc0:	08000da9 	.word	0x08000da9
 8000cc4:	08000df1 	.word	0x08000df1
 8000cc8:	08000e39 	.word	0x08000e39
 8000ccc:	08000e81 	.word	0x08000e81
	{
		case SET_TIME_HOUR:
			if(hours == 0)
 8000cd0:	4b82      	ldr	r3, [pc, #520]	@ (8000edc <onKey1+0x24c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <onKey1+0x50>
			{
				hours = 23;
 8000cd8:	4b80      	ldr	r3, [pc, #512]	@ (8000edc <onKey1+0x24c>)
 8000cda:	2217      	movs	r2, #23
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e004      	b.n	8000cea <onKey1+0x5a>
			} else {
				hours--;
 8000ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8000edc <onKey1+0x24c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	4a7d      	ldr	r2, [pc, #500]	@ (8000edc <onKey1+0x24c>)
 8000ce8:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8000cea:	4b7c      	ldr	r3, [pc, #496]	@ (8000edc <onKey1+0x24c>)
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	4b7c      	ldr	r3, [pc, #496]	@ (8000ee0 <onKey1+0x250>)
 8000cf0:	681c      	ldr	r4, [r3, #0]
 8000cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ee4 <onKey1+0x254>)
 8000cf4:	681d      	ldr	r5, [r3, #0]
 8000cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ee8 <onKey1+0x258>)
 8000cf8:	681e      	ldr	r6, [r3, #0]
 8000cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8000eec <onKey1+0x25c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a7c      	ldr	r2, [pc, #496]	@ (8000ef0 <onKey1+0x260>)
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	497c      	ldr	r1, [pc, #496]	@ (8000ef4 <onKey1+0x264>)
 8000d04:	6809      	ldr	r1, [r1, #0]
 8000d06:	9102      	str	r1, [sp, #8]
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4633      	mov	r3, r6
 8000d0e:	462a      	mov	r2, r5
 8000d10:	4621      	mov	r1, r4
 8000d12:	f000 fbc5 	bl	80014a0 <display>
			break;
 8000d16:	e12e      	b.n	8000f76 <onKey1+0x2e6>
		case SET_TIME_MIN:
			if(minutes == 0)
 8000d18:	4b71      	ldr	r3, [pc, #452]	@ (8000ee0 <onKey1+0x250>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d103      	bne.n	8000d28 <onKey1+0x98>
			{
				minutes = 59;
 8000d20:	4b6f      	ldr	r3, [pc, #444]	@ (8000ee0 <onKey1+0x250>)
 8000d22:	223b      	movs	r2, #59	@ 0x3b
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e004      	b.n	8000d32 <onKey1+0xa2>
			} else {
				minutes--;
 8000d28:	4b6d      	ldr	r3, [pc, #436]	@ (8000ee0 <onKey1+0x250>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	4a6c      	ldr	r2, [pc, #432]	@ (8000ee0 <onKey1+0x250>)
 8000d30:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8000d32:	4b6a      	ldr	r3, [pc, #424]	@ (8000edc <onKey1+0x24c>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	4b6a      	ldr	r3, [pc, #424]	@ (8000ee0 <onKey1+0x250>)
 8000d38:	681c      	ldr	r4, [r3, #0]
 8000d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8000ee4 <onKey1+0x254>)
 8000d3c:	681d      	ldr	r5, [r3, #0]
 8000d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ee8 <onKey1+0x258>)
 8000d40:	681e      	ldr	r6, [r3, #0]
 8000d42:	4b6a      	ldr	r3, [pc, #424]	@ (8000eec <onKey1+0x25c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a6a      	ldr	r2, [pc, #424]	@ (8000ef0 <onKey1+0x260>)
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	496a      	ldr	r1, [pc, #424]	@ (8000ef4 <onKey1+0x264>)
 8000d4c:	6809      	ldr	r1, [r1, #0]
 8000d4e:	9102      	str	r1, [sp, #8]
 8000d50:	9201      	str	r2, [sp, #4]
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	4633      	mov	r3, r6
 8000d56:	462a      	mov	r2, r5
 8000d58:	4621      	mov	r1, r4
 8000d5a:	f000 fba1 	bl	80014a0 <display>
			break;
 8000d5e:	e10a      	b.n	8000f76 <onKey1+0x2e6>
		case SET_TIME_SEC:
			if(seconds == 0)
 8000d60:	4b60      	ldr	r3, [pc, #384]	@ (8000ee4 <onKey1+0x254>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d103      	bne.n	8000d70 <onKey1+0xe0>
			{
				seconds = 59;
 8000d68:	4b5e      	ldr	r3, [pc, #376]	@ (8000ee4 <onKey1+0x254>)
 8000d6a:	223b      	movs	r2, #59	@ 0x3b
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e004      	b.n	8000d7a <onKey1+0xea>
			} else {
				seconds--;
 8000d70:	4b5c      	ldr	r3, [pc, #368]	@ (8000ee4 <onKey1+0x254>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	4a5b      	ldr	r2, [pc, #364]	@ (8000ee4 <onKey1+0x254>)
 8000d78:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8000d7a:	4b58      	ldr	r3, [pc, #352]	@ (8000edc <onKey1+0x24c>)
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	4b58      	ldr	r3, [pc, #352]	@ (8000ee0 <onKey1+0x250>)
 8000d80:	681c      	ldr	r4, [r3, #0]
 8000d82:	4b58      	ldr	r3, [pc, #352]	@ (8000ee4 <onKey1+0x254>)
 8000d84:	681d      	ldr	r5, [r3, #0]
 8000d86:	4b58      	ldr	r3, [pc, #352]	@ (8000ee8 <onKey1+0x258>)
 8000d88:	681e      	ldr	r6, [r3, #0]
 8000d8a:	4b58      	ldr	r3, [pc, #352]	@ (8000eec <onKey1+0x25c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a58      	ldr	r2, [pc, #352]	@ (8000ef0 <onKey1+0x260>)
 8000d90:	6812      	ldr	r2, [r2, #0]
 8000d92:	4958      	ldr	r1, [pc, #352]	@ (8000ef4 <onKey1+0x264>)
 8000d94:	6809      	ldr	r1, [r1, #0]
 8000d96:	9102      	str	r1, [sp, #8]
 8000d98:	9201      	str	r2, [sp, #4]
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	4633      	mov	r3, r6
 8000d9e:	462a      	mov	r2, r5
 8000da0:	4621      	mov	r1, r4
 8000da2:	f000 fb7d 	bl	80014a0 <display>
			break;
 8000da6:	e0e6      	b.n	8000f76 <onKey1+0x2e6>
		case SET_TIME_YEAR:
			if(year == 0)
 8000da8:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee8 <onKey1+0x258>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d103      	bne.n	8000db8 <onKey1+0x128>
			{
				year = 99;
 8000db0:	4b4d      	ldr	r3, [pc, #308]	@ (8000ee8 <onKey1+0x258>)
 8000db2:	2263      	movs	r2, #99	@ 0x63
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e004      	b.n	8000dc2 <onKey1+0x132>
			} else {
				year--;
 8000db8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee8 <onKey1+0x258>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8000ee8 <onKey1+0x258>)
 8000dc0:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8000dc2:	4b46      	ldr	r3, [pc, #280]	@ (8000edc <onKey1+0x24c>)
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	4b46      	ldr	r3, [pc, #280]	@ (8000ee0 <onKey1+0x250>)
 8000dc8:	681c      	ldr	r4, [r3, #0]
 8000dca:	4b46      	ldr	r3, [pc, #280]	@ (8000ee4 <onKey1+0x254>)
 8000dcc:	681d      	ldr	r5, [r3, #0]
 8000dce:	4b46      	ldr	r3, [pc, #280]	@ (8000ee8 <onKey1+0x258>)
 8000dd0:	681e      	ldr	r6, [r3, #0]
 8000dd2:	4b46      	ldr	r3, [pc, #280]	@ (8000eec <onKey1+0x25c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a46      	ldr	r2, [pc, #280]	@ (8000ef0 <onKey1+0x260>)
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	4946      	ldr	r1, [pc, #280]	@ (8000ef4 <onKey1+0x264>)
 8000ddc:	6809      	ldr	r1, [r1, #0]
 8000dde:	9102      	str	r1, [sp, #8]
 8000de0:	9201      	str	r2, [sp, #4]
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	4633      	mov	r3, r6
 8000de6:	462a      	mov	r2, r5
 8000de8:	4621      	mov	r1, r4
 8000dea:	f000 fb59 	bl	80014a0 <display>
			break;
 8000dee:	e0c2      	b.n	8000f76 <onKey1+0x2e6>
		case SET_TIME_MONTH:
			if(month == 1)
 8000df0:	4b3e      	ldr	r3, [pc, #248]	@ (8000eec <onKey1+0x25c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d103      	bne.n	8000e00 <onKey1+0x170>
			{
				month = 12;
 8000df8:	4b3c      	ldr	r3, [pc, #240]	@ (8000eec <onKey1+0x25c>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e004      	b.n	8000e0a <onKey1+0x17a>
			} else {
				month--;
 8000e00:	4b3a      	ldr	r3, [pc, #232]	@ (8000eec <onKey1+0x25c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	4a39      	ldr	r2, [pc, #228]	@ (8000eec <onKey1+0x25c>)
 8000e08:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8000e0a:	4b34      	ldr	r3, [pc, #208]	@ (8000edc <onKey1+0x24c>)
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <onKey1+0x250>)
 8000e10:	681c      	ldr	r4, [r3, #0]
 8000e12:	4b34      	ldr	r3, [pc, #208]	@ (8000ee4 <onKey1+0x254>)
 8000e14:	681d      	ldr	r5, [r3, #0]
 8000e16:	4b34      	ldr	r3, [pc, #208]	@ (8000ee8 <onKey1+0x258>)
 8000e18:	681e      	ldr	r6, [r3, #0]
 8000e1a:	4b34      	ldr	r3, [pc, #208]	@ (8000eec <onKey1+0x25c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a34      	ldr	r2, [pc, #208]	@ (8000ef0 <onKey1+0x260>)
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	4934      	ldr	r1, [pc, #208]	@ (8000ef4 <onKey1+0x264>)
 8000e24:	6809      	ldr	r1, [r1, #0]
 8000e26:	9102      	str	r1, [sp, #8]
 8000e28:	9201      	str	r2, [sp, #4]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	4633      	mov	r3, r6
 8000e2e:	462a      	mov	r2, r5
 8000e30:	4621      	mov	r1, r4
 8000e32:	f000 fb35 	bl	80014a0 <display>
			break;
 8000e36:	e09e      	b.n	8000f76 <onKey1+0x2e6>
		case SET_TIME_DAY:
			if(date == 1)
 8000e38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <onKey1+0x260>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d103      	bne.n	8000e48 <onKey1+0x1b8>
			{
				date = 31;
 8000e40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <onKey1+0x260>)
 8000e42:	221f      	movs	r2, #31
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e004      	b.n	8000e52 <onKey1+0x1c2>
			} else {
				date--;
 8000e48:	4b29      	ldr	r3, [pc, #164]	@ (8000ef0 <onKey1+0x260>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	4a28      	ldr	r2, [pc, #160]	@ (8000ef0 <onKey1+0x260>)
 8000e50:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8000e52:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <onKey1+0x24c>)
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <onKey1+0x250>)
 8000e58:	681c      	ldr	r4, [r3, #0]
 8000e5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <onKey1+0x254>)
 8000e5c:	681d      	ldr	r5, [r3, #0]
 8000e5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <onKey1+0x258>)
 8000e60:	681e      	ldr	r6, [r3, #0]
 8000e62:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <onKey1+0x25c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a22      	ldr	r2, [pc, #136]	@ (8000ef0 <onKey1+0x260>)
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	4922      	ldr	r1, [pc, #136]	@ (8000ef4 <onKey1+0x264>)
 8000e6c:	6809      	ldr	r1, [r1, #0]
 8000e6e:	9102      	str	r1, [sp, #8]
 8000e70:	9201      	str	r2, [sp, #4]
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4633      	mov	r3, r6
 8000e76:	462a      	mov	r2, r5
 8000e78:	4621      	mov	r1, r4
 8000e7a:	f000 fb11 	bl	80014a0 <display>
			break;
 8000e7e:	e07a      	b.n	8000f76 <onKey1+0x2e6>
		case SET_TIME_WEEKDAY:
			if(weekDay == 1)
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <onKey1+0x264>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d103      	bne.n	8000e90 <onKey1+0x200>
			{
				weekDay = 7;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <onKey1+0x264>)
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e004      	b.n	8000e9a <onKey1+0x20a>
			} else {
				weekDay--;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <onKey1+0x264>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <onKey1+0x264>)
 8000e98:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <onKey1+0x24c>)
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <onKey1+0x250>)
 8000ea0:	681c      	ldr	r4, [r3, #0]
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <onKey1+0x254>)
 8000ea4:	681d      	ldr	r5, [r3, #0]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <onKey1+0x258>)
 8000ea8:	681e      	ldr	r6, [r3, #0]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <onKey1+0x25c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <onKey1+0x260>)
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	4910      	ldr	r1, [pc, #64]	@ (8000ef4 <onKey1+0x264>)
 8000eb4:	6809      	ldr	r1, [r1, #0]
 8000eb6:	9102      	str	r1, [sp, #8]
 8000eb8:	9201      	str	r2, [sp, #4]
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	4633      	mov	r3, r6
 8000ebe:	462a      	mov	r2, r5
 8000ec0:	4621      	mov	r1, r4
 8000ec2:	f000 faed 	bl	80014a0 <display>
			break;
 8000ec6:	e056      	b.n	8000f76 <onKey1+0x2e6>
		case SET_ALARM_HOUR:
			if(alarmHours == 0)
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <onKey1+0x268>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d115      	bne.n	8000efc <onKey1+0x26c>
			{
				alarmHours = 23;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <onKey1+0x268>)
 8000ed2:	2217      	movs	r2, #23
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e016      	b.n	8000f06 <onKey1+0x276>
 8000ed8:	20000180 	.word	0x20000180
 8000edc:	20000118 	.word	0x20000118
 8000ee0:	2000011c 	.word	0x2000011c
 8000ee4:	20000120 	.word	0x20000120
 8000ee8:	20000164 	.word	0x20000164
 8000eec:	20000168 	.word	0x20000168
 8000ef0:	20000170 	.word	0x20000170
 8000ef4:	2000016c 	.word	0x2000016c
 8000ef8:	20000174 	.word	0x20000174
			} else {
				alarmHours--;
 8000efc:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <onKey1+0x2f0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	4a1f      	ldr	r2, [pc, #124]	@ (8000f80 <onKey1+0x2f0>)
 8000f04:	6013      	str	r3, [r2, #0]
			}
			display1(alarmHours,alarmMinutes,alarmSeconds);
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <onKey1+0x2f0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f84 <onKey1+0x2f4>)
 8000f0c:	6811      	ldr	r1, [r2, #0]
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f88 <onKey1+0x2f8>)
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fb66 	bl	80015e4 <display1>
			break;
 8000f18:	e02d      	b.n	8000f76 <onKey1+0x2e6>
		case SET_ALARM_MIN:
			if(alarmMinutes == 0)
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <onKey1+0x2f4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <onKey1+0x29a>
			{
				alarmMinutes = 59;
 8000f22:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <onKey1+0x2f4>)
 8000f24:	223b      	movs	r2, #59	@ 0x3b
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e004      	b.n	8000f34 <onKey1+0x2a4>
			} else {
				alarmMinutes--;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <onKey1+0x2f4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	4a14      	ldr	r2, [pc, #80]	@ (8000f84 <onKey1+0x2f4>)
 8000f32:	6013      	str	r3, [r2, #0]
			}
			display1(alarmHours,alarmMinutes,alarmSeconds);
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <onKey1+0x2f0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <onKey1+0x2f4>)
 8000f3a:	6811      	ldr	r1, [r2, #0]
 8000f3c:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <onKey1+0x2f8>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fb4f 	bl	80015e4 <display1>
			break;
 8000f46:	e016      	b.n	8000f76 <onKey1+0x2e6>
		case SET_ALARM_SEC:
			if(alarmSeconds == 0)
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <onKey1+0x2f8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d103      	bne.n	8000f58 <onKey1+0x2c8>
			{
				alarmSeconds = 59;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <onKey1+0x2f8>)
 8000f52:	223b      	movs	r2, #59	@ 0x3b
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e004      	b.n	8000f62 <onKey1+0x2d2>
			} else {
				alarmSeconds--;
 8000f58:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <onKey1+0x2f8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <onKey1+0x2f8>)
 8000f60:	6013      	str	r3, [r2, #0]
			}
			display1(alarmHours,alarmMinutes,alarmSeconds);
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <onKey1+0x2f0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <onKey1+0x2f4>)
 8000f68:	6811      	ldr	r1, [r2, #0]
 8000f6a:	4a07      	ldr	r2, [pc, #28]	@ (8000f88 <onKey1+0x2f8>)
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fb38 	bl	80015e4 <display1>
			break;
 8000f74:	bf00      	nop
	}
}
 8000f76:	bf00      	nop
 8000f78:	3704      	adds	r7, #4
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000174 	.word	0x20000174
 8000f84:	20000178 	.word	0x20000178
 8000f88:	2000017c 	.word	0x2000017c

08000f8c <onKey2>:

void onKey2()
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af04      	add	r7, sp, #16
	// +
	switch(mode)
 8000f92:	4b90      	ldr	r3, [pc, #576]	@ (80011d4 <onKey2+0x248>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	2b09      	cmp	r3, #9
 8000f9a:	f200 816a 	bhi.w	8001272 <onKey2+0x2e6>
 8000f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa4 <onKey2+0x18>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	080011c5 	.word	0x080011c5
 8000fa8:	08001217 	.word	0x08001217
 8000fac:	08001245 	.word	0x08001245
 8000fb0:	08000fcd 	.word	0x08000fcd
 8000fb4:	08001015 	.word	0x08001015
 8000fb8:	0800105d 	.word	0x0800105d
 8000fbc:	080010a5 	.word	0x080010a5
 8000fc0:	080010ed 	.word	0x080010ed
 8000fc4:	08001135 	.word	0x08001135
 8000fc8:	0800117d 	.word	0x0800117d
	{
		case SET_TIME_HOUR:
			if(hours == 23)
 8000fcc:	4b82      	ldr	r3, [pc, #520]	@ (80011d8 <onKey2+0x24c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b17      	cmp	r3, #23
 8000fd2:	d103      	bne.n	8000fdc <onKey2+0x50>
			{
				hours = 0;
 8000fd4:	4b80      	ldr	r3, [pc, #512]	@ (80011d8 <onKey2+0x24c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e004      	b.n	8000fe6 <onKey2+0x5a>
			} else {
				hours++;
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80011d8 <onKey2+0x24c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4a7d      	ldr	r2, [pc, #500]	@ (80011d8 <onKey2+0x24c>)
 8000fe4:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8000fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80011d8 <onKey2+0x24c>)
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	4b7c      	ldr	r3, [pc, #496]	@ (80011dc <onKey2+0x250>)
 8000fec:	681c      	ldr	r4, [r3, #0]
 8000fee:	4b7c      	ldr	r3, [pc, #496]	@ (80011e0 <onKey2+0x254>)
 8000ff0:	681d      	ldr	r5, [r3, #0]
 8000ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80011e4 <onKey2+0x258>)
 8000ff4:	681e      	ldr	r6, [r3, #0]
 8000ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80011e8 <onKey2+0x25c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a7c      	ldr	r2, [pc, #496]	@ (80011ec <onKey2+0x260>)
 8000ffc:	6812      	ldr	r2, [r2, #0]
 8000ffe:	497c      	ldr	r1, [pc, #496]	@ (80011f0 <onKey2+0x264>)
 8001000:	6809      	ldr	r1, [r1, #0]
 8001002:	9102      	str	r1, [sp, #8]
 8001004:	9201      	str	r2, [sp, #4]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	4633      	mov	r3, r6
 800100a:	462a      	mov	r2, r5
 800100c:	4621      	mov	r1, r4
 800100e:	f000 fa47 	bl	80014a0 <display>
			break;
 8001012:	e12e      	b.n	8001272 <onKey2+0x2e6>
		case SET_TIME_MIN:
			if(minutes == 59)
 8001014:	4b71      	ldr	r3, [pc, #452]	@ (80011dc <onKey2+0x250>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b3b      	cmp	r3, #59	@ 0x3b
 800101a:	d103      	bne.n	8001024 <onKey2+0x98>
			{
				minutes = 0;
 800101c:	4b6f      	ldr	r3, [pc, #444]	@ (80011dc <onKey2+0x250>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e004      	b.n	800102e <onKey2+0xa2>
			} else {
				minutes++;
 8001024:	4b6d      	ldr	r3, [pc, #436]	@ (80011dc <onKey2+0x250>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a6c      	ldr	r2, [pc, #432]	@ (80011dc <onKey2+0x250>)
 800102c:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 800102e:	4b6a      	ldr	r3, [pc, #424]	@ (80011d8 <onKey2+0x24c>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	4b6a      	ldr	r3, [pc, #424]	@ (80011dc <onKey2+0x250>)
 8001034:	681c      	ldr	r4, [r3, #0]
 8001036:	4b6a      	ldr	r3, [pc, #424]	@ (80011e0 <onKey2+0x254>)
 8001038:	681d      	ldr	r5, [r3, #0]
 800103a:	4b6a      	ldr	r3, [pc, #424]	@ (80011e4 <onKey2+0x258>)
 800103c:	681e      	ldr	r6, [r3, #0]
 800103e:	4b6a      	ldr	r3, [pc, #424]	@ (80011e8 <onKey2+0x25c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a6a      	ldr	r2, [pc, #424]	@ (80011ec <onKey2+0x260>)
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	496a      	ldr	r1, [pc, #424]	@ (80011f0 <onKey2+0x264>)
 8001048:	6809      	ldr	r1, [r1, #0]
 800104a:	9102      	str	r1, [sp, #8]
 800104c:	9201      	str	r2, [sp, #4]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4633      	mov	r3, r6
 8001052:	462a      	mov	r2, r5
 8001054:	4621      	mov	r1, r4
 8001056:	f000 fa23 	bl	80014a0 <display>
			break;
 800105a:	e10a      	b.n	8001272 <onKey2+0x2e6>
		case SET_TIME_SEC:
			if(seconds == 59)
 800105c:	4b60      	ldr	r3, [pc, #384]	@ (80011e0 <onKey2+0x254>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b3b      	cmp	r3, #59	@ 0x3b
 8001062:	d103      	bne.n	800106c <onKey2+0xe0>
			{
				seconds = 0;
 8001064:	4b5e      	ldr	r3, [pc, #376]	@ (80011e0 <onKey2+0x254>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e004      	b.n	8001076 <onKey2+0xea>
			} else {
				seconds++;
 800106c:	4b5c      	ldr	r3, [pc, #368]	@ (80011e0 <onKey2+0x254>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	4a5b      	ldr	r2, [pc, #364]	@ (80011e0 <onKey2+0x254>)
 8001074:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8001076:	4b58      	ldr	r3, [pc, #352]	@ (80011d8 <onKey2+0x24c>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	4b58      	ldr	r3, [pc, #352]	@ (80011dc <onKey2+0x250>)
 800107c:	681c      	ldr	r4, [r3, #0]
 800107e:	4b58      	ldr	r3, [pc, #352]	@ (80011e0 <onKey2+0x254>)
 8001080:	681d      	ldr	r5, [r3, #0]
 8001082:	4b58      	ldr	r3, [pc, #352]	@ (80011e4 <onKey2+0x258>)
 8001084:	681e      	ldr	r6, [r3, #0]
 8001086:	4b58      	ldr	r3, [pc, #352]	@ (80011e8 <onKey2+0x25c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a58      	ldr	r2, [pc, #352]	@ (80011ec <onKey2+0x260>)
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	4958      	ldr	r1, [pc, #352]	@ (80011f0 <onKey2+0x264>)
 8001090:	6809      	ldr	r1, [r1, #0]
 8001092:	9102      	str	r1, [sp, #8]
 8001094:	9201      	str	r2, [sp, #4]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	4633      	mov	r3, r6
 800109a:	462a      	mov	r2, r5
 800109c:	4621      	mov	r1, r4
 800109e:	f000 f9ff 	bl	80014a0 <display>
			break;
 80010a2:	e0e6      	b.n	8001272 <onKey2+0x2e6>
		case SET_TIME_YEAR:
			if(year == 99)
 80010a4:	4b4f      	ldr	r3, [pc, #316]	@ (80011e4 <onKey2+0x258>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b63      	cmp	r3, #99	@ 0x63
 80010aa:	d103      	bne.n	80010b4 <onKey2+0x128>
			{
				year = 0;
 80010ac:	4b4d      	ldr	r3, [pc, #308]	@ (80011e4 <onKey2+0x258>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e004      	b.n	80010be <onKey2+0x132>
			} else {
				year++;
 80010b4:	4b4b      	ldr	r3, [pc, #300]	@ (80011e4 <onKey2+0x258>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a4a      	ldr	r2, [pc, #296]	@ (80011e4 <onKey2+0x258>)
 80010bc:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 80010be:	4b46      	ldr	r3, [pc, #280]	@ (80011d8 <onKey2+0x24c>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <onKey2+0x250>)
 80010c4:	681c      	ldr	r4, [r3, #0]
 80010c6:	4b46      	ldr	r3, [pc, #280]	@ (80011e0 <onKey2+0x254>)
 80010c8:	681d      	ldr	r5, [r3, #0]
 80010ca:	4b46      	ldr	r3, [pc, #280]	@ (80011e4 <onKey2+0x258>)
 80010cc:	681e      	ldr	r6, [r3, #0]
 80010ce:	4b46      	ldr	r3, [pc, #280]	@ (80011e8 <onKey2+0x25c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a46      	ldr	r2, [pc, #280]	@ (80011ec <onKey2+0x260>)
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	4946      	ldr	r1, [pc, #280]	@ (80011f0 <onKey2+0x264>)
 80010d8:	6809      	ldr	r1, [r1, #0]
 80010da:	9102      	str	r1, [sp, #8]
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4633      	mov	r3, r6
 80010e2:	462a      	mov	r2, r5
 80010e4:	4621      	mov	r1, r4
 80010e6:	f000 f9db 	bl	80014a0 <display>
			break;
 80010ea:	e0c2      	b.n	8001272 <onKey2+0x2e6>
		case SET_TIME_MONTH:
			if(month == 12)
 80010ec:	4b3e      	ldr	r3, [pc, #248]	@ (80011e8 <onKey2+0x25c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b0c      	cmp	r3, #12
 80010f2:	d103      	bne.n	80010fc <onKey2+0x170>
			{
				month = 1;
 80010f4:	4b3c      	ldr	r3, [pc, #240]	@ (80011e8 <onKey2+0x25c>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e004      	b.n	8001106 <onKey2+0x17a>
			} else {
				month++;
 80010fc:	4b3a      	ldr	r3, [pc, #232]	@ (80011e8 <onKey2+0x25c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	4a39      	ldr	r2, [pc, #228]	@ (80011e8 <onKey2+0x25c>)
 8001104:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8001106:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <onKey2+0x24c>)
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <onKey2+0x250>)
 800110c:	681c      	ldr	r4, [r3, #0]
 800110e:	4b34      	ldr	r3, [pc, #208]	@ (80011e0 <onKey2+0x254>)
 8001110:	681d      	ldr	r5, [r3, #0]
 8001112:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <onKey2+0x258>)
 8001114:	681e      	ldr	r6, [r3, #0]
 8001116:	4b34      	ldr	r3, [pc, #208]	@ (80011e8 <onKey2+0x25c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a34      	ldr	r2, [pc, #208]	@ (80011ec <onKey2+0x260>)
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	4934      	ldr	r1, [pc, #208]	@ (80011f0 <onKey2+0x264>)
 8001120:	6809      	ldr	r1, [r1, #0]
 8001122:	9102      	str	r1, [sp, #8]
 8001124:	9201      	str	r2, [sp, #4]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4633      	mov	r3, r6
 800112a:	462a      	mov	r2, r5
 800112c:	4621      	mov	r1, r4
 800112e:	f000 f9b7 	bl	80014a0 <display>
			break;
 8001132:	e09e      	b.n	8001272 <onKey2+0x2e6>
		case SET_TIME_DAY:
			if(date == 31)
 8001134:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <onKey2+0x260>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b1f      	cmp	r3, #31
 800113a:	d103      	bne.n	8001144 <onKey2+0x1b8>
			{
				date = 1;
 800113c:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <onKey2+0x260>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e004      	b.n	800114e <onKey2+0x1c2>
			} else {
				date++;
 8001144:	4b29      	ldr	r3, [pc, #164]	@ (80011ec <onKey2+0x260>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a28      	ldr	r2, [pc, #160]	@ (80011ec <onKey2+0x260>)
 800114c:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 800114e:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <onKey2+0x24c>)
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <onKey2+0x250>)
 8001154:	681c      	ldr	r4, [r3, #0]
 8001156:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <onKey2+0x254>)
 8001158:	681d      	ldr	r5, [r3, #0]
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <onKey2+0x258>)
 800115c:	681e      	ldr	r6, [r3, #0]
 800115e:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <onKey2+0x25c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a22      	ldr	r2, [pc, #136]	@ (80011ec <onKey2+0x260>)
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	4922      	ldr	r1, [pc, #136]	@ (80011f0 <onKey2+0x264>)
 8001168:	6809      	ldr	r1, [r1, #0]
 800116a:	9102      	str	r1, [sp, #8]
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4633      	mov	r3, r6
 8001172:	462a      	mov	r2, r5
 8001174:	4621      	mov	r1, r4
 8001176:	f000 f993 	bl	80014a0 <display>
			break;
 800117a:	e07a      	b.n	8001272 <onKey2+0x2e6>
		case SET_TIME_WEEKDAY:
			if(weekDay == 7)
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <onKey2+0x264>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b07      	cmp	r3, #7
 8001182:	d103      	bne.n	800118c <onKey2+0x200>
			{
				weekDay = 1;
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <onKey2+0x264>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e004      	b.n	8001196 <onKey2+0x20a>
			} else {
				weekDay++;
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <onKey2+0x264>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a17      	ldr	r2, [pc, #92]	@ (80011f0 <onKey2+0x264>)
 8001194:	6013      	str	r3, [r2, #0]
			}
			display(hours,minutes,seconds,year,month,date,weekDay);
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <onKey2+0x24c>)
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <onKey2+0x250>)
 800119c:	681c      	ldr	r4, [r3, #0]
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <onKey2+0x254>)
 80011a0:	681d      	ldr	r5, [r3, #0]
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <onKey2+0x258>)
 80011a4:	681e      	ldr	r6, [r3, #0]
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <onKey2+0x25c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <onKey2+0x260>)
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	4910      	ldr	r1, [pc, #64]	@ (80011f0 <onKey2+0x264>)
 80011b0:	6809      	ldr	r1, [r1, #0]
 80011b2:	9102      	str	r1, [sp, #8]
 80011b4:	9201      	str	r2, [sp, #4]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	4633      	mov	r3, r6
 80011ba:	462a      	mov	r2, r5
 80011bc:	4621      	mov	r1, r4
 80011be:	f000 f96f 	bl	80014a0 <display>
			break;
 80011c2:	e056      	b.n	8001272 <onKey2+0x2e6>
		case SET_ALARM_HOUR:
			if(alarmHours == 23)
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <onKey2+0x268>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b17      	cmp	r3, #23
 80011ca:	d115      	bne.n	80011f8 <onKey2+0x26c>
			{
				alarmHours = 0;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <onKey2+0x268>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e016      	b.n	8001202 <onKey2+0x276>
 80011d4:	20000180 	.word	0x20000180
 80011d8:	20000118 	.word	0x20000118
 80011dc:	2000011c 	.word	0x2000011c
 80011e0:	20000120 	.word	0x20000120
 80011e4:	20000164 	.word	0x20000164
 80011e8:	20000168 	.word	0x20000168
 80011ec:	20000170 	.word	0x20000170
 80011f0:	2000016c 	.word	0x2000016c
 80011f4:	20000174 	.word	0x20000174
			} else {
				alarmHours++;
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <onKey2+0x2f0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	4a1f      	ldr	r2, [pc, #124]	@ (800127c <onKey2+0x2f0>)
 8001200:	6013      	str	r3, [r2, #0]
			}
			display1(alarmHours,alarmMinutes,alarmSeconds);
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <onKey2+0x2f0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <onKey2+0x2f4>)
 8001208:	6811      	ldr	r1, [r2, #0]
 800120a:	4a1e      	ldr	r2, [pc, #120]	@ (8001284 <onKey2+0x2f8>)
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f9e8 	bl	80015e4 <display1>
			break;
 8001214:	e02d      	b.n	8001272 <onKey2+0x2e6>
		case SET_ALARM_MIN:
			if(alarmMinutes == 59)
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <onKey2+0x2f4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b3b      	cmp	r3, #59	@ 0x3b
 800121c:	d103      	bne.n	8001226 <onKey2+0x29a>
			{
				alarmMinutes = 1;
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <onKey2+0x2f4>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	e004      	b.n	8001230 <onKey2+0x2a4>
			} else {
				alarmMinutes++;
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <onKey2+0x2f4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <onKey2+0x2f4>)
 800122e:	6013      	str	r3, [r2, #0]
			}
			display1(alarmHours,alarmMinutes,alarmSeconds);
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <onKey2+0x2f0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <onKey2+0x2f4>)
 8001236:	6811      	ldr	r1, [r2, #0]
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <onKey2+0x2f8>)
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f9d1 	bl	80015e4 <display1>
			break;
 8001242:	e016      	b.n	8001272 <onKey2+0x2e6>
		case SET_ALARM_SEC:
			if(alarmSeconds == 59)
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <onKey2+0x2f8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b3b      	cmp	r3, #59	@ 0x3b
 800124a:	d103      	bne.n	8001254 <onKey2+0x2c8>
			{
				alarmSeconds = 0;
 800124c:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <onKey2+0x2f8>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e004      	b.n	800125e <onKey2+0x2d2>
			} else {
				alarmSeconds++;
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <onKey2+0x2f8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <onKey2+0x2f8>)
 800125c:	6013      	str	r3, [r2, #0]
			}
			display1(alarmHours,alarmMinutes,alarmSeconds);
 800125e:	4b07      	ldr	r3, [pc, #28]	@ (800127c <onKey2+0x2f0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <onKey2+0x2f4>)
 8001264:	6811      	ldr	r1, [r2, #0]
 8001266:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <onKey2+0x2f8>)
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f9ba 	bl	80015e4 <display1>
			break;
 8001270:	bf00      	nop
	}
}
 8001272:	bf00      	nop
 8001274:	3704      	adds	r7, #4
 8001276:	46bd      	mov	sp, r7
 8001278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127a:	bf00      	nop
 800127c:	20000174 	.word	0x20000174
 8001280:	20000178 	.word	0x20000178
 8001284:	2000017c 	.word	0x2000017c

08001288 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a58      	ldr	r2, [pc, #352]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	f040 808d 	bne.w	80013b4 <HAL_TIM_PeriodElapsedCallback+0x12c>
	{
	switch(keyState)
 800129a:	4b57      	ldr	r3, [pc, #348]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <HAL_TIM_PeriodElapsedCallback+0x20>
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d041      	beq.n	800132a <HAL_TIM_PeriodElapsedCallback+0xa2>
		} else {
			HAL_GPIO_WritePin(BEEP_GPIO_Port,BEEP_Pin,0);
			HAL_TIM_Base_Stop_IT(&htim2);
		}
	}
}
 80012a6:	e0a0      	b.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x162>
			if(!HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin))
 80012a8:	2110      	movs	r1, #16
 80012aa:	4854      	ldr	r0, [pc, #336]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012ac:	f001 fbf0 	bl	8002a90 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d108      	bne.n	80012c8 <HAL_TIM_PeriodElapsedCallback+0x40>
				pressedKey = 0;
 80012b6:	4b52      	ldr	r3, [pc, #328]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
				keyState = 1;
 80012bc:	4b4e      	ldr	r3, [pc, #312]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
				onKey0();
 80012c2:	f7ff fc5b 	bl	8000b7c <onKey0>
			break;
 80012c6:	e08d      	b.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if(!HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin))
 80012c8:	2108      	movs	r1, #8
 80012ca:	484c      	ldr	r0, [pc, #304]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012cc:	f001 fbe0 	bl	8002a90 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d108      	bne.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0x60>
				pressedKey = 1;
 80012d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
				keyState = 1;
 80012dc:	4b46      	ldr	r3, [pc, #280]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
				onKey1();
 80012e2:	f7ff fcd5 	bl	8000c90 <onKey1>
			break;
 80012e6:	e07d      	b.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if(!HAL_GPIO_ReadPin(KEY2_GPIO_Port,KEY2_Pin))
 80012e8:	2104      	movs	r1, #4
 80012ea:	4844      	ldr	r0, [pc, #272]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012ec:	f001 fbd0 	bl	8002a90 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d108      	bne.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x80>
				pressedKey = 2;
 80012f6:	4b42      	ldr	r3, [pc, #264]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012f8:	2202      	movs	r2, #2
 80012fa:	601a      	str	r2, [r3, #0]
				keyState = 1;
 80012fc:	4b3e      	ldr	r3, [pc, #248]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
				onKey2();
 8001302:	f7ff fe43 	bl	8000f8c <onKey2>
			break;
 8001306:	e06d      	b.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if (HAL_GPIO_ReadPin(KEY_UP_GPIO_Port,KEY_UP_Pin))
 8001308:	2101      	movs	r1, #1
 800130a:	483e      	ldr	r0, [pc, #248]	@ (8001404 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800130c:	f001 fbc0 	bl	8002a90 <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d066      	beq.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0x15c>
				pressedKey = -1;
 8001316:	4b3a      	ldr	r3, [pc, #232]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	601a      	str	r2, [r3, #0]
				keyState = 1;
 800131e:	4b36      	ldr	r3, [pc, #216]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
				onKeyUP();
 8001324:	f7ff fb3c 	bl	80009a0 <onKeyUP>
			break;
 8001328:	e05c      	b.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0x15c>
		switch(pressedKey)
 800132a:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	2b03      	cmp	r3, #3
 8001332:	d859      	bhi.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x160>
 8001334:	a201      	add	r2, pc, #4	@ (adr r2, 800133c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	0800138f 	.word	0x0800138f
 8001340:	0800134d 	.word	0x0800134d
 8001344:	08001363 	.word	0x08001363
 8001348:	08001379 	.word	0x08001379
				if(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin))
 800134c:	2110      	movs	r1, #16
 800134e:	482b      	ldr	r0, [pc, #172]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001350:	f001 fb9e 	bl	8002a90 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d024      	beq.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x11c>
					keyState = 0;
 800135a:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
				break;
 8001360:	e020      	b.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x11c>
				if(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin))
 8001362:	2108      	movs	r1, #8
 8001364:	4825      	ldr	r0, [pc, #148]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001366:	f001 fb93 	bl	8002a90 <HAL_GPIO_ReadPin>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01b      	beq.n	80013a8 <HAL_TIM_PeriodElapsedCallback+0x120>
					keyState = 0;
 8001370:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
				break;
 8001376:	e017      	b.n	80013a8 <HAL_TIM_PeriodElapsedCallback+0x120>
				if(HAL_GPIO_ReadPin(KEY2_GPIO_Port,KEY2_Pin))
 8001378:	2104      	movs	r1, #4
 800137a:	4820      	ldr	r0, [pc, #128]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800137c:	f001 fb88 	bl	8002a90 <HAL_GPIO_ReadPin>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d012      	beq.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x124>
					keyState = 0;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
				break;
 800138c:	e00e      	b.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x124>
				if (!HAL_GPIO_ReadPin(KEY_UP_GPIO_Port,KEY_UP_Pin))
 800138e:	2101      	movs	r1, #1
 8001390:	481c      	ldr	r0, [pc, #112]	@ (8001404 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001392:	f001 fb7d 	bl	8002a90 <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d109      	bne.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x128>
					keyState = 0;
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
				break;
 80013a2:	e005      	b.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x128>
				break;
 80013a4:	bf00      	nop
 80013a6:	e01f      	b.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x160>
				break;
 80013a8:	bf00      	nop
 80013aa:	e01d      	b.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x160>
				break;
 80013ac:	bf00      	nop
 80013ae:	e01b      	b.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x160>
				break;
 80013b0:	bf00      	nop
		break;
 80013b2:	e019      	b.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x160>
	else if (htim == &htim2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d116      	bne.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x162>
		if(mode == ALARM)
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b0b      	cmp	r3, #11
 80013c2:	d105      	bne.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x148>
			HAL_GPIO_TogglePin(BEEP_GPIO_Port,BEEP_Pin);
 80013c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013c8:	4811      	ldr	r0, [pc, #68]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80013ca:	f001 fb92 	bl	8002af2 <HAL_GPIO_TogglePin>
}
 80013ce:	e00c      	b.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x162>
			HAL_GPIO_WritePin(BEEP_GPIO_Port,BEEP_Pin,0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013d6:	480e      	ldr	r0, [pc, #56]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80013d8:	f001 fb72 	bl	8002ac0 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim2);
 80013dc:	480a      	ldr	r0, [pc, #40]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80013de:	f002 fe93 	bl	8004108 <HAL_TIM_Base_Stop_IT>
}
 80013e2:	e002      	b.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x162>
			break;
 80013e4:	bf00      	nop
 80013e6:	e000      	b.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x162>
		break;
 80013e8:	bf00      	nop
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001c0 	.word	0x200001c0
 80013f8:	20000194 	.word	0x20000194
 80013fc:	40021000 	.word	0x40021000
 8001400:	20000198 	.word	0x20000198
 8001404:	40020000 	.word	0x40020000
 8001408:	20000208 	.word	0x20000208
 800140c:	20000180 	.word	0x20000180
 8001410:	40021400 	.word	0x40021400

08001414 <getTime>:
void getTime(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8001418:	2200      	movs	r2, #0
 800141a:	4917      	ldr	r1, [pc, #92]	@ (8001478 <getTime+0x64>)
 800141c:	4817      	ldr	r0, [pc, #92]	@ (800147c <getTime+0x68>)
 800141e:	f002 f9f2 	bl	8003806 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 8001422:	2200      	movs	r2, #0
 8001424:	4916      	ldr	r1, [pc, #88]	@ (8001480 <getTime+0x6c>)
 8001426:	4815      	ldr	r0, [pc, #84]	@ (800147c <getTime+0x68>)
 8001428:	f002 facf 	bl	80039ca <HAL_RTC_GetDate>
	
	year = sDate.Year;
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <getTime+0x6c>)
 800142e:	78db      	ldrb	r3, [r3, #3]
 8001430:	461a      	mov	r2, r3
 8001432:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <getTime+0x70>)
 8001434:	601a      	str	r2, [r3, #0]
	month = sDate.Month;
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <getTime+0x6c>)
 8001438:	785b      	ldrb	r3, [r3, #1]
 800143a:	461a      	mov	r2, r3
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <getTime+0x74>)
 800143e:	601a      	str	r2, [r3, #0]
	weekDay = sDate.WeekDay;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <getTime+0x6c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <getTime+0x78>)
 8001448:	601a      	str	r2, [r3, #0]
	date = sDate.Date;
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <getTime+0x6c>)
 800144c:	789b      	ldrb	r3, [r3, #2]
 800144e:	461a      	mov	r2, r3
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <getTime+0x7c>)
 8001452:	601a      	str	r2, [r3, #0]
	
	hours = sTime.Hours;
 8001454:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <getTime+0x64>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <getTime+0x80>)
 800145c:	601a      	str	r2, [r3, #0]
	minutes = sTime.Minutes;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <getTime+0x64>)
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	461a      	mov	r2, r3
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <getTime+0x84>)
 8001466:	601a      	str	r2, [r3, #0]
	seconds = sTime.Seconds;
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <getTime+0x64>)
 800146a:	789b      	ldrb	r3, [r3, #2]
 800146c:	461a      	mov	r2, r3
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <getTime+0x88>)
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000d8 	.word	0x200000d8
 800147c:	2000019c 	.word	0x2000019c
 8001480:	20000114 	.word	0x20000114
 8001484:	20000164 	.word	0x20000164
 8001488:	20000168 	.word	0x20000168
 800148c:	2000016c 	.word	0x2000016c
 8001490:	20000170 	.word	0x20000170
 8001494:	20000118 	.word	0x20000118
 8001498:	2000011c 	.word	0x2000011c
 800149c:	20000120 	.word	0x20000120

080014a0 <display>:

void display(int my_hours,int my_minutes,int my_seconds,int my_year,int my_month,int my_date,int my_weekDay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
	sprintf(temp_str,"%02d:%02d:%02d",my_hours,my_minutes,my_seconds);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	490f      	ldr	r1, [pc, #60]	@ (80014f4 <display+0x54>)
 80014b8:	480f      	ldr	r0, [pc, #60]	@ (80014f8 <display+0x58>)
 80014ba:	f003 fed7 	bl	800526c <siprintf>
	TFT_ShowLine(10,10,24,temp_str);
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <display+0x58>)
 80014c0:	2218      	movs	r2, #24
 80014c2:	210a      	movs	r1, #10
 80014c4:	200a      	movs	r0, #10
 80014c6:	f000 fde3 	bl	8002090 <TFT_ShowLine>
	sprintf(temp_str,"20%02d-%02d-%02d weekDay:%d",my_year,my_month,my_date,my_weekDay);
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	4909      	ldr	r1, [pc, #36]	@ (80014fc <display+0x5c>)
 80014d8:	4807      	ldr	r0, [pc, #28]	@ (80014f8 <display+0x58>)
 80014da:	f003 fec7 	bl	800526c <siprintf>
	TFT_ShowLine(10,34,24,temp_str);
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <display+0x58>)
 80014e0:	2218      	movs	r2, #24
 80014e2:	2122      	movs	r1, #34	@ 0x22
 80014e4:	200a      	movs	r0, #10
 80014e6:	f000 fdd3 	bl	8002090 <TFT_ShowLine>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	080063c8 	.word	0x080063c8
 80014f8:	20000124 	.word	0x20000124
 80014fc:	080063d8 	.word	0x080063d8

08001500 <display_current_time>:

void display_current_time(void)
{
 8001500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001502:	b085      	sub	sp, #20
 8001504:	af04      	add	r7, sp, #16
	getTime();
 8001506:	f7ff ff85 	bl	8001414 <getTime>
	display(hours,minutes,seconds,year,month,date,weekDay);
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <display_current_time+0x40>)
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <display_current_time+0x44>)
 8001510:	681c      	ldr	r4, [r3, #0]
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <display_current_time+0x48>)
 8001514:	681d      	ldr	r5, [r3, #0]
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <display_current_time+0x4c>)
 8001518:	681e      	ldr	r6, [r3, #0]
 800151a:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <display_current_time+0x50>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a0d      	ldr	r2, [pc, #52]	@ (8001554 <display_current_time+0x54>)
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <display_current_time+0x58>)
 8001524:	6809      	ldr	r1, [r1, #0]
 8001526:	9102      	str	r1, [sp, #8]
 8001528:	9201      	str	r2, [sp, #4]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	4633      	mov	r3, r6
 800152e:	462a      	mov	r2, r5
 8001530:	4621      	mov	r1, r4
 8001532:	f7ff ffb5 	bl	80014a0 <display>
}
 8001536:	bf00      	nop
 8001538:	3704      	adds	r7, #4
 800153a:	46bd      	mov	sp, r7
 800153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153e:	bf00      	nop
 8001540:	20000118 	.word	0x20000118
 8001544:	2000011c 	.word	0x2000011c
 8001548:	20000120 	.word	0x20000120
 800154c:	20000164 	.word	0x20000164
 8001550:	20000168 	.word	0x20000168
 8001554:	20000170 	.word	0x20000170
 8001558:	2000016c 	.word	0x2000016c

0800155c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *nhrtc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	switch(mode)
 8001564:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_RTC_AlarmAEventCallback+0x4c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b03      	cmp	r3, #3
 800156a:	dc02      	bgt.n	8001572 <HAL_RTC_AlarmAEventCallback+0x16>
 800156c:	2b00      	cmp	r3, #0
 800156e:	da02      	bge.n	8001576 <HAL_RTC_AlarmAEventCallback+0x1a>
 8001570:	e00a      	b.n	8001588 <HAL_RTC_AlarmAEventCallback+0x2c>
 8001572:	2b0b      	cmp	r3, #11
 8001574:	d108      	bne.n	8001588 <HAL_RTC_AlarmAEventCallback+0x2c>
		case ALARM:
		case SET_ALARM_HOUR:
		case SET_ALARM_MIN:
		case SET_ALARM_SEC:
			
		if(myAlarm.trigger_flag)
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <HAL_RTC_AlarmAEventCallback+0x50>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_RTC_AlarmAEventCallback+0x26>
		{
			display2();
 800157e:	f7ff f975 	bl	800086c <display2>
		}
		display_current_time();
 8001582:	f7ff ffbd 	bl	8001500 <display_current_time>
		
		break;
 8001586:	bf00      	nop
	}
	setAlarmToA(seconds == 59 ? 0 :seconds+ 1  );
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_RTC_AlarmAEventCallback+0x54>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b3b      	cmp	r3, #59	@ 0x3b
 800158e:	d003      	beq.n	8001598 <HAL_RTC_AlarmAEventCallback+0x3c>
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <HAL_RTC_AlarmAEventCallback+0x54>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	e000      	b.n	800159a <HAL_RTC_AlarmAEventCallback+0x3e>
 8001598:	2300      	movs	r3, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f984 	bl	80008a8 <setAlarmToA>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000180 	.word	0x20000180
 80015ac:	20000184 	.word	0x20000184
 80015b0:	20000120 	.word	0x20000120

080015b4 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *nhrtc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	printf("B alarm!\r\n");
 80015bc:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <HAL_RTCEx_AlarmBEventCallback+0x24>)
 80015be:	f003 fe4d 	bl	800525c <puts>
	mode = ALARM;
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_RTCEx_AlarmBEventCallback+0x28>)
 80015c4:	220b      	movs	r2, #11
 80015c6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <HAL_RTCEx_AlarmBEventCallback+0x2c>)
 80015ca:	f002 fd2d 	bl	8004028 <HAL_TIM_Base_Start_IT>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	080063f4 	.word	0x080063f4
 80015dc:	20000180 	.word	0x20000180
 80015e0:	20000208 	.word	0x20000208

080015e4 <display1>:

void display1(int my_hours,int my_minutes,int my_seconds)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	sprintf(temp_str,"%02d:%02d:%02d",my_hours,my_minutes,my_seconds);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4906      	ldr	r1, [pc, #24]	@ (8001614 <display1+0x30>)
 80015fa:	4807      	ldr	r0, [pc, #28]	@ (8001618 <display1+0x34>)
 80015fc:	f003 fe36 	bl	800526c <siprintf>
	TFT_ShowLine(10,124,24,temp_str);
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <display1+0x34>)
 8001602:	2218      	movs	r2, #24
 8001604:	217c      	movs	r1, #124	@ 0x7c
 8001606:	200a      	movs	r0, #10
 8001608:	f000 fd42 	bl	8002090 <TFT_ShowLine>
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	080063c8 	.word	0x080063c8
 8001618:	20000124 	.word	0x20000124

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001620:	f000 fef2 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001624:	f000 f828 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001628:	f7ff f874 	bl	8000714 <MX_GPIO_Init>
  MX_RTC_Init();
 800162c:	f000 f88a 	bl	8001744 <MX_RTC_Init>
  MX_FSMC_Init();
 8001630:	f7fe ff96 	bl	8000560 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 8001634:	f000 fe4c 	bl	80022d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001638:	f000 fd5e 	bl	80020f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800163c:	f000 fdae 	bl	800219c <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	
	myAlarm.trigger_flag = 0;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <main+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

#if 1
	HAL_RTC_Init(&hrtc);
 8001646:	480a      	ldr	r0, [pc, #40]	@ (8001670 <main+0x54>)
 8001648:	f001 ffc0 	bl	80035cc <HAL_RTC_Init>
	TFT_Init();
 800164c:	f000 fabe 	bl	8001bcc <TFT_Init>
	TFT_Clear(0x0000);
 8001650:	2000      	movs	r0, #0
 8001652:	f000 fbec 	bl	8001e2e <TFT_Clear>
	
	getTime();
 8001656:	f7ff fedd 	bl	8001414 <getTime>
	setAlarmToA(seconds + 1);
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <main+0x58>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff f921 	bl	80008a8 <setAlarmToA>
#endif


	while(1)
 8001666:	bf00      	nop
 8001668:	e7fd      	b.n	8001666 <main+0x4a>
 800166a:	bf00      	nop
 800166c:	20000184 	.word	0x20000184
 8001670:	2000019c 	.word	0x2000019c
 8001674:	20000120 	.word	0x20000120

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	@ 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2230      	movs	r2, #48	@ 0x30
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fee8 	bl	800545c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <SystemClock_Config+0xb8>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a22      	ldr	r2, [pc, #136]	@ (8001730 <SystemClock_Config+0xb8>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <SystemClock_Config+0xb8>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <SystemClock_Config+0xbc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001734 <SystemClock_Config+0xbc>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <SystemClock_Config+0xbc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80016d4:	230a      	movs	r3, #10
 80016d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d8:	2301      	movs	r3, #1
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016dc:	2310      	movs	r3, #16
 80016de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016e0:	2301      	movs	r3, #1
 80016e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e8:	f107 0320 	add.w	r3, r7, #32
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 fa33 	bl	8002b58 <HAL_RCC_OscConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80016f8:	f000 f81e 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fc:	230f      	movs	r3, #15
 80016fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fc96 	bl	8003048 <HAL_RCC_ClockConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001722:	f000 f809 	bl	8001738 <Error_Handler>
  }
}
 8001726:	bf00      	nop
 8001728:	3750      	adds	r7, #80	@ 0x50
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <Error_Handler+0x8>

08001744 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b090      	sub	sp, #64	@ 0x40
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800174a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2228      	movs	r2, #40	@ 0x28
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fe79 	bl	800545c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800176a:	4b44      	ldr	r3, [pc, #272]	@ (800187c <MX_RTC_Init+0x138>)
 800176c:	4a44      	ldr	r2, [pc, #272]	@ (8001880 <MX_RTC_Init+0x13c>)
 800176e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001770:	4b42      	ldr	r3, [pc, #264]	@ (800187c <MX_RTC_Init+0x138>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001776:	4b41      	ldr	r3, [pc, #260]	@ (800187c <MX_RTC_Init+0x138>)
 8001778:	227f      	movs	r2, #127	@ 0x7f
 800177a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800177c:	4b3f      	ldr	r3, [pc, #252]	@ (800187c <MX_RTC_Init+0x138>)
 800177e:	22ff      	movs	r2, #255	@ 0xff
 8001780:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001782:	4b3e      	ldr	r3, [pc, #248]	@ (800187c <MX_RTC_Init+0x138>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001788:	4b3c      	ldr	r3, [pc, #240]	@ (800187c <MX_RTC_Init+0x138>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800178e:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <MX_RTC_Init+0x138>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001794:	4839      	ldr	r0, [pc, #228]	@ (800187c <MX_RTC_Init+0x138>)
 8001796:	f001 ff19 	bl	80035cc <HAL_RTC_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80017a0:	f7ff ffca 	bl	8001738 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80017be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	482d      	ldr	r0, [pc, #180]	@ (800187c <MX_RTC_Init+0x138>)
 80017c8:	f001 ff83 	bl	80036d2 <HAL_RTC_SetTime>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80017d2:	f7ff ffb1 	bl	8001738 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80017d6:	2302      	movs	r3, #2
 80017d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JUNE;
 80017dc:	2306      	movs	r3, #6
 80017de:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 18;
 80017e2:	2312      	movs	r3, #18
 80017e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 24;
 80017e8:	2318      	movs	r3, #24
 80017ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80017ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4821      	ldr	r0, [pc, #132]	@ (800187c <MX_RTC_Init+0x138>)
 80017f8:	f002 f863 	bl	80038c2 <HAL_RTC_SetDate>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001802:	f7ff ff99 	bl	8001738 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800181e:	f04f 3380 	mov.w	r3, #2155905152	@ 0x80808080
 8001822:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 18;
 800182c:	2312      	movs	r3, #18
 800182e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001832:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	480f      	ldr	r0, [pc, #60]	@ (800187c <MX_RTC_Init+0x138>)
 8001840:	f002 f912 	bl	8003a68 <HAL_RTC_SetAlarm_IT>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800184a:	f7ff ff75 	bl	8001738 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_B;
 8001858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	@ (800187c <MX_RTC_Init+0x138>)
 8001866:	f002 f8ff 	bl	8003a68 <HAL_RTC_SetAlarm_IT>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_RTC_Init+0x130>
  {
    Error_Handler();
 8001870:	f7ff ff62 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	3740      	adds	r7, #64	@ 0x40
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000019c 	.word	0x2000019c
 8001880:	40002800 	.word	0x40002800

08001884 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a10      	ldr	r2, [pc, #64]	@ (80018e0 <HAL_RTC_MspInit+0x5c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d119      	bne.n	80018d8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018a4:	2302      	movs	r3, #2
 80018a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ac:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 fda8 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80018be:	f7ff ff3b 	bl	8001738 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_RTC_MspInit+0x60>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2029      	movs	r0, #41	@ 0x29
 80018ce:	f000 ff0c 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018d2:	2029      	movs	r0, #41	@ 0x29
 80018d4:	f000 ff25 	bl	8002722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40002800 	.word	0x40002800
 80018e4:	42470e3c 	.word	0x42470e3c

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001934 <HAL_MspInit+0x4c>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	4a08      	ldr	r2, [pc, #32]	@ (8001934 <HAL_MspInit+0x4c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	@ 0x40
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <NMI_Handler+0x4>

08001940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <MemManage_Handler+0x4>

08001950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <UsageFault_Handler+0x4>

08001960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198e:	f000 fd8d 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}

08001996 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_UP_Pin);
 800199a:	2001      	movs	r0, #1
 800199c:	f001 f8c4 	bl	8002b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY2_Pin);
 80019a8:	2004      	movs	r0, #4
 80019aa:	f001 f8bd 	bl	8002b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80019b6:	2008      	movs	r0, #8
 80019b8:	f001 f8b6 	bl	8002b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 80019c4:	2010      	movs	r0, #16
 80019c6:	f001 f8af 	bl	8002b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80019d6:	f002 fbc6 	bl	8004166 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200001c0 	.word	0x200001c0

080019e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019ea:	f002 fbbc 	bl	8004166 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200001c0 	.word	0x200001c0

080019f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <TIM2_IRQHandler+0x10>)
 80019fe:	f002 fbb2 	bl	8004166 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000208 	.word	0x20000208

08001a0c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <RTC_Alarm_IRQHandler+0x10>)
 8001a12:	f002 f96d 	bl	8003cf0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000019c 	.word	0x2000019c

08001a20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e00a      	b.n	8001a48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a32:	f3af 8000 	nop.w
 8001a36:	4601      	mov	r1, r0
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	60ba      	str	r2, [r7, #8]
 8001a3e:	b2ca      	uxtb	r2, r1
 8001a40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf0      	blt.n	8001a32 <_read+0x12>
  }

  return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e009      	b.n	8001a80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf1      	blt.n	8001a6c <_write+0x12>
  }
  return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_close>:

int _close(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aba:	605a      	str	r2, [r3, #4]
  return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_isatty>:

int _isatty(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f003 fce4 	bl	80054f8 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20020000 	.word	0x20020000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	200001bc 	.word	0x200001bc
 8001b64:	200003e8 	.word	0x200003e8

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <TFT_WriteCmd>:
#include "main.h"
#include "stdio.h"
#include "tftlcd_fonts.h"

void TFT_WriteCmd(uint16_t cmd)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
    *(__IO uint16_t *)(0x6C000000) = cmd;
 8001b96:	f04f 42d8 	mov.w	r2, #1811939328	@ 0x6c000000
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	8013      	strh	r3, [r2, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <TFT_WriteData>:

void TFT_WriteData(uint16_t dat)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
    *(__IO uint16_t *)(0x6C000080) = dat;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	@ (8001bc8 <TFT_WriteData+0x1c>)
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	8013      	strh	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	6c000080 	.word	0x6c000080

08001bcc <TFT_Init>:
		id |= TFT_ReadData();
		return id;
}

void TFT_Init()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	TFT_WriteCmd(0xFF);
 8001bd0:	20ff      	movs	r0, #255	@ 0xff
 8001bd2:	f7ff ffdb 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteCmd(0xFF);
 8001bd6:	20ff      	movs	r0, #255	@ 0xff
 8001bd8:	f7ff ffd8 	bl	8001b8c <TFT_WriteCmd>
	delay(5);
 8001bdc:	2005      	movs	r0, #5
 8001bde:	f000 fc85 	bl	80024ec <HAL_Delay>

	TFT_WriteCmd(0xFF);
 8001be2:	20ff      	movs	r0, #255	@ 0xff
 8001be4:	f7ff ffd2 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteCmd(0xFF);
 8001be8:	20ff      	movs	r0, #255	@ 0xff
 8001bea:	f7ff ffcf 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteCmd(0xFF);
 8001bee:	20ff      	movs	r0, #255	@ 0xff
 8001bf0:	f7ff ffcc 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteCmd(0xFF);
 8001bf4:	20ff      	movs	r0, #255	@ 0xff
 8001bf6:	f7ff ffc9 	bl	8001b8c <TFT_WriteCmd>
	delay(10);
 8001bfa:	200a      	movs	r0, #10
 8001bfc:	f000 fc76 	bl	80024ec <HAL_Delay>

	TFT_WriteCmd(0xB0);
 8001c00:	20b0      	movs	r0, #176	@ 0xb0
 8001c02:	f7ff ffc3 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff ffd0 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xB3);
 8001c0c:	20b3      	movs	r0, #179	@ 0xb3
 8001c0e:	f7ff ffbd 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x02);
 8001c12:	2002      	movs	r0, #2
 8001c14:	f7ff ffca 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff ffc7 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff ffc4 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ffc1 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xC0);
 8001c2a:	20c0      	movs	r0, #192	@ 0xc0
 8001c2c:	f7ff ffae 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x13);
 8001c30:	2013      	movs	r0, #19
 8001c32:	f7ff ffbb 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x3B);//480
 8001c36:	203b      	movs	r0, #59	@ 0x3b
 8001c38:	f7ff ffb8 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ffb5 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f7ff ffb2 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff ffaf 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x01);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f7ff ffac 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);//NW
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff ffa9 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x43);
 8001c5a:	2043      	movs	r0, #67	@ 0x43
 8001c5c:	f7ff ffa6 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xC1);
 8001c60:	20c1      	movs	r0, #193	@ 0xc1
 8001c62:	f7ff ff93 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x08);
 8001c66:	2008      	movs	r0, #8
 8001c68:	f7ff ffa0 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x1B);//CLOCK
 8001c6c:	201b      	movs	r0, #27
 8001c6e:	f7ff ff9d 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x08);
 8001c72:	2008      	movs	r0, #8
 8001c74:	f7ff ff9a 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x08);
 8001c78:	2008      	movs	r0, #8
 8001c7a:	f7ff ff97 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xC4);
 8001c7e:	20c4      	movs	r0, #196	@ 0xc4
 8001c80:	f7ff ff84 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x11);
 8001c84:	2011      	movs	r0, #17
 8001c86:	f7ff ff91 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x01);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff ff8e 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x73);
 8001c90:	2073      	movs	r0, #115	@ 0x73
 8001c92:	f7ff ff8b 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x01);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff ff88 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xC6);
 8001c9c:	20c6      	movs	r0, #198	@ 0xc6
 8001c9e:	f7ff ff75 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff ff82 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xC8);
 8001ca8:	20c8      	movs	r0, #200	@ 0xc8
 8001caa:	f7ff ff6f 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x0F);
 8001cae:	200f      	movs	r0, #15
 8001cb0:	f7ff ff7c 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x05);
 8001cb4:	2005      	movs	r0, #5
 8001cb6:	f7ff ff79 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x14);
 8001cba:	2014      	movs	r0, #20
 8001cbc:	f7ff ff76 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x5C);
 8001cc0:	205c      	movs	r0, #92	@ 0x5c
 8001cc2:	f7ff ff73 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x03);
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	f7ff ff70 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x07);
 8001ccc:	2007      	movs	r0, #7
 8001cce:	f7ff ff6d 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x07);
 8001cd2:	2007      	movs	r0, #7
 8001cd4:	f7ff ff6a 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x10);
 8001cd8:	2010      	movs	r0, #16
 8001cda:	f7ff ff67 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7ff ff64 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x23);
 8001ce4:	2023      	movs	r0, #35	@ 0x23
 8001ce6:	f7ff ff61 	bl	8001bac <TFT_WriteData>

	TFT_WriteData(0x10);
 8001cea:	2010      	movs	r0, #16
 8001cec:	f7ff ff5e 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x07);
 8001cf0:	2007      	movs	r0, #7
 8001cf2:	f7ff ff5b 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x07);
 8001cf6:	2007      	movs	r0, #7
 8001cf8:	f7ff ff58 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x53);
 8001cfc:	2053      	movs	r0, #83	@ 0x53
 8001cfe:	f7ff ff55 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x0C);
 8001d02:	200c      	movs	r0, #12
 8001d04:	f7ff ff52 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x14);
 8001d08:	2014      	movs	r0, #20
 8001d0a:	f7ff ff4f 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x05);
 8001d0e:	2005      	movs	r0, #5
 8001d10:	f7ff ff4c 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x0F);
 8001d14:	200f      	movs	r0, #15
 8001d16:	f7ff ff49 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x23);
 8001d1a:	2023      	movs	r0, #35	@ 0x23
 8001d1c:	f7ff ff46 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff ff43 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0x35);
 8001d26:	2035      	movs	r0, #53	@ 0x35
 8001d28:	f7ff ff30 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff ff3d 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0x44);
 8001d32:	2044      	movs	r0, #68	@ 0x44
 8001d34:	f7ff ff2a 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff ff37 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x01);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f7ff ff34 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xD0);
 8001d44:	20d0      	movs	r0, #208	@ 0xd0
 8001d46:	f7ff ff21 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x07);
 8001d4a:	2007      	movs	r0, #7
 8001d4c:	f7ff ff2e 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x07);//VCI1
 8001d50:	2007      	movs	r0, #7
 8001d52:	f7ff ff2b 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x1D);//VRH
 8001d56:	201d      	movs	r0, #29
 8001d58:	f7ff ff28 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x03);//BT
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f7ff ff25 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xD1);
 8001d62:	20d1      	movs	r0, #209	@ 0xd1
 8001d64:	f7ff ff12 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x03);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f7ff ff1f 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x5B);//VCM
 8001d6e:	205b      	movs	r0, #91	@ 0x5b
 8001d70:	f7ff ff1c 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x10);//VDV
 8001d74:	2010      	movs	r0, #16
 8001d76:	f7ff ff19 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xD2);
 8001d7a:	20d2      	movs	r0, #210	@ 0xd2
 8001d7c:	f7ff ff06 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x03);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f7ff ff13 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x24);
 8001d86:	2024      	movs	r0, #36	@ 0x24
 8001d88:	f7ff ff10 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x04);
 8001d8c:	2004      	movs	r0, #4
 8001d8e:	f7ff ff0d 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0x2A);
 8001d92:	202a      	movs	r0, #42	@ 0x2a
 8001d94:	f7ff fefa 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff ff07 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff ff04 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x01);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff ff01 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x3F);//320
 8001daa:	203f      	movs	r0, #63	@ 0x3f
 8001dac:	f7ff fefe 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0x2B);
 8001db0:	202b      	movs	r0, #43	@ 0x2b
 8001db2:	f7ff feeb 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fef8 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x00);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff fef5 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0x01);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff fef2 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(0xDF);//480
 8001dc8:	20df      	movs	r0, #223	@ 0xdf
 8001dca:	f7ff feef 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0x36);
 8001dce:	2036      	movs	r0, #54	@ 0x36
 8001dd0:	f7ff fedc 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x00);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff fee9 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0xC0);
 8001dda:	20c0      	movs	r0, #192	@ 0xc0
 8001ddc:	f7ff fed6 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x13);
 8001de0:	2013      	movs	r0, #19
 8001de2:	f7ff fee3 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0x3A);
 8001de6:	203a      	movs	r0, #58	@ 0x3a
 8001de8:	f7ff fed0 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(0x55);
 8001dec:	2055      	movs	r0, #85	@ 0x55
 8001dee:	f7ff fedd 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0x11);
 8001df2:	2011      	movs	r0, #17
 8001df4:	f7ff feca 	bl	8001b8c <TFT_WriteCmd>
	delay(150);
 8001df8:	2096      	movs	r0, #150	@ 0x96
 8001dfa:	f000 fb77 	bl	80024ec <HAL_Delay>

	TFT_WriteCmd(0x29);
 8001dfe:	2029      	movs	r0, #41	@ 0x29
 8001e00:	f7ff fec4 	bl	8001b8c <TFT_WriteCmd>
	delay(30);
 8001e04:	201e      	movs	r0, #30
 8001e06:	f000 fb71 	bl	80024ec <HAL_Delay>

	TFT_WriteCmd(0x2C);
 8001e0a:	202c      	movs	r0, #44	@ 0x2c
 8001e0c:	f7ff febe 	bl	8001b8c <TFT_WriteCmd>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <TFT_WriteData_Color>:
	TFT_WriteCmd(cmd);
	TFT_WriteData(data);
}

void TFT_WriteData_Color(uint16_t color)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
	TFT_WriteData(color);
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fec3 	bl	8001bac <TFT_WriteData>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <TFT_Clear>:

void TFT_Clear(uint16_t color)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j ;

	TFT_Set_Window(0, 0, WIDTH-1,HEIGHT-1);
 8001e38:	f240 13df 	movw	r3, #479	@ 0x1df
 8001e3c:	f240 123f 	movw	r2, #319	@ 0x13f
 8001e40:	2100      	movs	r1, #0
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f81d 	bl	8001e82 <TFT_Set_Window>
  	for(i=0; i<WIDTH; i++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	81fb      	strh	r3, [r7, #14]
 8001e4c:	e010      	b.n	8001e70 <TFT_Clear+0x42>
	{
		for (j=0; j<HEIGHT; j++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	81bb      	strh	r3, [r7, #12]
 8001e52:	e006      	b.n	8001e62 <TFT_Clear+0x34>
		{
			TFT_WriteData_Color(color);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ffdc 	bl	8001e14 <TFT_WriteData_Color>
		for (j=0; j<HEIGHT; j++)
 8001e5c:	89bb      	ldrh	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	81bb      	strh	r3, [r7, #12]
 8001e62:	89bb      	ldrh	r3, [r7, #12]
 8001e64:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001e68:	d3f4      	bcc.n	8001e54 <TFT_Clear+0x26>
  	for(i=0; i<WIDTH; i++)
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	81fb      	strh	r3, [r7, #14]
 8001e70:	89fb      	ldrh	r3, [r7, #14]
 8001e72:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e76:	d3ea      	bcc.n	8001e4e <TFT_Clear+0x20>
		}
	}
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <TFT_Set_Window>:

void TFT_Set_Window(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height)
{
 8001e82:	b590      	push	{r4, r7, lr}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4604      	mov	r4, r0
 8001e8a:	4608      	mov	r0, r1
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4623      	mov	r3, r4
 8001e92:	80fb      	strh	r3, [r7, #6]
 8001e94:	4603      	mov	r3, r0
 8001e96:	80bb      	strh	r3, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	803b      	strh	r3, [r7, #0]
	TFT_WriteCmd(0x2A);
 8001ea0:	202a      	movs	r0, #42	@ 0x2a
 8001ea2:	f7ff fe73 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(sx/256);
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fe7d 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(sx%256);
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fe77 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(width/256);
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fe71 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(width%256);
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe6b 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0x2B);
 8001ed6:	202b      	movs	r0, #43	@ 0x2b
 8001ed8:	f7ff fe58 	bl	8001b8c <TFT_WriteCmd>
	TFT_WriteData(sy/256);
 8001edc:	88bb      	ldrh	r3, [r7, #4]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fe62 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(sy%256);
 8001ee8:	88bb      	ldrh	r3, [r7, #4]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fe5c 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(height/256);
 8001ef4:	883b      	ldrh	r3, [r7, #0]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fe56 	bl	8001bac <TFT_WriteData>
	TFT_WriteData(height%256);
 8001f00:	883b      	ldrh	r3, [r7, #0]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fe50 	bl	8001bac <TFT_WriteData>

	TFT_WriteCmd(0x2C);
 8001f0c:	202c      	movs	r0, #44	@ 0x2c
 8001f0e:	f7ff fe3d 	bl	8001b8c <TFT_WriteCmd>
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}

08001f1a <TFT_DrawPoint>:

void TFT_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	80fb      	strh	r3, [r7, #6]
 8001f24:	460b      	mov	r3, r1
 8001f26:	80bb      	strh	r3, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	807b      	strh	r3, [r7, #2]
#ifdef HEIGHT_AS_WIDTH
	TFT_Set_Window(y, HEIGHT - x ,1, 1);
	TFT_WriteData_Color(color);
#else
	TFT_Set_Window(x, y,x, y);
 8001f2c:	88bb      	ldrh	r3, [r7, #4]
 8001f2e:	88fa      	ldrh	r2, [r7, #6]
 8001f30:	88b9      	ldrh	r1, [r7, #4]
 8001f32:	88f8      	ldrh	r0, [r7, #6]
 8001f34:	f7ff ffa5 	bl	8001e82 <TFT_Set_Window>
	TFT_WriteData_Color(color);
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff6a 	bl	8001e14 <TFT_WriteData_Color>
#endif
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <TFT_ShowChar>:

void TFT_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4604      	mov	r4, r0
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	80fb      	strh	r3, [r7, #6]
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80bb      	strh	r3, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	70fb      	strb	r3, [r7, #3]
 8001f62:	4613      	mov	r3, r2
 8001f64:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);
 8001f6a:	78bb      	ldrb	r3, [r7, #2]
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	78bb      	ldrb	r3, [r7, #2]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	78bb      	ldrb	r3, [r7, #2]
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	fb12 f303 	smulbb	r3, r2, r3
 8001f92:	727b      	strb	r3, [r7, #9]
 	num=num-' ';
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	3b20      	subs	r3, #32
 8001f98:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	737b      	strb	r3, [r7, #13]
 8001f9e:	e066      	b.n	800206e <TFT_ShowChar+0x126>
	{
		if(size==12)temp=ascii_1206[num][t];
 8001fa0:	78bb      	ldrb	r3, [r7, #2]
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d10b      	bne.n	8001fbe <TFT_ShowChar+0x76>
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	7b79      	ldrb	r1, [r7, #13]
 8001faa:	4836      	ldr	r0, [pc, #216]	@ (8002084 <TFT_ShowChar+0x13c>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	440b      	add	r3, r1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e019      	b.n	8001ff2 <TFT_ShowChar+0xaa>
		else if(size==16)temp=ascii_1608[num][t];
 8001fbe:	78bb      	ldrb	r3, [r7, #2]
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d108      	bne.n	8001fd6 <TFT_ShowChar+0x8e>
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	7b7b      	ldrb	r3, [r7, #13]
 8001fc8:	492f      	ldr	r1, [pc, #188]	@ (8002088 <TFT_ShowChar+0x140>)
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	440a      	add	r2, r1
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e00d      	b.n	8001ff2 <TFT_ShowChar+0xaa>
		else if(size==24)temp=ascii_2412[num][t];
 8001fd6:	78bb      	ldrb	r3, [r7, #2]
 8001fd8:	2b18      	cmp	r3, #24
 8001fda:	d14d      	bne.n	8002078 <TFT_ShowChar+0x130>
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	7b79      	ldrb	r1, [r7, #13]
 8001fe0:	482a      	ldr	r0, [pc, #168]	@ (800208c <TFT_ShowChar+0x144>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	440b      	add	r3, r1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	73fb      	strb	r3, [r7, #15]
		else return;
		for(t1=0;t1<8;t1++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73bb      	strb	r3, [r7, #14]
 8001ff6:	e032      	b.n	800205e <TFT_ShowChar+0x116>
		{
			if(temp&0x80)TFT_DrawPoint(x,y,FRONT_COLOR);
 8001ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da07      	bge.n	8002010 <TFT_ShowChar+0xc8>
 8002000:	88b9      	ldrh	r1, [r7, #4]
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff86 	bl	8001f1a <TFT_DrawPoint>
 800200e:	e009      	b.n	8002024 <TFT_ShowChar+0xdc>
			else if(mode==0)TFT_DrawPoint(x,y,BACK_COLOR);
 8002010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <TFT_ShowChar+0xdc>
 8002018:	88b9      	ldrh	r1, [r7, #4]
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	2200      	movs	r2, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff7b 	bl	8001f1a <TFT_DrawPoint>
			temp<<=1;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
			y++;
 800202a:	88bb      	ldrh	r3, [r7, #4]
 800202c:	3301      	adds	r3, #1
 800202e:	80bb      	strh	r3, [r7, #4]
			if(y>=HEIGHT)return;		//��������
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8002036:	d221      	bcs.n	800207c <TFT_ShowChar+0x134>
			if((y-y0)==size)
 8002038:	88ba      	ldrh	r2, [r7, #4]
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	1ad2      	subs	r2, r2, r3
 800203e:	78bb      	ldrb	r3, [r7, #2]
 8002040:	429a      	cmp	r2, r3
 8002042:	d109      	bne.n	8002058 <TFT_ShowChar+0x110>
			{
				y=y0;
 8002044:	897b      	ldrh	r3, [r7, #10]
 8002046:	80bb      	strh	r3, [r7, #4]
				x++;
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	3301      	adds	r3, #1
 800204c:	80fb      	strh	r3, [r7, #6]
				if(x>=HEIGHT)return;	//��������
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8002054:	d307      	bcc.n	8002066 <TFT_ShowChar+0x11e>
 8002056:	e012      	b.n	800207e <TFT_ShowChar+0x136>
		for(t1=0;t1<8;t1++)
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	3301      	adds	r3, #1
 800205c:	73bb      	strb	r3, [r7, #14]
 800205e:	7bbb      	ldrb	r3, [r7, #14]
 8002060:	2b07      	cmp	r3, #7
 8002062:	d9c9      	bls.n	8001ff8 <TFT_ShowChar+0xb0>
 8002064:	e000      	b.n	8002068 <TFT_ShowChar+0x120>
				break;
 8002066:	bf00      	nop
	for(t=0;t<csize;t++)
 8002068:	7b7b      	ldrb	r3, [r7, #13]
 800206a:	3301      	adds	r3, #1
 800206c:	737b      	strb	r3, [r7, #13]
 800206e:	7b7a      	ldrb	r2, [r7, #13]
 8002070:	7a7b      	ldrb	r3, [r7, #9]
 8002072:	429a      	cmp	r2, r3
 8002074:	d394      	bcc.n	8001fa0 <TFT_ShowChar+0x58>
 8002076:	e002      	b.n	800207e <TFT_ShowChar+0x136>
		else return;
 8002078:	bf00      	nop
 800207a:	e000      	b.n	800207e <TFT_ShowChar+0x136>
			if(y>=HEIGHT)return;		//��������
 800207c:	bf00      	nop
			}
		}
	}
}
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	08006418 	.word	0x08006418
 8002088:	0800688c 	.word	0x0800688c
 800208c:	08006e7c 	.word	0x08006e7c

08002090 <TFT_ShowLine>:

void TFT_ShowLine(uint16_t x,uint16_t y,uint8_t size,uint8_t *p)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af02      	add	r7, sp, #8
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	4603      	mov	r3, r0
 800209a:	81fb      	strh	r3, [r7, #14]
 800209c:	460b      	mov	r3, r1
 800209e:	81bb      	strh	r3, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	72fb      	strb	r3, [r7, #11]
	uint8_t x0 = x;
 80020a4:	89fb      	ldrh	r3, [r7, #14]
 80020a6:	75fb      	strb	r3, [r7, #23]
	while((*p<='~')&&(*p>=' '))
 80020a8:	e01a      	b.n	80020e0 <TFT_ShowLine+0x50>
	{
			if((x > WIDTH) || (y > HEIGHT))
 80020aa:	89fb      	ldrh	r3, [r7, #14]
 80020ac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80020b0:	d81e      	bhi.n	80020f0 <TFT_ShowLine+0x60>
 80020b2:	89bb      	ldrh	r3, [r7, #12]
 80020b4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80020b8:	d81a      	bhi.n	80020f0 <TFT_ShowLine+0x60>
				break;
			TFT_ShowChar(x,y,*p,size,0);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	89b9      	ldrh	r1, [r7, #12]
 80020c2:	89f8      	ldrh	r0, [r7, #14]
 80020c4:	2400      	movs	r4, #0
 80020c6:	9400      	str	r4, [sp, #0]
 80020c8:	f7ff ff3e 	bl	8001f48 <TFT_ShowChar>
			x+=size/2;
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	085b      	lsrs	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	89fb      	ldrh	r3, [r7, #14]
 80020d6:	4413      	add	r3, r2
 80020d8:	81fb      	strh	r3, [r7, #14]
			p++;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3301      	adds	r3, #1
 80020de:	607b      	str	r3, [r7, #4]
	while((*p<='~')&&(*p>=' '))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b7e      	cmp	r3, #126	@ 0x7e
 80020e6:	d803      	bhi.n	80020f0 <TFT_ShowLine+0x60>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b1f      	cmp	r3, #31
 80020ee:	d8dc      	bhi.n	80020aa <TFT_ShowLine+0x1a>
	}
}
 80020f0:	bf00      	nop
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd90      	pop	{r4, r7, pc}

080020f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fe:	f107 0308 	add.w	r3, r7, #8
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210c:	463b      	mov	r3, r7
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002114:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <MX_TIM1_Init+0x9c>)
 8002116:	4a20      	ldr	r2, [pc, #128]	@ (8002198 <MX_TIM1_Init+0xa0>)
 8002118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 400;
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <MX_TIM1_Init+0x9c>)
 800211c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002120:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002122:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <MX_TIM1_Init+0x9c>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 8002128:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <MX_TIM1_Init+0x9c>)
 800212a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800212e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002130:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <MX_TIM1_Init+0x9c>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <MX_TIM1_Init+0x9c>)
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213c:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <MX_TIM1_Init+0x9c>)
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002142:	4814      	ldr	r0, [pc, #80]	@ (8002194 <MX_TIM1_Init+0x9c>)
 8002144:	f001 ff20 	bl	8003f88 <HAL_TIM_Base_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800214e:	f7ff faf3 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002156:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	4619      	mov	r1, r3
 800215e:	480d      	ldr	r0, [pc, #52]	@ (8002194 <MX_TIM1_Init+0x9c>)
 8002160:	f002 f8f1 	bl	8004346 <HAL_TIM_ConfigClockSource>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800216a:	f7ff fae5 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002176:	463b      	mov	r3, r7
 8002178:	4619      	mov	r1, r3
 800217a:	4806      	ldr	r0, [pc, #24]	@ (8002194 <MX_TIM1_Init+0x9c>)
 800217c:	f002 fb18 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002186:	f7ff fad7 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200001c0 	.word	0x200001c0
 8002198:	40010000 	.word	0x40010000

0800219c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b0:	463b      	mov	r3, r7
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <MX_TIM2_Init+0x98>)
 80021ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 80021c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002234 <MX_TIM2_Init+0x98>)
 80021c2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80021c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <MX_TIM2_Init+0x98>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80021ce:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <MX_TIM2_Init+0x98>)
 80021d0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80021d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d6:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <MX_TIM2_Init+0x98>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021dc:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <MX_TIM2_Init+0x98>)
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e2:	4814      	ldr	r0, [pc, #80]	@ (8002234 <MX_TIM2_Init+0x98>)
 80021e4:	f001 fed0 	bl	8003f88 <HAL_TIM_Base_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80021ee:	f7ff faa3 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	4619      	mov	r1, r3
 80021fe:	480d      	ldr	r0, [pc, #52]	@ (8002234 <MX_TIM2_Init+0x98>)
 8002200:	f002 f8a1 	bl	8004346 <HAL_TIM_ConfigClockSource>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800220a:	f7ff fa95 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002216:	463b      	mov	r3, r7
 8002218:	4619      	mov	r1, r3
 800221a:	4806      	ldr	r0, [pc, #24]	@ (8002234 <MX_TIM2_Init+0x98>)
 800221c:	f002 fac8 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002226:	f7ff fa87 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000208 	.word	0x20000208

08002238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a20      	ldr	r2, [pc, #128]	@ (80022c8 <HAL_TIM_Base_MspInit+0x90>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d11e      	bne.n	8002288 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <HAL_TIM_Base_MspInit+0x94>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	4a1e      	ldr	r2, [pc, #120]	@ (80022cc <HAL_TIM_Base_MspInit+0x94>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6453      	str	r3, [r2, #68]	@ 0x44
 800225a:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <HAL_TIM_Base_MspInit+0x94>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2018      	movs	r0, #24
 800226c:	f000 fa3d 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002270:	2018      	movs	r0, #24
 8002272:	f000 fa56 	bl	8002722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	2019      	movs	r0, #25
 800227c:	f000 fa35 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002280:	2019      	movs	r0, #25
 8002282:	f000 fa4e 	bl	8002722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002286:	e01a      	b.n	80022be <HAL_TIM_Base_MspInit+0x86>
  else if(tim_baseHandle->Instance==TIM2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002290:	d115      	bne.n	80022be <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <HAL_TIM_Base_MspInit+0x94>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a0c      	ldr	r2, [pc, #48]	@ (80022cc <HAL_TIM_Base_MspInit+0x94>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_TIM_Base_MspInit+0x94>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	201c      	movs	r0, #28
 80022b4:	f000 fa19 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022b8:	201c      	movs	r0, #28
 80022ba:	f000 fa32 	bl	8002722 <HAL_NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40023800 	.word	0x40023800

080022d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <MX_USART2_UART_Init+0x4c>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <MX_USART2_UART_Init+0x50>)
 80022d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <MX_USART2_UART_Init+0x4c>)
 80022dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <MX_USART2_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <MX_USART2_UART_Init+0x4c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <MX_USART2_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <MX_USART2_UART_Init+0x4c>)
 80022f6:	220c      	movs	r2, #12
 80022f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	@ (800231c <MX_USART2_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <MX_USART2_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	@ (800231c <MX_USART2_UART_Init+0x4c>)
 8002308:	f002 fae2 	bl	80048d0 <HAL_UART_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002312:	f7ff fa11 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000250 	.word	0x20000250
 8002320:	40004400 	.word	0x40004400

08002324 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	@ 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a19      	ldr	r2, [pc, #100]	@ (80023a8 <HAL_UART_MspInit+0x84>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d12b      	bne.n	800239e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <HAL_UART_MspInit+0x88>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	4a17      	ldr	r2, [pc, #92]	@ (80023ac <HAL_UART_MspInit+0x88>)
 8002350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002354:	6413      	str	r3, [r2, #64]	@ 0x40
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_UART_MspInit+0x88>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_UART_MspInit+0x88>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	4a10      	ldr	r2, [pc, #64]	@ (80023ac <HAL_UART_MspInit+0x88>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6313      	str	r3, [r2, #48]	@ 0x30
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <HAL_UART_MspInit+0x88>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800237e:	230c      	movs	r3, #12
 8002380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800238e:	2307      	movs	r3, #7
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	@ (80023b0 <HAL_UART_MspInit+0x8c>)
 800239a:	f000 f9dd 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800239e:	bf00      	nop
 80023a0:	3728      	adds	r7, #40	@ 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40004400 	.word	0x40004400
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000

080023b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023b8:	f7ff fbd6 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023bc:	480c      	ldr	r0, [pc, #48]	@ (80023f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023be:	490d      	ldr	r1, [pc, #52]	@ (80023f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c0:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e2:	f003 f88f 	bl	8005504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e6:	f7ff f919 	bl	800161c <main>
  bx  lr    
 80023ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80023f8:	08007c1c 	.word	0x08007c1c
  ldr r2, =_sbss
 80023fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002400:	200003e8 	.word	0x200003e8

08002404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800240c:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0d      	ldr	r2, [pc, #52]	@ (8002448 <HAL_Init+0x40>)
 8002412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0a      	ldr	r2, [pc, #40]	@ (8002448 <HAL_Init+0x40>)
 800241e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002424:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a07      	ldr	r2, [pc, #28]	@ (8002448 <HAL_Init+0x40>)
 800242a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f94f 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002436:	200f      	movs	r0, #15
 8002438:	f000 f808 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243c:	f7ff fa54 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023c00 	.word	0x40023c00

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_InitTick+0x54>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_InitTick+0x58>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002462:	fbb3 f3f1 	udiv	r3, r3, r1
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f967 	bl	800273e <HAL_SYSTICK_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00e      	b.n	8002498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d80a      	bhi.n	8002496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002480:	2200      	movs	r2, #0
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f000 f92f 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800248c:	4a06      	ldr	r2, [pc, #24]	@ (80024a8 <HAL_InitTick+0x5c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000008 	.word	0x20000008
 80024a8:	20000004 	.word	0x20000004

080024ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_IncTick+0x20>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_IncTick+0x24>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <HAL_IncTick+0x24>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000008 	.word	0x20000008
 80024d0:	20000298 	.word	0x20000298

080024d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <HAL_GetTick+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000298 	.word	0x20000298

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff ffee 	bl	80024d4 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffde 	bl	80024d4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000008 	.word	0x20000008

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	@ (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	@ (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	@ (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	@ 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	@ (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff8e 	bl	80025d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff29 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff3e 	bl	800257c <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff8e 	bl	8002628 <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5d 	bl	80025d4 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff31 	bl	8002598 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e16b      	b.n	8002a4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 815a 	bne.w	8002a46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d130      	bne.n	800280c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 0201 	and.w	r2, r3, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b03      	cmp	r3, #3
 8002816:	d017      	beq.n	8002848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80b4 	beq.w	8002a46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b60      	ldr	r3, [pc, #384]	@ (8002a64 <HAL_GPIO_Init+0x30c>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	4a5f      	ldr	r2, [pc, #380]	@ (8002a64 <HAL_GPIO_Init+0x30c>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002a64 <HAL_GPIO_Init+0x30c>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a52      	ldr	r2, [pc, #328]	@ (8002a6c <HAL_GPIO_Init+0x314>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d02b      	beq.n	800297e <HAL_GPIO_Init+0x226>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a51      	ldr	r2, [pc, #324]	@ (8002a70 <HAL_GPIO_Init+0x318>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d025      	beq.n	800297a <HAL_GPIO_Init+0x222>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a50      	ldr	r2, [pc, #320]	@ (8002a74 <HAL_GPIO_Init+0x31c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01f      	beq.n	8002976 <HAL_GPIO_Init+0x21e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4f      	ldr	r2, [pc, #316]	@ (8002a78 <HAL_GPIO_Init+0x320>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0x21a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4e      	ldr	r2, [pc, #312]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x216>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4d      	ldr	r2, [pc, #308]	@ (8002a80 <HAL_GPIO_Init+0x328>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x212>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4c      	ldr	r2, [pc, #304]	@ (8002a84 <HAL_GPIO_Init+0x32c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x20e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4b      	ldr	r2, [pc, #300]	@ (8002a88 <HAL_GPIO_Init+0x330>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x20a>
 800295e:	2307      	movs	r3, #7
 8002960:	e00e      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002962:	2308      	movs	r3, #8
 8002964:	e00c      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002966:	2306      	movs	r3, #6
 8002968:	e00a      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800296a:	2305      	movs	r3, #5
 800296c:	e008      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800296e:	2304      	movs	r3, #4
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002972:	2303      	movs	r3, #3
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x228>
 8002976:	2302      	movs	r3, #2
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x228>
 800297e:	2300      	movs	r3, #0
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f002 0203 	and.w	r2, r2, #3
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	4093      	lsls	r3, r2
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002990:	4935      	ldr	r1, [pc, #212]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c2:	4a32      	ldr	r2, [pc, #200]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c8:	4b30      	ldr	r3, [pc, #192]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029ec:	4a27      	ldr	r2, [pc, #156]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f2:	4b26      	ldr	r3, [pc, #152]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a16:	4a1d      	ldr	r2, [pc, #116]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a40:	4a12      	ldr	r2, [pc, #72]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	f67f ae90 	bls.w	8002774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3724      	adds	r7, #36	@ 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40021400 	.word	0x40021400
 8002a84:	40021800 	.word	0x40021800
 8002a88:	40021c00 	.word	0x40021c00
 8002a8c:	40013c00 	.word	0x40013c00

08002a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e001      	b.n	8002ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002adc:	e003      	b.n	8002ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	041a      	lsls	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b04:	887a      	ldrh	r2, [r7, #2]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	041a      	lsls	r2, r3, #16
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	400b      	ands	r3, r1
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b32:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d006      	beq.n	8002b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b3e:	4a05      	ldr	r2, [pc, #20]	@ (8002b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd ff1c 	bl	8000984 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e267      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d075      	beq.n	8002c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b76:	4b88      	ldr	r3, [pc, #544]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d00c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b82:	4b85      	ldr	r3, [pc, #532]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d112      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b82      	ldr	r3, [pc, #520]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d05b      	beq.n	8002c60 <HAL_RCC_OscConfig+0x108>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d157      	bne.n	8002c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e242      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_OscConfig+0x74>
 8002bbe:	4b76      	ldr	r3, [pc, #472]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a75      	ldr	r2, [pc, #468]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e01d      	b.n	8002c08 <HAL_RCC_OscConfig+0xb0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x98>
 8002bd6:	4b70      	ldr	r3, [pc, #448]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a6f      	ldr	r2, [pc, #444]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6c      	ldr	r2, [pc, #432]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0xb0>
 8002bf0:	4b69      	ldr	r3, [pc, #420]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a68      	ldr	r2, [pc, #416]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b66      	ldr	r3, [pc, #408]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a65      	ldr	r2, [pc, #404]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7ff fc60 	bl	80024d4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7ff fc5c 	bl	80024d4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	@ 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e207      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0xc0>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff fc4c 	bl	80024d4 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff fc48 	bl	80024d4 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	@ 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1f3      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	4b51      	ldr	r3, [pc, #324]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0xe8>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7a:	4b47      	ldr	r3, [pc, #284]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d11c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b44      	ldr	r3, [pc, #272]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d116      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_RCC_OscConfig+0x152>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1c7      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b3b      	ldr	r3, [pc, #236]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4937      	ldr	r1, [pc, #220]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	e03a      	b.n	8002d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d020      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc8:	4b34      	ldr	r3, [pc, #208]	@ (8002d9c <HAL_RCC_OscConfig+0x244>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7ff fc01 	bl	80024d4 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7ff fbfd 	bl	80024d4 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e1a8      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b28      	ldr	r3, [pc, #160]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4925      	ldr	r1, [pc, #148]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
 8002d08:	e015      	b.n	8002d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0a:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <HAL_RCC_OscConfig+0x244>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7ff fbe0 	bl	80024d4 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d18:	f7ff fbdc 	bl	80024d4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e187      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d036      	beq.n	8002db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <HAL_RCC_OscConfig+0x248>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7ff fbc0 	bl	80024d4 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d58:	f7ff fbbc 	bl	80024d4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e167      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x200>
 8002d76:	e01b      	b.n	8002db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d78:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <HAL_RCC_OscConfig+0x248>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7ff fba9 	bl	80024d4 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	e00e      	b.n	8002da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d86:	f7ff fba5 	bl	80024d4 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d907      	bls.n	8002da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e150      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	42470000 	.word	0x42470000
 8002da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da4:	4b88      	ldr	r3, [pc, #544]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ea      	bne.n	8002d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8097 	beq.w	8002eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc2:	4b81      	ldr	r3, [pc, #516]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dde:	4b7a      	ldr	r3, [pc, #488]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b77      	ldr	r3, [pc, #476]	@ (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b74      	ldr	r3, [pc, #464]	@ (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a73      	ldr	r2, [pc, #460]	@ (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7ff fb65 	bl	80024d4 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7ff fb61 	bl	80024d4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e10c      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b6a      	ldr	r3, [pc, #424]	@ (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2ea>
 8002e34:	4b64      	ldr	r3, [pc, #400]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e38:	4a63      	ldr	r2, [pc, #396]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e40:	e01c      	b.n	8002e7c <HAL_RCC_OscConfig+0x324>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x30c>
 8002e4a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e56:	4b5c      	ldr	r3, [pc, #368]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0x324>
 8002e64:	4b58      	ldr	r3, [pc, #352]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	4a57      	ldr	r2, [pc, #348]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e70:	4b55      	ldr	r3, [pc, #340]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	4a54      	ldr	r2, [pc, #336]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0304 	bic.w	r3, r3, #4
 8002e7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d015      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7ff fb26 	bl	80024d4 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7ff fb22 	bl	80024d4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0cb      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	4b49      	ldr	r3, [pc, #292]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0ee      	beq.n	8002e8c <HAL_RCC_OscConfig+0x334>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7ff fb10 	bl	80024d4 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7ff fb0c 	bl	80024d4 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e0b5      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ece:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ee      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee0:	4b39      	ldr	r3, [pc, #228]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	4a38      	ldr	r2, [pc, #224]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80a1 	beq.w	8003038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef6:	4b34      	ldr	r3, [pc, #208]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d05c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d141      	bne.n	8002f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b31      	ldr	r3, [pc, #196]	@ (8002fd0 <HAL_RCC_OscConfig+0x478>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7ff fae0 	bl	80024d4 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f18:	f7ff fadc 	bl	80024d4 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e087      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	4b27      	ldr	r3, [pc, #156]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	019b      	lsls	r3, r3, #6
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	041b      	lsls	r3, r3, #16
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	491b      	ldr	r1, [pc, #108]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <HAL_RCC_OscConfig+0x478>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7ff fab5 	bl	80024d4 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7ff fab1 	bl	80024d4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e05c      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x416>
 8002f8c:	e054      	b.n	8003038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <HAL_RCC_OscConfig+0x478>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7ff fa9e 	bl	80024d4 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7ff fa9a 	bl	80024d4 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e045      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x444>
 8002fba:	e03d      	b.n	8003038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e038      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <HAL_RCC_OscConfig+0x4ec>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d028      	beq.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d121      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d11a      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800300a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300c:	4293      	cmp	r3, r2
 800300e:	d111      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	3b01      	subs	r3, #1
 800301e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d107      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800

08003048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0cc      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b68      	ldr	r3, [pc, #416]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d90c      	bls.n	8003084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b65      	ldr	r3, [pc, #404]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b63      	ldr	r3, [pc, #396]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0b8      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800309c:	4b59      	ldr	r3, [pc, #356]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a58      	ldr	r2, [pc, #352]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b4:	4b53      	ldr	r3, [pc, #332]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c0:	4b50      	ldr	r3, [pc, #320]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	494d      	ldr	r1, [pc, #308]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d044      	beq.n	8003168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b47      	ldr	r3, [pc, #284]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d119      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e07f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	2b03      	cmp	r3, #3
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	4b3f      	ldr	r3, [pc, #252]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003116:	4b3b      	ldr	r3, [pc, #236]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e067      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003126:	4b37      	ldr	r3, [pc, #220]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4934      	ldr	r1, [pc, #208]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003138:	f7ff f9cc 	bl	80024d4 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	e00a      	b.n	8003156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f7ff f9c8 	bl	80024d4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e04f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	4b2b      	ldr	r3, [pc, #172]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 020c 	and.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	429a      	cmp	r2, r3
 8003166:	d1eb      	bne.n	8003140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003168:	4b25      	ldr	r3, [pc, #148]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d20c      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e032      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800319c:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4916      	ldr	r1, [pc, #88]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ba:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	490e      	ldr	r1, [pc, #56]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ce:	f000 f821 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	490a      	ldr	r1, [pc, #40]	@ (8003208 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	5ccb      	ldrb	r3, [r1, r3]
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_RCC_ClockConfig+0x1c8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f92c 	bl	800244c <HAL_InitTick>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00
 8003204:	40023800 	.word	0x40023800
 8003208:	08006400 	.word	0x08006400
 800320c:	20000000 	.word	0x20000000
 8003210:	20000004 	.word	0x20000004

08003214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003218:	b090      	sub	sp, #64	@ 0x40
 800321a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003220:	2300      	movs	r3, #0
 8003222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003224:	2300      	movs	r3, #0
 8003226:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800322c:	4b59      	ldr	r3, [pc, #356]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x180>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b08      	cmp	r3, #8
 8003236:	d00d      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x40>
 8003238:	2b08      	cmp	r3, #8
 800323a:	f200 80a1 	bhi.w	8003380 <HAL_RCC_GetSysClockFreq+0x16c>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x34>
 8003242:	2b04      	cmp	r3, #4
 8003244:	d003      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x3a>
 8003246:	e09b      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003248:	4b53      	ldr	r3, [pc, #332]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x184>)
 800324a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800324c:	e09b      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800324e:	4b53      	ldr	r3, [pc, #332]	@ (800339c <HAL_RCC_GetSysClockFreq+0x188>)
 8003250:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003252:	e098      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003254:	4b4f      	ldr	r3, [pc, #316]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x180>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800325c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800325e:	4b4d      	ldr	r3, [pc, #308]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x180>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d028      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326a:	4b4a      	ldr	r3, [pc, #296]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x180>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	099b      	lsrs	r3, r3, #6
 8003270:	2200      	movs	r2, #0
 8003272:	623b      	str	r3, [r7, #32]
 8003274:	627a      	str	r2, [r7, #36]	@ 0x24
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800327c:	2100      	movs	r1, #0
 800327e:	4b47      	ldr	r3, [pc, #284]	@ (800339c <HAL_RCC_GetSysClockFreq+0x188>)
 8003280:	fb03 f201 	mul.w	r2, r3, r1
 8003284:	2300      	movs	r3, #0
 8003286:	fb00 f303 	mul.w	r3, r0, r3
 800328a:	4413      	add	r3, r2
 800328c:	4a43      	ldr	r2, [pc, #268]	@ (800339c <HAL_RCC_GetSysClockFreq+0x188>)
 800328e:	fba0 1202 	umull	r1, r2, r0, r2
 8003292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003294:	460a      	mov	r2, r1
 8003296:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800329a:	4413      	add	r3, r2
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a0:	2200      	movs	r2, #0
 80032a2:	61bb      	str	r3, [r7, #24]
 80032a4:	61fa      	str	r2, [r7, #28]
 80032a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032ae:	f7fc ffdf 	bl	8000270 <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4613      	mov	r3, r2
 80032b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ba:	e053      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032bc:	4b35      	ldr	r3, [pc, #212]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x180>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	2200      	movs	r2, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	617a      	str	r2, [r7, #20]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032ce:	f04f 0b00 	mov.w	fp, #0
 80032d2:	4652      	mov	r2, sl
 80032d4:	465b      	mov	r3, fp
 80032d6:	f04f 0000 	mov.w	r0, #0
 80032da:	f04f 0100 	mov.w	r1, #0
 80032de:	0159      	lsls	r1, r3, #5
 80032e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e4:	0150      	lsls	r0, r2, #5
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	ebb2 080a 	subs.w	r8, r2, sl
 80032ee:	eb63 090b 	sbc.w	r9, r3, fp
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003302:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003306:	ebb2 0408 	subs.w	r4, r2, r8
 800330a:	eb63 0509 	sbc.w	r5, r3, r9
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	00eb      	lsls	r3, r5, #3
 8003318:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331c:	00e2      	lsls	r2, r4, #3
 800331e:	4614      	mov	r4, r2
 8003320:	461d      	mov	r5, r3
 8003322:	eb14 030a 	adds.w	r3, r4, sl
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	eb45 030b 	adc.w	r3, r5, fp
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333a:	4629      	mov	r1, r5
 800333c:	028b      	lsls	r3, r1, #10
 800333e:	4621      	mov	r1, r4
 8003340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003344:	4621      	mov	r1, r4
 8003346:	028a      	lsls	r2, r1, #10
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334e:	2200      	movs	r2, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	60fa      	str	r2, [r7, #12]
 8003354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003358:	f7fc ff8a 	bl	8000270 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x180>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003374:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800337e:	e002      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x184>)
 8003382:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003388:	4618      	mov	r0, r3
 800338a:	3740      	adds	r7, #64	@ 0x40
 800338c:	46bd      	mov	sp, r7
 800338e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400
 800339c:	017d7840 	.word	0x017d7840

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	@ (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033bc:	f7ff fff0 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a9b      	lsrs	r3, r3, #10
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	@ (80033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08006410 	.word	0x08006410

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e4:	f7ff ffdc 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0b5b      	lsrs	r3, r3, #13
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	@ (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	08006410 	.word	0x08006410

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800342c:	2b00      	cmp	r3, #0
 800342e:	d035      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003430:	4b62      	ldr	r3, [pc, #392]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003436:	f7ff f84d 	bl	80024d4 <HAL_GetTick>
 800343a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800343e:	f7ff f849 	bl	80024d4 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0b0      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003450:	4b5b      	ldr	r3, [pc, #364]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	019a      	lsls	r2, r3, #6
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	071b      	lsls	r3, r3, #28
 8003468:	4955      	ldr	r1, [pc, #340]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003470:	4b52      	ldr	r3, [pc, #328]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003476:	f7ff f82d 	bl	80024d4 <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800347e:	f7ff f829 	bl	80024d4 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e090      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003490:	4b4b      	ldr	r3, [pc, #300]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8083 	beq.w	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b44      	ldr	r3, [pc, #272]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	4a43      	ldr	r2, [pc, #268]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ba:	4b41      	ldr	r3, [pc, #260]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034c6:	4b3f      	ldr	r3, [pc, #252]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3e      	ldr	r2, [pc, #248]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034d2:	f7fe ffff 	bl	80024d4 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fe fffb 	bl	80024d4 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e062      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034ec:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f8:	4b31      	ldr	r3, [pc, #196]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003500:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	429a      	cmp	r2, r3
 8003514:	d028      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003516:	4b2a      	ldr	r3, [pc, #168]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003520:	4b29      	ldr	r3, [pc, #164]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003526:	4b28      	ldr	r3, [pc, #160]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800352c:	4a24      	ldr	r2, [pc, #144]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003532:	4b23      	ldr	r3, [pc, #140]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d114      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe ffc9 	bl	80024d4 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe ffc5 	bl	80024d4 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e02a      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	4b18      	ldr	r3, [pc, #96]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ee      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003574:	d10d      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003576:	4b12      	ldr	r3, [pc, #72]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358a:	490d      	ldr	r1, [pc, #52]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]
 8003590:	e005      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003592:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003598:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800359c:	6093      	str	r3, [r2, #8]
 800359e:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035aa:	4905      	ldr	r1, [pc, #20]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	42470068 	.word	0x42470068
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40007000 	.word	0x40007000
 80035c8:	42470e40 	.word	0x42470e40

080035cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e073      	b.n	80036ca <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7f5b      	ldrb	r3, [r3, #29]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe f946 	bl	8001884 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b10      	cmp	r3, #16
 800360a:	d055      	beq.n	80036b8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	22ca      	movs	r2, #202	@ 0xca
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2253      	movs	r2, #83	@ 0x53
 800361a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fbd3 	bl	8003dc8 <RTC_EnterInitMode>
 8003622:	4603      	mov	r3, r0
 8003624:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d12c      	bne.n	8003686 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800363a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800363e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6899      	ldr	r1, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68d2      	ldr	r2, [r2, #12]
 8003666:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6919      	ldr	r1, [r3, #16]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	041a      	lsls	r2, r3, #16
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fbda 	bl	8003e36 <RTC_ExitInitMode>
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d110      	bne.n	80036ae <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	22ff      	movs	r2, #255	@ 0xff
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80036b6:	e001      	b.n	80036bc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036d2:	b590      	push	{r4, r7, lr}
 80036d4:	b087      	sub	sp, #28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	7f1b      	ldrb	r3, [r3, #28]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_RTC_SetTime+0x1c>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e087      	b.n	80037fe <HAL_RTC_SetTime+0x12c>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2202      	movs	r2, #2
 80036f8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d126      	bne.n	800374e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2200      	movs	r2, #0
 8003712:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fbb1 	bl	8003e80 <RTC_ByteToBcd2>
 800371e:	4603      	mov	r3, r0
 8003720:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fbaa 	bl	8003e80 <RTC_ByteToBcd2>
 800372c:	4603      	mov	r3, r0
 800372e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003730:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	789b      	ldrb	r3, [r3, #2]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fba2 	bl	8003e80 <RTC_ByteToBcd2>
 800373c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800373e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	78db      	ldrb	r3, [r3, #3]
 8003746:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e018      	b.n	8003780 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d102      	bne.n	8003762 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2200      	movs	r2, #0
 8003760:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	785b      	ldrb	r3, [r3, #1]
 800376c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800376e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003774:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	78db      	ldrb	r3, [r3, #3]
 800377a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	22ca      	movs	r2, #202	@ 0xca
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2253      	movs	r2, #83	@ 0x53
 800378e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fb19 	bl	8003dc8 <RTC_EnterInitMode>
 8003796:	4603      	mov	r3, r0
 8003798:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d120      	bne.n	80037e2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80037aa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80037ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80037be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fb2c 	bl	8003e36 <RTC_ExitInitMode>
 80037de:	4603      	mov	r3, r0
 80037e0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	22ff      	movs	r2, #255	@ 0xff
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]

  return status;
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd90      	pop	{r4, r7, pc}

08003806 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003838:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800383c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	0c1b      	lsrs	r3, r3, #16
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003866:	b2da      	uxtb	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	0d9b      	lsrs	r3, r3, #22
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11a      	bne.n	80038b8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fb18 	bl	8003ebc <RTC_Bcd2ToByte>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fb0f 	bl	8003ebc <RTC_Bcd2ToByte>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	789b      	ldrb	r3, [r3, #2]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fb06 	bl	8003ebc <RTC_Bcd2ToByte>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038c2:	b590      	push	{r4, r7, lr}
 80038c4:	b087      	sub	sp, #28
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	7f1b      	ldrb	r3, [r3, #28]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_RTC_SetDate+0x1c>
 80038da:	2302      	movs	r3, #2
 80038dc:	e071      	b.n	80039c2 <HAL_RTC_SetDate+0x100>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2202      	movs	r2, #2
 80038e8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10e      	bne.n	800390e <HAL_RTC_SetDate+0x4c>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	f023 0310 	bic.w	r3, r3, #16
 8003904:	b2db      	uxtb	r3, r3
 8003906:	330a      	adds	r3, #10
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11c      	bne.n	800394e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	78db      	ldrb	r3, [r3, #3]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fab1 	bl	8003e80 <RTC_ByteToBcd2>
 800391e:	4603      	mov	r3, r0
 8003920:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	785b      	ldrb	r3, [r3, #1]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 faaa 	bl	8003e80 <RTC_ByteToBcd2>
 800392c:	4603      	mov	r3, r0
 800392e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003930:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	789b      	ldrb	r3, [r3, #2]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 faa2 	bl	8003e80 <RTC_ByteToBcd2>
 800393c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800393e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e00e      	b.n	800396c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	78db      	ldrb	r3, [r3, #3]
 8003952:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800395a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003960:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	22ca      	movs	r2, #202	@ 0xca
 8003972:	625a      	str	r2, [r3, #36]	@ 0x24
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2253      	movs	r2, #83	@ 0x53
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fa23 	bl	8003dc8 <RTC_EnterInitMode>
 8003982:	4603      	mov	r3, r0
 8003984:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10c      	bne.n	80039a6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003996:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800399a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fa4a 	bl	8003e36 <RTC_ExitInitMode>
 80039a2:	4603      	mov	r3, r0
 80039a4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	22ff      	movs	r2, #255	@ 0xff
 80039b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]

  return status;
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd90      	pop	{r4, r7, pc}

080039ca <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80039e8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	0b5b      	lsrs	r3, r3, #13
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11a      	bne.n	8003a5e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	78db      	ldrb	r3, [r3, #3]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fa45 	bl	8003ebc <RTC_Bcd2ToByte>
 8003a32:	4603      	mov	r3, r0
 8003a34:	461a      	mov	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fa3c 	bl	8003ebc <RTC_Bcd2ToByte>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	789b      	ldrb	r3, [r3, #2]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fa33 	bl	8003ebc <RTC_Bcd2ToByte>
 8003a56:	4603      	mov	r3, r0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b089      	sub	sp, #36	@ 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003a74:	4b9b      	ldr	r3, [pc, #620]	@ (8003ce4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a9b      	ldr	r2, [pc, #620]	@ (8003ce8 <HAL_RTC_SetAlarm_IT+0x280>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	0adb      	lsrs	r3, r3, #11
 8003a80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a84:	fb02 f303 	mul.w	r3, r2, r3
 8003a88:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	7f1b      	ldrb	r3, [r3, #28]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_RTC_SetAlarm_IT+0x36>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e11e      	b.n	8003cdc <HAL_RTC_SetAlarm_IT+0x274>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d137      	bne.n	8003b20 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f9d9 	bl	8003e80 <RTC_ByteToBcd2>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f9d2 	bl	8003e80 <RTC_ByteToBcd2>
 8003adc:	4603      	mov	r3, r0
 8003ade:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003ae0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	789b      	ldrb	r3, [r3, #2]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f9ca 	bl	8003e80 <RTC_ByteToBcd2>
 8003aec:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003aee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	78db      	ldrb	r3, [r3, #3]
 8003af6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003af8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f9bc 	bl	8003e80 <RTC_ByteToBcd2>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003b0c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003b14:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e023      	b.n	8003b68 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2200      	movs	r2, #0
 8003b32:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003b40:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003b46:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	78db      	ldrb	r3, [r3, #3]
 8003b4c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003b4e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b56:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003b58:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003b5e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	22ca      	movs	r2, #202	@ 0xca
 8003b7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2253      	movs	r2, #83	@ 0x53
 8003b82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b8c:	d142      	bne.n	8003c14 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b9c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003bae:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	22ff      	movs	r2, #255	@ 0xff
 8003bc2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e083      	b.n	8003cdc <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0e6      	beq.n	8003bb0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c00:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	e04c      	b.n	8003cae <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c22:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003c34:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003c36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce8 <HAL_RTC_SetAlarm_IT+0x280>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	0adb      	lsrs	r3, r3, #11
 8003c42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	22ff      	movs	r2, #255	@ 0xff
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2203      	movs	r2, #3
 8003c64:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e035      	b.n	8003cdc <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0e6      	beq.n	8003c4c <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cac:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003cae:	4b0f      	ldr	r3, [pc, #60]	@ (8003cec <HAL_RTC_SetAlarm_IT+0x284>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8003cec <HAL_RTC_SetAlarm_IT+0x284>)
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003cba:	4b0c      	ldr	r3, [pc, #48]	@ (8003cec <HAL_RTC_SetAlarm_IT+0x284>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8003cec <HAL_RTC_SetAlarm_IT+0x284>)
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	22ff      	movs	r2, #255	@ 0xff
 8003ccc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3724      	adds	r7, #36	@ 0x24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd90      	pop	{r4, r7, pc}
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	10624dd3 	.word	0x10624dd3
 8003cec:	40013c00 	.word	0x40013c00

08003cf0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d78 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003cfa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cfe:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003d2c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fc14 	bl	800155c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d012      	beq.n	8003d68 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003d60:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd fc26 	bl	80015b4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	775a      	strb	r2, [r3, #29]
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40013c00 	.word	0x40013c00

08003d7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc4 <HAL_RTC_WaitForSynchro+0x48>)
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d90:	f7fe fba0 	bl	80024d4 <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d96:	e009      	b.n	8003dac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d98:	f7fe fb9c 	bl	80024d4 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003da6:	d901      	bls.n	8003dac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e007      	b.n	8003dbc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0ee      	beq.n	8003d98 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	00017f5f 	.word	0x00017f5f

08003dc8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d122      	bne.n	8003e2c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003df4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003df6:	f7fe fb6d 	bl	80024d4 <HAL_GetTick>
 8003dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003dfc:	e00c      	b.n	8003e18 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dfe:	f7fe fb69 	bl	80024d4 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e0c:	d904      	bls.n	8003e18 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2204      	movs	r2, #4
 8003e12:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <RTC_EnterInitMode+0x64>
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d1e8      	bne.n	8003dfe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e50:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff8b 	bl	8003d7c <HAL_RTC_WaitForSynchro>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003e8e:	e005      	b.n	8003e9c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3301      	adds	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	3b0a      	subs	r3, #10
 8003e9a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d8f6      	bhi.n	8003e90 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	b2db      	uxtb	r3, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	b2db      	uxtb	r3, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e038      	b.n	8003f80 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7fc fbec 	bl	8000700 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f000 ff90 	bl	8004e58 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	461a      	mov	r2, r3
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	f000 fff2 	bl	8004f2c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6858      	ldr	r0, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	f001 f81f 	bl	8004f98 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	6892      	ldr	r2, [r2, #8]
 8003f62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6892      	ldr	r2, [r2, #8]
 8003f6e:	f041 0101 	orr.w	r1, r1, #1
 8003f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e041      	b.n	800401e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe f942 	bl	8002238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 faac 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e04e      	b.n	80040de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a23      	ldr	r2, [pc, #140]	@ (80040ec <HAL_TIM_Base_Start_IT+0xc4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d022      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406a:	d01d      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1f      	ldr	r2, [pc, #124]	@ (80040f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d018      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1e      	ldr	r2, [pc, #120]	@ (80040f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d013      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1c      	ldr	r2, [pc, #112]	@ (80040f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00e      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1b      	ldr	r2, [pc, #108]	@ (80040fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d009      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a19      	ldr	r2, [pc, #100]	@ (8004100 <HAL_TIM_Base_Start_IT+0xd8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a18      	ldr	r2, [pc, #96]	@ (8004104 <HAL_TIM_Base_Start_IT+0xdc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d111      	bne.n	80040cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d010      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ca:	e007      	b.n	80040dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40010400 	.word	0x40010400
 8004100:	40014000 	.word	0x40014000
 8004104:	40001800 	.word	0x40001800

08004108 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a1a      	ldr	r2, [r3, #32]
 8004126:	f241 1311 	movw	r3, #4369	@ 0x1111
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10f      	bne.n	8004150 <HAL_TIM_Base_Stop_IT+0x48>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6a1a      	ldr	r2, [r3, #32]
 8004136:	f240 4344 	movw	r3, #1092	@ 0x444
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d107      	bne.n	8004150 <HAL_TIM_Base_Stop_IT+0x48>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01b      	beq.n	80041ca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0202 	mvn.w	r2, #2
 800419a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f999 	bl	80044e8 <HAL_TIM_IC_CaptureCallback>
 80041b6:	e005      	b.n	80041c4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f98b 	bl	80044d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f99c 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01b      	beq.n	8004216 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f06f 0204 	mvn.w	r2, #4
 80041e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f973 	bl	80044e8 <HAL_TIM_IC_CaptureCallback>
 8004202:	e005      	b.n	8004210 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f965 	bl	80044d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f976 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01b      	beq.n	8004262 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f06f 0208 	mvn.w	r2, #8
 8004232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2204      	movs	r2, #4
 8004238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f94d 	bl	80044e8 <HAL_TIM_IC_CaptureCallback>
 800424e:	e005      	b.n	800425c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f93f 	bl	80044d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f950 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d020      	beq.n	80042ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01b      	beq.n	80042ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f06f 0210 	mvn.w	r2, #16
 800427e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2208      	movs	r2, #8
 8004284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f927 	bl	80044e8 <HAL_TIM_IC_CaptureCallback>
 800429a:	e005      	b.n	80042a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f919 	bl	80044d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f92a 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00c      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f06f 0201 	mvn.w	r2, #1
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fc ffdb 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00c      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fae3 	bl	80048bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00c      	beq.n	800431a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f8fb 	bl	8004510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f06f 0220 	mvn.w	r2, #32
 8004336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fab5 	bl	80048a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_TIM_ConfigClockSource+0x1c>
 800435e:	2302      	movs	r3, #2
 8004360:	e0b4      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x186>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004380:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004388:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439a:	d03e      	beq.n	800441a <HAL_TIM_ConfigClockSource+0xd4>
 800439c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a0:	f200 8087 	bhi.w	80044b2 <HAL_TIM_ConfigClockSource+0x16c>
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a8:	f000 8086 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x172>
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b0:	d87f      	bhi.n	80044b2 <HAL_TIM_ConfigClockSource+0x16c>
 80043b2:	2b70      	cmp	r3, #112	@ 0x70
 80043b4:	d01a      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0xa6>
 80043b6:	2b70      	cmp	r3, #112	@ 0x70
 80043b8:	d87b      	bhi.n	80044b2 <HAL_TIM_ConfigClockSource+0x16c>
 80043ba:	2b60      	cmp	r3, #96	@ 0x60
 80043bc:	d050      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x11a>
 80043be:	2b60      	cmp	r3, #96	@ 0x60
 80043c0:	d877      	bhi.n	80044b2 <HAL_TIM_ConfigClockSource+0x16c>
 80043c2:	2b50      	cmp	r3, #80	@ 0x50
 80043c4:	d03c      	beq.n	8004440 <HAL_TIM_ConfigClockSource+0xfa>
 80043c6:	2b50      	cmp	r3, #80	@ 0x50
 80043c8:	d873      	bhi.n	80044b2 <HAL_TIM_ConfigClockSource+0x16c>
 80043ca:	2b40      	cmp	r3, #64	@ 0x40
 80043cc:	d058      	beq.n	8004480 <HAL_TIM_ConfigClockSource+0x13a>
 80043ce:	2b40      	cmp	r3, #64	@ 0x40
 80043d0:	d86f      	bhi.n	80044b2 <HAL_TIM_ConfigClockSource+0x16c>
 80043d2:	2b30      	cmp	r3, #48	@ 0x30
 80043d4:	d064      	beq.n	80044a0 <HAL_TIM_ConfigClockSource+0x15a>
 80043d6:	2b30      	cmp	r3, #48	@ 0x30
 80043d8:	d86b      	bhi.n	80044b2 <HAL_TIM_ConfigClockSource+0x16c>
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d060      	beq.n	80044a0 <HAL_TIM_ConfigClockSource+0x15a>
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d867      	bhi.n	80044b2 <HAL_TIM_ConfigClockSource+0x16c>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d05c      	beq.n	80044a0 <HAL_TIM_ConfigClockSource+0x15a>
 80043e6:	2b10      	cmp	r3, #16
 80043e8:	d05a      	beq.n	80044a0 <HAL_TIM_ConfigClockSource+0x15a>
 80043ea:	e062      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043fc:	f000 f9b8 	bl	8004770 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800440e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	609a      	str	r2, [r3, #8]
      break;
 8004418:	e04f      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	f000 f9a1 	bl	8004770 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800443c:	609a      	str	r2, [r3, #8]
      break;
 800443e:	e03c      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444c:	461a      	mov	r2, r3
 800444e:	f000 f915 	bl	800467c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2150      	movs	r1, #80	@ 0x50
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f96e 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 800445e:	e02c      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800446c:	461a      	mov	r2, r3
 800446e:	f000 f934 	bl	80046da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2160      	movs	r1, #96	@ 0x60
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f95e 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 800447e:	e01c      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448c:	461a      	mov	r2, r3
 800448e:	f000 f8f5 	bl	800467c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2140      	movs	r1, #64	@ 0x40
 8004498:	4618      	mov	r0, r3
 800449a:	f000 f94e 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 800449e:	e00c      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f000 f945 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 80044b0:	e003      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
      break;
 80044b6:	e000      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a46      	ldr	r2, [pc, #280]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d013      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004542:	d00f      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a43      	ldr	r2, [pc, #268]	@ (8004654 <TIM_Base_SetConfig+0x130>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00b      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a42      	ldr	r2, [pc, #264]	@ (8004658 <TIM_Base_SetConfig+0x134>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a41      	ldr	r2, [pc, #260]	@ (800465c <TIM_Base_SetConfig+0x138>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a40      	ldr	r2, [pc, #256]	@ (8004660 <TIM_Base_SetConfig+0x13c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d108      	bne.n	8004576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a35      	ldr	r2, [pc, #212]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d02b      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004584:	d027      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a32      	ldr	r2, [pc, #200]	@ (8004654 <TIM_Base_SetConfig+0x130>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d023      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a31      	ldr	r2, [pc, #196]	@ (8004658 <TIM_Base_SetConfig+0x134>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01f      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a30      	ldr	r2, [pc, #192]	@ (800465c <TIM_Base_SetConfig+0x138>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01b      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004660 <TIM_Base_SetConfig+0x13c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d017      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004664 <TIM_Base_SetConfig+0x140>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004668 <TIM_Base_SetConfig+0x144>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00f      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a2c      	ldr	r2, [pc, #176]	@ (800466c <TIM_Base_SetConfig+0x148>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004670 <TIM_Base_SetConfig+0x14c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004674 <TIM_Base_SetConfig+0x150>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a29      	ldr	r2, [pc, #164]	@ (8004678 <TIM_Base_SetConfig+0x154>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a10      	ldr	r2, [pc, #64]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_Base_SetConfig+0xf8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a12      	ldr	r2, [pc, #72]	@ (8004660 <TIM_Base_SetConfig+0x13c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d103      	bne.n	8004624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f023 0201 	bic.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]
  }
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40010400 	.word	0x40010400
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800
 8004670:	40001800 	.word	0x40001800
 8004674:	40001c00 	.word	0x40001c00
 8004678:	40002000 	.word	0x40002000

0800467c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f023 0201 	bic.w	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f023 030a 	bic.w	r3, r3, #10
 80046b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046da:	b480      	push	{r7}
 80046dc:	b087      	sub	sp, #28
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f023 0210 	bic.w	r2, r3, #16
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	031b      	lsls	r3, r3, #12
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004716:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	f043 0307 	orr.w	r3, r3, #7
 800475c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800478a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	431a      	orrs	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4313      	orrs	r3, r2
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e05a      	b.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a21      	ldr	r2, [pc, #132]	@ (800488c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004814:	d01d      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1d      	ldr	r2, [pc, #116]	@ (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1b      	ldr	r2, [pc, #108]	@ (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1a      	ldr	r2, [pc, #104]	@ (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a18      	ldr	r2, [pc, #96]	@ (800489c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a17      	ldr	r2, [pc, #92]	@ (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a15      	ldr	r2, [pc, #84]	@ (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10c      	bne.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40010400 	.word	0x40010400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40001800 	.word	0x40001800

080048a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e042      	b.n	8004968 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fd14 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2224      	movs	r2, #36	@ 0x24
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f82b 	bl	8004970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004974:	b0c0      	sub	sp, #256	@ 0x100
 8004976:	af00      	add	r7, sp, #0
 8004978:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498c:	68d9      	ldr	r1, [r3, #12]
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	ea40 0301 	orr.w	r3, r0, r1
 8004998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049c8:	f021 010c 	bic.w	r1, r1, #12
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049d6:	430b      	orrs	r3, r1
 80049d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ea:	6999      	ldr	r1, [r3, #24]
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	ea40 0301 	orr.w	r3, r0, r1
 80049f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b8f      	ldr	r3, [pc, #572]	@ (8004c3c <UART_SetConfig+0x2cc>)
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d005      	beq.n	8004a10 <UART_SetConfig+0xa0>
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004c40 <UART_SetConfig+0x2d0>)
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d104      	bne.n	8004a1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a10:	f7fe fce6 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 8004a14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a18:	e003      	b.n	8004a22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7fe fccd 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2c:	f040 810c 	bne.w	8004c48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a34:	2200      	movs	r2, #0
 8004a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	1891      	adds	r1, r2, r2
 8004a48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a4a:	415b      	adcs	r3, r3
 8004a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a52:	4621      	mov	r1, r4
 8004a54:	eb12 0801 	adds.w	r8, r2, r1
 8004a58:	4629      	mov	r1, r5
 8004a5a:	eb43 0901 	adc.w	r9, r3, r1
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a72:	4690      	mov	r8, r2
 8004a74:	4699      	mov	r9, r3
 8004a76:	4623      	mov	r3, r4
 8004a78:	eb18 0303 	adds.w	r3, r8, r3
 8004a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a80:	462b      	mov	r3, r5
 8004a82:	eb49 0303 	adc.w	r3, r9, r3
 8004a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	18db      	adds	r3, r3, r3
 8004aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	eb42 0303 	adc.w	r3, r2, r3
 8004aaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ab4:	f7fb fbdc 	bl	8000270 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4b61      	ldr	r3, [pc, #388]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004abe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	011c      	lsls	r4, r3, #4
 8004ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ad0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	1891      	adds	r1, r2, r2
 8004ade:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ae0:	415b      	adcs	r3, r3
 8004ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ae8:	4641      	mov	r1, r8
 8004aea:	eb12 0a01 	adds.w	sl, r2, r1
 8004aee:	4649      	mov	r1, r9
 8004af0:	eb43 0b01 	adc.w	fp, r3, r1
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b08:	4692      	mov	sl, r2
 8004b0a:	469b      	mov	fp, r3
 8004b0c:	4643      	mov	r3, r8
 8004b0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b16:	464b      	mov	r3, r9
 8004b18:	eb4b 0303 	adc.w	r3, fp, r3
 8004b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b34:	460b      	mov	r3, r1
 8004b36:	18db      	adds	r3, r3, r3
 8004b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b4a:	f7fb fb91 	bl	8000270 <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	4b3b      	ldr	r3, [pc, #236]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004b56:	fba3 2301 	umull	r2, r3, r3, r1
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2264      	movs	r2, #100	@ 0x64
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	1acb      	subs	r3, r1, r3
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b6a:	4b36      	ldr	r3, [pc, #216]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b78:	441c      	add	r4, r3
 8004b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b94:	415b      	adcs	r3, r3
 8004b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	1851      	adds	r1, r2, r1
 8004ba0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	414b      	adcs	r3, r1
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	00cb      	lsls	r3, r1, #3
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	00ca      	lsls	r2, r1, #3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4642      	mov	r2, r8
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	460a      	mov	r2, r1
 8004bd4:	eb42 0303 	adc.w	r3, r2, r3
 8004bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004be8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	18db      	adds	r3, r3, r3
 8004bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	eb42 0303 	adc.w	r3, r2, r3
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c06:	f7fb fb33 	bl	8000270 <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004c10:	fba3 1302 	umull	r1, r3, r3, r2
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	2164      	movs	r1, #100	@ 0x64
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	3332      	adds	r3, #50	@ 0x32
 8004c22:	4a08      	ldr	r2, [pc, #32]	@ (8004c44 <UART_SetConfig+0x2d4>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	f003 0207 	and.w	r2, r3, #7
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4422      	add	r2, r4
 8004c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c38:	e106      	b.n	8004e48 <UART_SetConfig+0x4d8>
 8004c3a:	bf00      	nop
 8004c3c:	40011000 	.word	0x40011000
 8004c40:	40011400 	.word	0x40011400
 8004c44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	1891      	adds	r1, r2, r2
 8004c60:	6239      	str	r1, [r7, #32]
 8004c62:	415b      	adcs	r3, r3
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	1854      	adds	r4, r2, r1
 8004c6e:	4649      	mov	r1, r9
 8004c70:	eb43 0501 	adc.w	r5, r3, r1
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	00eb      	lsls	r3, r5, #3
 8004c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c82:	00e2      	lsls	r2, r4, #3
 8004c84:	4614      	mov	r4, r2
 8004c86:	461d      	mov	r5, r3
 8004c88:	4643      	mov	r3, r8
 8004c8a:	18e3      	adds	r3, r4, r3
 8004c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c90:	464b      	mov	r3, r9
 8004c92:	eb45 0303 	adc.w	r3, r5, r3
 8004c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	008b      	lsls	r3, r1, #2
 8004cba:	4621      	mov	r1, r4
 8004cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	008a      	lsls	r2, r1, #2
 8004cc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cc8:	f7fb fad2 	bl	8000270 <__aeabi_uldivmod>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4b60      	ldr	r3, [pc, #384]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	011c      	lsls	r4, r3, #4
 8004cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	1891      	adds	r1, r2, r2
 8004cf2:	61b9      	str	r1, [r7, #24]
 8004cf4:	415b      	adcs	r3, r3
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	1851      	adds	r1, r2, r1
 8004d00:	6139      	str	r1, [r7, #16]
 8004d02:	4649      	mov	r1, r9
 8004d04:	414b      	adcs	r3, r1
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d14:	4659      	mov	r1, fp
 8004d16:	00cb      	lsls	r3, r1, #3
 8004d18:	4651      	mov	r1, sl
 8004d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1e:	4651      	mov	r1, sl
 8004d20:	00ca      	lsls	r2, r1, #3
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	4642      	mov	r2, r8
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d30:	464b      	mov	r3, r9
 8004d32:	460a      	mov	r2, r1
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d54:	4649      	mov	r1, r9
 8004d56:	008b      	lsls	r3, r1, #2
 8004d58:	4641      	mov	r1, r8
 8004d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5e:	4641      	mov	r1, r8
 8004d60:	008a      	lsls	r2, r1, #2
 8004d62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d66:	f7fb fa83 	bl	8000270 <__aeabi_uldivmod>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4b38      	ldr	r3, [pc, #224]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004d72:	fba3 2301 	umull	r2, r3, r3, r1
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2264      	movs	r2, #100	@ 0x64
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	1acb      	subs	r3, r1, r3
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	3332      	adds	r3, #50	@ 0x32
 8004d84:	4a33      	ldr	r2, [pc, #204]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d90:	441c      	add	r4, r3
 8004d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d96:	2200      	movs	r2, #0
 8004d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	1891      	adds	r1, r2, r2
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	415b      	adcs	r3, r3
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004db0:	4641      	mov	r1, r8
 8004db2:	1851      	adds	r1, r2, r1
 8004db4:	6039      	str	r1, [r7, #0]
 8004db6:	4649      	mov	r1, r9
 8004db8:	414b      	adcs	r3, r1
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dc8:	4659      	mov	r1, fp
 8004dca:	00cb      	lsls	r3, r1, #3
 8004dcc:	4651      	mov	r1, sl
 8004dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd2:	4651      	mov	r1, sl
 8004dd4:	00ca      	lsls	r2, r1, #3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4642      	mov	r2, r8
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004de2:	464b      	mov	r3, r9
 8004de4:	460a      	mov	r2, r1
 8004de6:	eb42 0303 	adc.w	r3, r2, r3
 8004dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e04:	4649      	mov	r1, r9
 8004e06:	008b      	lsls	r3, r1, #2
 8004e08:	4641      	mov	r1, r8
 8004e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e0e:	4641      	mov	r1, r8
 8004e10:	008a      	lsls	r2, r1, #2
 8004e12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e16:	f7fb fa2b 	bl	8000270 <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004e20:	fba3 1302 	umull	r1, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	2164      	movs	r1, #100	@ 0x64
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	3332      	adds	r3, #50	@ 0x32
 8004e32:	4a08      	ldr	r2, [pc, #32]	@ (8004e54 <UART_SetConfig+0x4e4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f003 020f 	and.w	r2, r3, #15
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4422      	add	r2, r4
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e54:	51eb851f 	.word	0x51eb851f

08004e58 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	f023 0101 	bic.w	r1, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d102      	bne.n	8004e88 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004e82:	2340      	movs	r3, #64	@ 0x40
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e001      	b.n	8004e8c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004e98:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004e9e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004ea4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004eaa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004eb0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004eb6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8004ebc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8004ec2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8004ec8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004ee6:	4b10      	ldr	r3, [pc, #64]	@ (8004f28 <FSMC_NORSRAM_Init+0xd0>)
 8004ee8:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ef0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8004ef8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	43db      	mvns	r3, r3
 8004f08:	ea02 0103 	and.w	r1, r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4319      	orrs	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	0008fb7f 	.word	0x0008fb7f

08004f2c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	431a      	orrs	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	051b      	lsls	r3, r3, #20
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	3b02      	subs	r3, #2
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	431a      	orrs	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	3201      	adds	r2, #1
 8004f80:	4319      	orrs	r1, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fac:	d11d      	bne.n	8004fea <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004fb6:	4b13      	ldr	r3, [pc, #76]	@ (8005004 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	6811      	ldr	r1, [r2, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	6852      	ldr	r2, [r2, #4]
 8004fc2:	0112      	lsls	r2, r2, #4
 8004fc4:	4311      	orrs	r1, r2
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	6892      	ldr	r2, [r2, #8]
 8004fca:	0212      	lsls	r2, r2, #8
 8004fcc:	4311      	orrs	r1, r2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	6992      	ldr	r2, [r2, #24]
 8004fd2:	4311      	orrs	r1, r2
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	68d2      	ldr	r2, [r2, #12]
 8004fd8:	0412      	lsls	r2, r2, #16
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	ea43 0102 	orr.w	r1, r3, r2
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004fe8:	e005      	b.n	8004ff6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8004ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	cff00000 	.word	0xcff00000

08005008 <std>:
 8005008:	2300      	movs	r3, #0
 800500a:	b510      	push	{r4, lr}
 800500c:	4604      	mov	r4, r0
 800500e:	e9c0 3300 	strd	r3, r3, [r0]
 8005012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005016:	6083      	str	r3, [r0, #8]
 8005018:	8181      	strh	r1, [r0, #12]
 800501a:	6643      	str	r3, [r0, #100]	@ 0x64
 800501c:	81c2      	strh	r2, [r0, #14]
 800501e:	6183      	str	r3, [r0, #24]
 8005020:	4619      	mov	r1, r3
 8005022:	2208      	movs	r2, #8
 8005024:	305c      	adds	r0, #92	@ 0x5c
 8005026:	f000 fa19 	bl	800545c <memset>
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <std+0x58>)
 800502c:	6263      	str	r3, [r4, #36]	@ 0x24
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <std+0x5c>)
 8005030:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005032:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <std+0x60>)
 8005034:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005036:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <std+0x64>)
 8005038:	6323      	str	r3, [r4, #48]	@ 0x30
 800503a:	4b0d      	ldr	r3, [pc, #52]	@ (8005070 <std+0x68>)
 800503c:	6224      	str	r4, [r4, #32]
 800503e:	429c      	cmp	r4, r3
 8005040:	d006      	beq.n	8005050 <std+0x48>
 8005042:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005046:	4294      	cmp	r4, r2
 8005048:	d002      	beq.n	8005050 <std+0x48>
 800504a:	33d0      	adds	r3, #208	@ 0xd0
 800504c:	429c      	cmp	r4, r3
 800504e:	d105      	bne.n	800505c <std+0x54>
 8005050:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005058:	f000 ba78 	b.w	800554c <__retarget_lock_init_recursive>
 800505c:	bd10      	pop	{r4, pc}
 800505e:	bf00      	nop
 8005060:	080052ad 	.word	0x080052ad
 8005064:	080052cf 	.word	0x080052cf
 8005068:	08005307 	.word	0x08005307
 800506c:	0800532b 	.word	0x0800532b
 8005070:	2000029c 	.word	0x2000029c

08005074 <stdio_exit_handler>:
 8005074:	4a02      	ldr	r2, [pc, #8]	@ (8005080 <stdio_exit_handler+0xc>)
 8005076:	4903      	ldr	r1, [pc, #12]	@ (8005084 <stdio_exit_handler+0x10>)
 8005078:	4803      	ldr	r0, [pc, #12]	@ (8005088 <stdio_exit_handler+0x14>)
 800507a:	f000 b869 	b.w	8005150 <_fwalk_sglue>
 800507e:	bf00      	nop
 8005080:	2000000c 	.word	0x2000000c
 8005084:	0800609d 	.word	0x0800609d
 8005088:	2000001c 	.word	0x2000001c

0800508c <cleanup_stdio>:
 800508c:	6841      	ldr	r1, [r0, #4]
 800508e:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <cleanup_stdio+0x34>)
 8005090:	4299      	cmp	r1, r3
 8005092:	b510      	push	{r4, lr}
 8005094:	4604      	mov	r4, r0
 8005096:	d001      	beq.n	800509c <cleanup_stdio+0x10>
 8005098:	f001 f800 	bl	800609c <_fflush_r>
 800509c:	68a1      	ldr	r1, [r4, #8]
 800509e:	4b09      	ldr	r3, [pc, #36]	@ (80050c4 <cleanup_stdio+0x38>)
 80050a0:	4299      	cmp	r1, r3
 80050a2:	d002      	beq.n	80050aa <cleanup_stdio+0x1e>
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 fff9 	bl	800609c <_fflush_r>
 80050aa:	68e1      	ldr	r1, [r4, #12]
 80050ac:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <cleanup_stdio+0x3c>)
 80050ae:	4299      	cmp	r1, r3
 80050b0:	d004      	beq.n	80050bc <cleanup_stdio+0x30>
 80050b2:	4620      	mov	r0, r4
 80050b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b8:	f000 bff0 	b.w	800609c <_fflush_r>
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	bf00      	nop
 80050c0:	2000029c 	.word	0x2000029c
 80050c4:	20000304 	.word	0x20000304
 80050c8:	2000036c 	.word	0x2000036c

080050cc <global_stdio_init.part.0>:
 80050cc:	b510      	push	{r4, lr}
 80050ce:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <global_stdio_init.part.0+0x30>)
 80050d0:	4c0b      	ldr	r4, [pc, #44]	@ (8005100 <global_stdio_init.part.0+0x34>)
 80050d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005104 <global_stdio_init.part.0+0x38>)
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	4620      	mov	r0, r4
 80050d8:	2200      	movs	r2, #0
 80050da:	2104      	movs	r1, #4
 80050dc:	f7ff ff94 	bl	8005008 <std>
 80050e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050e4:	2201      	movs	r2, #1
 80050e6:	2109      	movs	r1, #9
 80050e8:	f7ff ff8e 	bl	8005008 <std>
 80050ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050f0:	2202      	movs	r2, #2
 80050f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f6:	2112      	movs	r1, #18
 80050f8:	f7ff bf86 	b.w	8005008 <std>
 80050fc:	200003d4 	.word	0x200003d4
 8005100:	2000029c 	.word	0x2000029c
 8005104:	08005075 	.word	0x08005075

08005108 <__sfp_lock_acquire>:
 8005108:	4801      	ldr	r0, [pc, #4]	@ (8005110 <__sfp_lock_acquire+0x8>)
 800510a:	f000 ba20 	b.w	800554e <__retarget_lock_acquire_recursive>
 800510e:	bf00      	nop
 8005110:	200003dd 	.word	0x200003dd

08005114 <__sfp_lock_release>:
 8005114:	4801      	ldr	r0, [pc, #4]	@ (800511c <__sfp_lock_release+0x8>)
 8005116:	f000 ba1b 	b.w	8005550 <__retarget_lock_release_recursive>
 800511a:	bf00      	nop
 800511c:	200003dd 	.word	0x200003dd

08005120 <__sinit>:
 8005120:	b510      	push	{r4, lr}
 8005122:	4604      	mov	r4, r0
 8005124:	f7ff fff0 	bl	8005108 <__sfp_lock_acquire>
 8005128:	6a23      	ldr	r3, [r4, #32]
 800512a:	b11b      	cbz	r3, 8005134 <__sinit+0x14>
 800512c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005130:	f7ff bff0 	b.w	8005114 <__sfp_lock_release>
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <__sinit+0x28>)
 8005136:	6223      	str	r3, [r4, #32]
 8005138:	4b04      	ldr	r3, [pc, #16]	@ (800514c <__sinit+0x2c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f5      	bne.n	800512c <__sinit+0xc>
 8005140:	f7ff ffc4 	bl	80050cc <global_stdio_init.part.0>
 8005144:	e7f2      	b.n	800512c <__sinit+0xc>
 8005146:	bf00      	nop
 8005148:	0800508d 	.word	0x0800508d
 800514c:	200003d4 	.word	0x200003d4

08005150 <_fwalk_sglue>:
 8005150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005154:	4607      	mov	r7, r0
 8005156:	4688      	mov	r8, r1
 8005158:	4614      	mov	r4, r2
 800515a:	2600      	movs	r6, #0
 800515c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005160:	f1b9 0901 	subs.w	r9, r9, #1
 8005164:	d505      	bpl.n	8005172 <_fwalk_sglue+0x22>
 8005166:	6824      	ldr	r4, [r4, #0]
 8005168:	2c00      	cmp	r4, #0
 800516a:	d1f7      	bne.n	800515c <_fwalk_sglue+0xc>
 800516c:	4630      	mov	r0, r6
 800516e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005172:	89ab      	ldrh	r3, [r5, #12]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d907      	bls.n	8005188 <_fwalk_sglue+0x38>
 8005178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800517c:	3301      	adds	r3, #1
 800517e:	d003      	beq.n	8005188 <_fwalk_sglue+0x38>
 8005180:	4629      	mov	r1, r5
 8005182:	4638      	mov	r0, r7
 8005184:	47c0      	blx	r8
 8005186:	4306      	orrs	r6, r0
 8005188:	3568      	adds	r5, #104	@ 0x68
 800518a:	e7e9      	b.n	8005160 <_fwalk_sglue+0x10>

0800518c <iprintf>:
 800518c:	b40f      	push	{r0, r1, r2, r3}
 800518e:	b507      	push	{r0, r1, r2, lr}
 8005190:	4906      	ldr	r1, [pc, #24]	@ (80051ac <iprintf+0x20>)
 8005192:	ab04      	add	r3, sp, #16
 8005194:	6808      	ldr	r0, [r1, #0]
 8005196:	f853 2b04 	ldr.w	r2, [r3], #4
 800519a:	6881      	ldr	r1, [r0, #8]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	f000 fc53 	bl	8005a48 <_vfiprintf_r>
 80051a2:	b003      	add	sp, #12
 80051a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a8:	b004      	add	sp, #16
 80051aa:	4770      	bx	lr
 80051ac:	20000018 	.word	0x20000018

080051b0 <_puts_r>:
 80051b0:	6a03      	ldr	r3, [r0, #32]
 80051b2:	b570      	push	{r4, r5, r6, lr}
 80051b4:	6884      	ldr	r4, [r0, #8]
 80051b6:	4605      	mov	r5, r0
 80051b8:	460e      	mov	r6, r1
 80051ba:	b90b      	cbnz	r3, 80051c0 <_puts_r+0x10>
 80051bc:	f7ff ffb0 	bl	8005120 <__sinit>
 80051c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051c2:	07db      	lsls	r3, r3, #31
 80051c4:	d405      	bmi.n	80051d2 <_puts_r+0x22>
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	0598      	lsls	r0, r3, #22
 80051ca:	d402      	bmi.n	80051d2 <_puts_r+0x22>
 80051cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ce:	f000 f9be 	bl	800554e <__retarget_lock_acquire_recursive>
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	0719      	lsls	r1, r3, #28
 80051d6:	d502      	bpl.n	80051de <_puts_r+0x2e>
 80051d8:	6923      	ldr	r3, [r4, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d135      	bne.n	800524a <_puts_r+0x9a>
 80051de:	4621      	mov	r1, r4
 80051e0:	4628      	mov	r0, r5
 80051e2:	f000 f8e5 	bl	80053b0 <__swsetup_r>
 80051e6:	b380      	cbz	r0, 800524a <_puts_r+0x9a>
 80051e8:	f04f 35ff 	mov.w	r5, #4294967295
 80051ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051ee:	07da      	lsls	r2, r3, #31
 80051f0:	d405      	bmi.n	80051fe <_puts_r+0x4e>
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	059b      	lsls	r3, r3, #22
 80051f6:	d402      	bmi.n	80051fe <_puts_r+0x4e>
 80051f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051fa:	f000 f9a9 	bl	8005550 <__retarget_lock_release_recursive>
 80051fe:	4628      	mov	r0, r5
 8005200:	bd70      	pop	{r4, r5, r6, pc}
 8005202:	2b00      	cmp	r3, #0
 8005204:	da04      	bge.n	8005210 <_puts_r+0x60>
 8005206:	69a2      	ldr	r2, [r4, #24]
 8005208:	429a      	cmp	r2, r3
 800520a:	dc17      	bgt.n	800523c <_puts_r+0x8c>
 800520c:	290a      	cmp	r1, #10
 800520e:	d015      	beq.n	800523c <_puts_r+0x8c>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	6022      	str	r2, [r4, #0]
 8005216:	7019      	strb	r1, [r3, #0]
 8005218:	68a3      	ldr	r3, [r4, #8]
 800521a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800521e:	3b01      	subs	r3, #1
 8005220:	60a3      	str	r3, [r4, #8]
 8005222:	2900      	cmp	r1, #0
 8005224:	d1ed      	bne.n	8005202 <_puts_r+0x52>
 8005226:	2b00      	cmp	r3, #0
 8005228:	da11      	bge.n	800524e <_puts_r+0x9e>
 800522a:	4622      	mov	r2, r4
 800522c:	210a      	movs	r1, #10
 800522e:	4628      	mov	r0, r5
 8005230:	f000 f87f 	bl	8005332 <__swbuf_r>
 8005234:	3001      	adds	r0, #1
 8005236:	d0d7      	beq.n	80051e8 <_puts_r+0x38>
 8005238:	250a      	movs	r5, #10
 800523a:	e7d7      	b.n	80051ec <_puts_r+0x3c>
 800523c:	4622      	mov	r2, r4
 800523e:	4628      	mov	r0, r5
 8005240:	f000 f877 	bl	8005332 <__swbuf_r>
 8005244:	3001      	adds	r0, #1
 8005246:	d1e7      	bne.n	8005218 <_puts_r+0x68>
 8005248:	e7ce      	b.n	80051e8 <_puts_r+0x38>
 800524a:	3e01      	subs	r6, #1
 800524c:	e7e4      	b.n	8005218 <_puts_r+0x68>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	6022      	str	r2, [r4, #0]
 8005254:	220a      	movs	r2, #10
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e7ee      	b.n	8005238 <_puts_r+0x88>
	...

0800525c <puts>:
 800525c:	4b02      	ldr	r3, [pc, #8]	@ (8005268 <puts+0xc>)
 800525e:	4601      	mov	r1, r0
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	f7ff bfa5 	b.w	80051b0 <_puts_r>
 8005266:	bf00      	nop
 8005268:	20000018 	.word	0x20000018

0800526c <siprintf>:
 800526c:	b40e      	push	{r1, r2, r3}
 800526e:	b500      	push	{lr}
 8005270:	b09c      	sub	sp, #112	@ 0x70
 8005272:	ab1d      	add	r3, sp, #116	@ 0x74
 8005274:	9002      	str	r0, [sp, #8]
 8005276:	9006      	str	r0, [sp, #24]
 8005278:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800527c:	4809      	ldr	r0, [pc, #36]	@ (80052a4 <siprintf+0x38>)
 800527e:	9107      	str	r1, [sp, #28]
 8005280:	9104      	str	r1, [sp, #16]
 8005282:	4909      	ldr	r1, [pc, #36]	@ (80052a8 <siprintf+0x3c>)
 8005284:	f853 2b04 	ldr.w	r2, [r3], #4
 8005288:	9105      	str	r1, [sp, #20]
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	a902      	add	r1, sp, #8
 8005290:	f000 fab4 	bl	80057fc <_svfiprintf_r>
 8005294:	9b02      	ldr	r3, [sp, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	b01c      	add	sp, #112	@ 0x70
 800529c:	f85d eb04 	ldr.w	lr, [sp], #4
 80052a0:	b003      	add	sp, #12
 80052a2:	4770      	bx	lr
 80052a4:	20000018 	.word	0x20000018
 80052a8:	ffff0208 	.word	0xffff0208

080052ac <__sread>:
 80052ac:	b510      	push	{r4, lr}
 80052ae:	460c      	mov	r4, r1
 80052b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b4:	f000 f8fc 	bl	80054b0 <_read_r>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	bfab      	itete	ge
 80052bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80052be:	89a3      	ldrhlt	r3, [r4, #12]
 80052c0:	181b      	addge	r3, r3, r0
 80052c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80052c6:	bfac      	ite	ge
 80052c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80052ca:	81a3      	strhlt	r3, [r4, #12]
 80052cc:	bd10      	pop	{r4, pc}

080052ce <__swrite>:
 80052ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d2:	461f      	mov	r7, r3
 80052d4:	898b      	ldrh	r3, [r1, #12]
 80052d6:	05db      	lsls	r3, r3, #23
 80052d8:	4605      	mov	r5, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	4616      	mov	r6, r2
 80052de:	d505      	bpl.n	80052ec <__swrite+0x1e>
 80052e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e4:	2302      	movs	r3, #2
 80052e6:	2200      	movs	r2, #0
 80052e8:	f000 f8d0 	bl	800548c <_lseek_r>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	4632      	mov	r2, r6
 80052fa:	463b      	mov	r3, r7
 80052fc:	4628      	mov	r0, r5
 80052fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005302:	f000 b8e7 	b.w	80054d4 <_write_r>

08005306 <__sseek>:
 8005306:	b510      	push	{r4, lr}
 8005308:	460c      	mov	r4, r1
 800530a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530e:	f000 f8bd 	bl	800548c <_lseek_r>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	bf15      	itete	ne
 8005318:	6560      	strne	r0, [r4, #84]	@ 0x54
 800531a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800531e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005322:	81a3      	strheq	r3, [r4, #12]
 8005324:	bf18      	it	ne
 8005326:	81a3      	strhne	r3, [r4, #12]
 8005328:	bd10      	pop	{r4, pc}

0800532a <__sclose>:
 800532a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532e:	f000 b89d 	b.w	800546c <_close_r>

08005332 <__swbuf_r>:
 8005332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005334:	460e      	mov	r6, r1
 8005336:	4614      	mov	r4, r2
 8005338:	4605      	mov	r5, r0
 800533a:	b118      	cbz	r0, 8005344 <__swbuf_r+0x12>
 800533c:	6a03      	ldr	r3, [r0, #32]
 800533e:	b90b      	cbnz	r3, 8005344 <__swbuf_r+0x12>
 8005340:	f7ff feee 	bl	8005120 <__sinit>
 8005344:	69a3      	ldr	r3, [r4, #24]
 8005346:	60a3      	str	r3, [r4, #8]
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	071a      	lsls	r2, r3, #28
 800534c:	d501      	bpl.n	8005352 <__swbuf_r+0x20>
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	b943      	cbnz	r3, 8005364 <__swbuf_r+0x32>
 8005352:	4621      	mov	r1, r4
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f82b 	bl	80053b0 <__swsetup_r>
 800535a:	b118      	cbz	r0, 8005364 <__swbuf_r+0x32>
 800535c:	f04f 37ff 	mov.w	r7, #4294967295
 8005360:	4638      	mov	r0, r7
 8005362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	6922      	ldr	r2, [r4, #16]
 8005368:	1a98      	subs	r0, r3, r2
 800536a:	6963      	ldr	r3, [r4, #20]
 800536c:	b2f6      	uxtb	r6, r6
 800536e:	4283      	cmp	r3, r0
 8005370:	4637      	mov	r7, r6
 8005372:	dc05      	bgt.n	8005380 <__swbuf_r+0x4e>
 8005374:	4621      	mov	r1, r4
 8005376:	4628      	mov	r0, r5
 8005378:	f000 fe90 	bl	800609c <_fflush_r>
 800537c:	2800      	cmp	r0, #0
 800537e:	d1ed      	bne.n	800535c <__swbuf_r+0x2a>
 8005380:	68a3      	ldr	r3, [r4, #8]
 8005382:	3b01      	subs	r3, #1
 8005384:	60a3      	str	r3, [r4, #8]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	6022      	str	r2, [r4, #0]
 800538c:	701e      	strb	r6, [r3, #0]
 800538e:	6962      	ldr	r2, [r4, #20]
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	429a      	cmp	r2, r3
 8005394:	d004      	beq.n	80053a0 <__swbuf_r+0x6e>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	07db      	lsls	r3, r3, #31
 800539a:	d5e1      	bpl.n	8005360 <__swbuf_r+0x2e>
 800539c:	2e0a      	cmp	r6, #10
 800539e:	d1df      	bne.n	8005360 <__swbuf_r+0x2e>
 80053a0:	4621      	mov	r1, r4
 80053a2:	4628      	mov	r0, r5
 80053a4:	f000 fe7a 	bl	800609c <_fflush_r>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d0d9      	beq.n	8005360 <__swbuf_r+0x2e>
 80053ac:	e7d6      	b.n	800535c <__swbuf_r+0x2a>
	...

080053b0 <__swsetup_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4b29      	ldr	r3, [pc, #164]	@ (8005458 <__swsetup_r+0xa8>)
 80053b4:	4605      	mov	r5, r0
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	460c      	mov	r4, r1
 80053ba:	b118      	cbz	r0, 80053c4 <__swsetup_r+0x14>
 80053bc:	6a03      	ldr	r3, [r0, #32]
 80053be:	b90b      	cbnz	r3, 80053c4 <__swsetup_r+0x14>
 80053c0:	f7ff feae 	bl	8005120 <__sinit>
 80053c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c8:	0719      	lsls	r1, r3, #28
 80053ca:	d422      	bmi.n	8005412 <__swsetup_r+0x62>
 80053cc:	06da      	lsls	r2, r3, #27
 80053ce:	d407      	bmi.n	80053e0 <__swsetup_r+0x30>
 80053d0:	2209      	movs	r2, #9
 80053d2:	602a      	str	r2, [r5, #0]
 80053d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	f04f 30ff 	mov.w	r0, #4294967295
 80053de:	e033      	b.n	8005448 <__swsetup_r+0x98>
 80053e0:	0758      	lsls	r0, r3, #29
 80053e2:	d512      	bpl.n	800540a <__swsetup_r+0x5a>
 80053e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053e6:	b141      	cbz	r1, 80053fa <__swsetup_r+0x4a>
 80053e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053ec:	4299      	cmp	r1, r3
 80053ee:	d002      	beq.n	80053f6 <__swsetup_r+0x46>
 80053f0:	4628      	mov	r0, r5
 80053f2:	f000 f8af 	bl	8005554 <_free_r>
 80053f6:	2300      	movs	r3, #0
 80053f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80053fa:	89a3      	ldrh	r3, [r4, #12]
 80053fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005400:	81a3      	strh	r3, [r4, #12]
 8005402:	2300      	movs	r3, #0
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f043 0308 	orr.w	r3, r3, #8
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	b94b      	cbnz	r3, 800542a <__swsetup_r+0x7a>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800541c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005420:	d003      	beq.n	800542a <__swsetup_r+0x7a>
 8005422:	4621      	mov	r1, r4
 8005424:	4628      	mov	r0, r5
 8005426:	f000 fe87 	bl	8006138 <__smakebuf_r>
 800542a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800542e:	f013 0201 	ands.w	r2, r3, #1
 8005432:	d00a      	beq.n	800544a <__swsetup_r+0x9a>
 8005434:	2200      	movs	r2, #0
 8005436:	60a2      	str	r2, [r4, #8]
 8005438:	6962      	ldr	r2, [r4, #20]
 800543a:	4252      	negs	r2, r2
 800543c:	61a2      	str	r2, [r4, #24]
 800543e:	6922      	ldr	r2, [r4, #16]
 8005440:	b942      	cbnz	r2, 8005454 <__swsetup_r+0xa4>
 8005442:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005446:	d1c5      	bne.n	80053d4 <__swsetup_r+0x24>
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	0799      	lsls	r1, r3, #30
 800544c:	bf58      	it	pl
 800544e:	6962      	ldrpl	r2, [r4, #20]
 8005450:	60a2      	str	r2, [r4, #8]
 8005452:	e7f4      	b.n	800543e <__swsetup_r+0x8e>
 8005454:	2000      	movs	r0, #0
 8005456:	e7f7      	b.n	8005448 <__swsetup_r+0x98>
 8005458:	20000018 	.word	0x20000018

0800545c <memset>:
 800545c:	4402      	add	r2, r0
 800545e:	4603      	mov	r3, r0
 8005460:	4293      	cmp	r3, r2
 8005462:	d100      	bne.n	8005466 <memset+0xa>
 8005464:	4770      	bx	lr
 8005466:	f803 1b01 	strb.w	r1, [r3], #1
 800546a:	e7f9      	b.n	8005460 <memset+0x4>

0800546c <_close_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d06      	ldr	r5, [pc, #24]	@ (8005488 <_close_r+0x1c>)
 8005470:	2300      	movs	r3, #0
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	f7fc fb0b 	bl	8001a92 <_close>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_close_r+0x1a>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_close_r+0x1a>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	200003d8 	.word	0x200003d8

0800548c <_lseek_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4d07      	ldr	r5, [pc, #28]	@ (80054ac <_lseek_r+0x20>)
 8005490:	4604      	mov	r4, r0
 8005492:	4608      	mov	r0, r1
 8005494:	4611      	mov	r1, r2
 8005496:	2200      	movs	r2, #0
 8005498:	602a      	str	r2, [r5, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	f7fc fb20 	bl	8001ae0 <_lseek>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_lseek_r+0x1e>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_lseek_r+0x1e>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	200003d8 	.word	0x200003d8

080054b0 <_read_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d07      	ldr	r5, [pc, #28]	@ (80054d0 <_read_r+0x20>)
 80054b4:	4604      	mov	r4, r0
 80054b6:	4608      	mov	r0, r1
 80054b8:	4611      	mov	r1, r2
 80054ba:	2200      	movs	r2, #0
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fc faae 	bl	8001a20 <_read>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_read_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_read_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	200003d8 	.word	0x200003d8

080054d4 <_write_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	@ (80054f4 <_write_r+0x20>)
 80054d8:	4604      	mov	r4, r0
 80054da:	4608      	mov	r0, r1
 80054dc:	4611      	mov	r1, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fc fab9 	bl	8001a5a <_write>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_write_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_write_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	200003d8 	.word	0x200003d8

080054f8 <__errno>:
 80054f8:	4b01      	ldr	r3, [pc, #4]	@ (8005500 <__errno+0x8>)
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000018 	.word	0x20000018

08005504 <__libc_init_array>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4d0d      	ldr	r5, [pc, #52]	@ (800553c <__libc_init_array+0x38>)
 8005508:	4c0d      	ldr	r4, [pc, #52]	@ (8005540 <__libc_init_array+0x3c>)
 800550a:	1b64      	subs	r4, r4, r5
 800550c:	10a4      	asrs	r4, r4, #2
 800550e:	2600      	movs	r6, #0
 8005510:	42a6      	cmp	r6, r4
 8005512:	d109      	bne.n	8005528 <__libc_init_array+0x24>
 8005514:	4d0b      	ldr	r5, [pc, #44]	@ (8005544 <__libc_init_array+0x40>)
 8005516:	4c0c      	ldr	r4, [pc, #48]	@ (8005548 <__libc_init_array+0x44>)
 8005518:	f000 feda 	bl	80062d0 <_init>
 800551c:	1b64      	subs	r4, r4, r5
 800551e:	10a4      	asrs	r4, r4, #2
 8005520:	2600      	movs	r6, #0
 8005522:	42a6      	cmp	r6, r4
 8005524:	d105      	bne.n	8005532 <__libc_init_array+0x2e>
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	f855 3b04 	ldr.w	r3, [r5], #4
 800552c:	4798      	blx	r3
 800552e:	3601      	adds	r6, #1
 8005530:	e7ee      	b.n	8005510 <__libc_init_array+0xc>
 8005532:	f855 3b04 	ldr.w	r3, [r5], #4
 8005536:	4798      	blx	r3
 8005538:	3601      	adds	r6, #1
 800553a:	e7f2      	b.n	8005522 <__libc_init_array+0x1e>
 800553c:	08007c14 	.word	0x08007c14
 8005540:	08007c14 	.word	0x08007c14
 8005544:	08007c14 	.word	0x08007c14
 8005548:	08007c18 	.word	0x08007c18

0800554c <__retarget_lock_init_recursive>:
 800554c:	4770      	bx	lr

0800554e <__retarget_lock_acquire_recursive>:
 800554e:	4770      	bx	lr

08005550 <__retarget_lock_release_recursive>:
 8005550:	4770      	bx	lr
	...

08005554 <_free_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4605      	mov	r5, r0
 8005558:	2900      	cmp	r1, #0
 800555a:	d041      	beq.n	80055e0 <_free_r+0x8c>
 800555c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005560:	1f0c      	subs	r4, r1, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	bfb8      	it	lt
 8005566:	18e4      	addlt	r4, r4, r3
 8005568:	f000 f8e0 	bl	800572c <__malloc_lock>
 800556c:	4a1d      	ldr	r2, [pc, #116]	@ (80055e4 <_free_r+0x90>)
 800556e:	6813      	ldr	r3, [r2, #0]
 8005570:	b933      	cbnz	r3, 8005580 <_free_r+0x2c>
 8005572:	6063      	str	r3, [r4, #4]
 8005574:	6014      	str	r4, [r2, #0]
 8005576:	4628      	mov	r0, r5
 8005578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800557c:	f000 b8dc 	b.w	8005738 <__malloc_unlock>
 8005580:	42a3      	cmp	r3, r4
 8005582:	d908      	bls.n	8005596 <_free_r+0x42>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	1821      	adds	r1, r4, r0
 8005588:	428b      	cmp	r3, r1
 800558a:	bf01      	itttt	eq
 800558c:	6819      	ldreq	r1, [r3, #0]
 800558e:	685b      	ldreq	r3, [r3, #4]
 8005590:	1809      	addeq	r1, r1, r0
 8005592:	6021      	streq	r1, [r4, #0]
 8005594:	e7ed      	b.n	8005572 <_free_r+0x1e>
 8005596:	461a      	mov	r2, r3
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	b10b      	cbz	r3, 80055a0 <_free_r+0x4c>
 800559c:	42a3      	cmp	r3, r4
 800559e:	d9fa      	bls.n	8005596 <_free_r+0x42>
 80055a0:	6811      	ldr	r1, [r2, #0]
 80055a2:	1850      	adds	r0, r2, r1
 80055a4:	42a0      	cmp	r0, r4
 80055a6:	d10b      	bne.n	80055c0 <_free_r+0x6c>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	4401      	add	r1, r0
 80055ac:	1850      	adds	r0, r2, r1
 80055ae:	4283      	cmp	r3, r0
 80055b0:	6011      	str	r1, [r2, #0]
 80055b2:	d1e0      	bne.n	8005576 <_free_r+0x22>
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	6053      	str	r3, [r2, #4]
 80055ba:	4408      	add	r0, r1
 80055bc:	6010      	str	r0, [r2, #0]
 80055be:	e7da      	b.n	8005576 <_free_r+0x22>
 80055c0:	d902      	bls.n	80055c8 <_free_r+0x74>
 80055c2:	230c      	movs	r3, #12
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	e7d6      	b.n	8005576 <_free_r+0x22>
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	1821      	adds	r1, r4, r0
 80055cc:	428b      	cmp	r3, r1
 80055ce:	bf04      	itt	eq
 80055d0:	6819      	ldreq	r1, [r3, #0]
 80055d2:	685b      	ldreq	r3, [r3, #4]
 80055d4:	6063      	str	r3, [r4, #4]
 80055d6:	bf04      	itt	eq
 80055d8:	1809      	addeq	r1, r1, r0
 80055da:	6021      	streq	r1, [r4, #0]
 80055dc:	6054      	str	r4, [r2, #4]
 80055de:	e7ca      	b.n	8005576 <_free_r+0x22>
 80055e0:	bd38      	pop	{r3, r4, r5, pc}
 80055e2:	bf00      	nop
 80055e4:	200003e4 	.word	0x200003e4

080055e8 <sbrk_aligned>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005628 <sbrk_aligned+0x40>)
 80055ec:	460c      	mov	r4, r1
 80055ee:	6831      	ldr	r1, [r6, #0]
 80055f0:	4605      	mov	r5, r0
 80055f2:	b911      	cbnz	r1, 80055fa <sbrk_aligned+0x12>
 80055f4:	f000 fe18 	bl	8006228 <_sbrk_r>
 80055f8:	6030      	str	r0, [r6, #0]
 80055fa:	4621      	mov	r1, r4
 80055fc:	4628      	mov	r0, r5
 80055fe:	f000 fe13 	bl	8006228 <_sbrk_r>
 8005602:	1c43      	adds	r3, r0, #1
 8005604:	d103      	bne.n	800560e <sbrk_aligned+0x26>
 8005606:	f04f 34ff 	mov.w	r4, #4294967295
 800560a:	4620      	mov	r0, r4
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	1cc4      	adds	r4, r0, #3
 8005610:	f024 0403 	bic.w	r4, r4, #3
 8005614:	42a0      	cmp	r0, r4
 8005616:	d0f8      	beq.n	800560a <sbrk_aligned+0x22>
 8005618:	1a21      	subs	r1, r4, r0
 800561a:	4628      	mov	r0, r5
 800561c:	f000 fe04 	bl	8006228 <_sbrk_r>
 8005620:	3001      	adds	r0, #1
 8005622:	d1f2      	bne.n	800560a <sbrk_aligned+0x22>
 8005624:	e7ef      	b.n	8005606 <sbrk_aligned+0x1e>
 8005626:	bf00      	nop
 8005628:	200003e0 	.word	0x200003e0

0800562c <_malloc_r>:
 800562c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005630:	1ccd      	adds	r5, r1, #3
 8005632:	f025 0503 	bic.w	r5, r5, #3
 8005636:	3508      	adds	r5, #8
 8005638:	2d0c      	cmp	r5, #12
 800563a:	bf38      	it	cc
 800563c:	250c      	movcc	r5, #12
 800563e:	2d00      	cmp	r5, #0
 8005640:	4606      	mov	r6, r0
 8005642:	db01      	blt.n	8005648 <_malloc_r+0x1c>
 8005644:	42a9      	cmp	r1, r5
 8005646:	d904      	bls.n	8005652 <_malloc_r+0x26>
 8005648:	230c      	movs	r3, #12
 800564a:	6033      	str	r3, [r6, #0]
 800564c:	2000      	movs	r0, #0
 800564e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005652:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005728 <_malloc_r+0xfc>
 8005656:	f000 f869 	bl	800572c <__malloc_lock>
 800565a:	f8d8 3000 	ldr.w	r3, [r8]
 800565e:	461c      	mov	r4, r3
 8005660:	bb44      	cbnz	r4, 80056b4 <_malloc_r+0x88>
 8005662:	4629      	mov	r1, r5
 8005664:	4630      	mov	r0, r6
 8005666:	f7ff ffbf 	bl	80055e8 <sbrk_aligned>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	4604      	mov	r4, r0
 800566e:	d158      	bne.n	8005722 <_malloc_r+0xf6>
 8005670:	f8d8 4000 	ldr.w	r4, [r8]
 8005674:	4627      	mov	r7, r4
 8005676:	2f00      	cmp	r7, #0
 8005678:	d143      	bne.n	8005702 <_malloc_r+0xd6>
 800567a:	2c00      	cmp	r4, #0
 800567c:	d04b      	beq.n	8005716 <_malloc_r+0xea>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	4639      	mov	r1, r7
 8005682:	4630      	mov	r0, r6
 8005684:	eb04 0903 	add.w	r9, r4, r3
 8005688:	f000 fdce 	bl	8006228 <_sbrk_r>
 800568c:	4581      	cmp	r9, r0
 800568e:	d142      	bne.n	8005716 <_malloc_r+0xea>
 8005690:	6821      	ldr	r1, [r4, #0]
 8005692:	1a6d      	subs	r5, r5, r1
 8005694:	4629      	mov	r1, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f7ff ffa6 	bl	80055e8 <sbrk_aligned>
 800569c:	3001      	adds	r0, #1
 800569e:	d03a      	beq.n	8005716 <_malloc_r+0xea>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	442b      	add	r3, r5
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	f8d8 3000 	ldr.w	r3, [r8]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	bb62      	cbnz	r2, 8005708 <_malloc_r+0xdc>
 80056ae:	f8c8 7000 	str.w	r7, [r8]
 80056b2:	e00f      	b.n	80056d4 <_malloc_r+0xa8>
 80056b4:	6822      	ldr	r2, [r4, #0]
 80056b6:	1b52      	subs	r2, r2, r5
 80056b8:	d420      	bmi.n	80056fc <_malloc_r+0xd0>
 80056ba:	2a0b      	cmp	r2, #11
 80056bc:	d917      	bls.n	80056ee <_malloc_r+0xc2>
 80056be:	1961      	adds	r1, r4, r5
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	6025      	str	r5, [r4, #0]
 80056c4:	bf18      	it	ne
 80056c6:	6059      	strne	r1, [r3, #4]
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	bf08      	it	eq
 80056cc:	f8c8 1000 	streq.w	r1, [r8]
 80056d0:	5162      	str	r2, [r4, r5]
 80056d2:	604b      	str	r3, [r1, #4]
 80056d4:	4630      	mov	r0, r6
 80056d6:	f000 f82f 	bl	8005738 <__malloc_unlock>
 80056da:	f104 000b 	add.w	r0, r4, #11
 80056de:	1d23      	adds	r3, r4, #4
 80056e0:	f020 0007 	bic.w	r0, r0, #7
 80056e4:	1ac2      	subs	r2, r0, r3
 80056e6:	bf1c      	itt	ne
 80056e8:	1a1b      	subne	r3, r3, r0
 80056ea:	50a3      	strne	r3, [r4, r2]
 80056ec:	e7af      	b.n	800564e <_malloc_r+0x22>
 80056ee:	6862      	ldr	r2, [r4, #4]
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	bf0c      	ite	eq
 80056f4:	f8c8 2000 	streq.w	r2, [r8]
 80056f8:	605a      	strne	r2, [r3, #4]
 80056fa:	e7eb      	b.n	80056d4 <_malloc_r+0xa8>
 80056fc:	4623      	mov	r3, r4
 80056fe:	6864      	ldr	r4, [r4, #4]
 8005700:	e7ae      	b.n	8005660 <_malloc_r+0x34>
 8005702:	463c      	mov	r4, r7
 8005704:	687f      	ldr	r7, [r7, #4]
 8005706:	e7b6      	b.n	8005676 <_malloc_r+0x4a>
 8005708:	461a      	mov	r2, r3
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	42a3      	cmp	r3, r4
 800570e:	d1fb      	bne.n	8005708 <_malloc_r+0xdc>
 8005710:	2300      	movs	r3, #0
 8005712:	6053      	str	r3, [r2, #4]
 8005714:	e7de      	b.n	80056d4 <_malloc_r+0xa8>
 8005716:	230c      	movs	r3, #12
 8005718:	6033      	str	r3, [r6, #0]
 800571a:	4630      	mov	r0, r6
 800571c:	f000 f80c 	bl	8005738 <__malloc_unlock>
 8005720:	e794      	b.n	800564c <_malloc_r+0x20>
 8005722:	6005      	str	r5, [r0, #0]
 8005724:	e7d6      	b.n	80056d4 <_malloc_r+0xa8>
 8005726:	bf00      	nop
 8005728:	200003e4 	.word	0x200003e4

0800572c <__malloc_lock>:
 800572c:	4801      	ldr	r0, [pc, #4]	@ (8005734 <__malloc_lock+0x8>)
 800572e:	f7ff bf0e 	b.w	800554e <__retarget_lock_acquire_recursive>
 8005732:	bf00      	nop
 8005734:	200003dc 	.word	0x200003dc

08005738 <__malloc_unlock>:
 8005738:	4801      	ldr	r0, [pc, #4]	@ (8005740 <__malloc_unlock+0x8>)
 800573a:	f7ff bf09 	b.w	8005550 <__retarget_lock_release_recursive>
 800573e:	bf00      	nop
 8005740:	200003dc 	.word	0x200003dc

08005744 <__ssputs_r>:
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	688e      	ldr	r6, [r1, #8]
 800574a:	461f      	mov	r7, r3
 800574c:	42be      	cmp	r6, r7
 800574e:	680b      	ldr	r3, [r1, #0]
 8005750:	4682      	mov	sl, r0
 8005752:	460c      	mov	r4, r1
 8005754:	4690      	mov	r8, r2
 8005756:	d82d      	bhi.n	80057b4 <__ssputs_r+0x70>
 8005758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800575c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005760:	d026      	beq.n	80057b0 <__ssputs_r+0x6c>
 8005762:	6965      	ldr	r5, [r4, #20]
 8005764:	6909      	ldr	r1, [r1, #16]
 8005766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800576a:	eba3 0901 	sub.w	r9, r3, r1
 800576e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005772:	1c7b      	adds	r3, r7, #1
 8005774:	444b      	add	r3, r9
 8005776:	106d      	asrs	r5, r5, #1
 8005778:	429d      	cmp	r5, r3
 800577a:	bf38      	it	cc
 800577c:	461d      	movcc	r5, r3
 800577e:	0553      	lsls	r3, r2, #21
 8005780:	d527      	bpl.n	80057d2 <__ssputs_r+0x8e>
 8005782:	4629      	mov	r1, r5
 8005784:	f7ff ff52 	bl	800562c <_malloc_r>
 8005788:	4606      	mov	r6, r0
 800578a:	b360      	cbz	r0, 80057e6 <__ssputs_r+0xa2>
 800578c:	6921      	ldr	r1, [r4, #16]
 800578e:	464a      	mov	r2, r9
 8005790:	f000 fd5a 	bl	8006248 <memcpy>
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800579a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800579e:	81a3      	strh	r3, [r4, #12]
 80057a0:	6126      	str	r6, [r4, #16]
 80057a2:	6165      	str	r5, [r4, #20]
 80057a4:	444e      	add	r6, r9
 80057a6:	eba5 0509 	sub.w	r5, r5, r9
 80057aa:	6026      	str	r6, [r4, #0]
 80057ac:	60a5      	str	r5, [r4, #8]
 80057ae:	463e      	mov	r6, r7
 80057b0:	42be      	cmp	r6, r7
 80057b2:	d900      	bls.n	80057b6 <__ssputs_r+0x72>
 80057b4:	463e      	mov	r6, r7
 80057b6:	6820      	ldr	r0, [r4, #0]
 80057b8:	4632      	mov	r2, r6
 80057ba:	4641      	mov	r1, r8
 80057bc:	f000 fcf8 	bl	80061b0 <memmove>
 80057c0:	68a3      	ldr	r3, [r4, #8]
 80057c2:	1b9b      	subs	r3, r3, r6
 80057c4:	60a3      	str	r3, [r4, #8]
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	4433      	add	r3, r6
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	2000      	movs	r0, #0
 80057ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d2:	462a      	mov	r2, r5
 80057d4:	f000 fd46 	bl	8006264 <_realloc_r>
 80057d8:	4606      	mov	r6, r0
 80057da:	2800      	cmp	r0, #0
 80057dc:	d1e0      	bne.n	80057a0 <__ssputs_r+0x5c>
 80057de:	6921      	ldr	r1, [r4, #16]
 80057e0:	4650      	mov	r0, sl
 80057e2:	f7ff feb7 	bl	8005554 <_free_r>
 80057e6:	230c      	movs	r3, #12
 80057e8:	f8ca 3000 	str.w	r3, [sl]
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	e7e9      	b.n	80057ce <__ssputs_r+0x8a>
	...

080057fc <_svfiprintf_r>:
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	4698      	mov	r8, r3
 8005802:	898b      	ldrh	r3, [r1, #12]
 8005804:	061b      	lsls	r3, r3, #24
 8005806:	b09d      	sub	sp, #116	@ 0x74
 8005808:	4607      	mov	r7, r0
 800580a:	460d      	mov	r5, r1
 800580c:	4614      	mov	r4, r2
 800580e:	d510      	bpl.n	8005832 <_svfiprintf_r+0x36>
 8005810:	690b      	ldr	r3, [r1, #16]
 8005812:	b973      	cbnz	r3, 8005832 <_svfiprintf_r+0x36>
 8005814:	2140      	movs	r1, #64	@ 0x40
 8005816:	f7ff ff09 	bl	800562c <_malloc_r>
 800581a:	6028      	str	r0, [r5, #0]
 800581c:	6128      	str	r0, [r5, #16]
 800581e:	b930      	cbnz	r0, 800582e <_svfiprintf_r+0x32>
 8005820:	230c      	movs	r3, #12
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	b01d      	add	sp, #116	@ 0x74
 800582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582e:	2340      	movs	r3, #64	@ 0x40
 8005830:	616b      	str	r3, [r5, #20]
 8005832:	2300      	movs	r3, #0
 8005834:	9309      	str	r3, [sp, #36]	@ 0x24
 8005836:	2320      	movs	r3, #32
 8005838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800583c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005840:	2330      	movs	r3, #48	@ 0x30
 8005842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059e0 <_svfiprintf_r+0x1e4>
 8005846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800584a:	f04f 0901 	mov.w	r9, #1
 800584e:	4623      	mov	r3, r4
 8005850:	469a      	mov	sl, r3
 8005852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005856:	b10a      	cbz	r2, 800585c <_svfiprintf_r+0x60>
 8005858:	2a25      	cmp	r2, #37	@ 0x25
 800585a:	d1f9      	bne.n	8005850 <_svfiprintf_r+0x54>
 800585c:	ebba 0b04 	subs.w	fp, sl, r4
 8005860:	d00b      	beq.n	800587a <_svfiprintf_r+0x7e>
 8005862:	465b      	mov	r3, fp
 8005864:	4622      	mov	r2, r4
 8005866:	4629      	mov	r1, r5
 8005868:	4638      	mov	r0, r7
 800586a:	f7ff ff6b 	bl	8005744 <__ssputs_r>
 800586e:	3001      	adds	r0, #1
 8005870:	f000 80a7 	beq.w	80059c2 <_svfiprintf_r+0x1c6>
 8005874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005876:	445a      	add	r2, fp
 8005878:	9209      	str	r2, [sp, #36]	@ 0x24
 800587a:	f89a 3000 	ldrb.w	r3, [sl]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 809f 	beq.w	80059c2 <_svfiprintf_r+0x1c6>
 8005884:	2300      	movs	r3, #0
 8005886:	f04f 32ff 	mov.w	r2, #4294967295
 800588a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800588e:	f10a 0a01 	add.w	sl, sl, #1
 8005892:	9304      	str	r3, [sp, #16]
 8005894:	9307      	str	r3, [sp, #28]
 8005896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800589a:	931a      	str	r3, [sp, #104]	@ 0x68
 800589c:	4654      	mov	r4, sl
 800589e:	2205      	movs	r2, #5
 80058a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a4:	484e      	ldr	r0, [pc, #312]	@ (80059e0 <_svfiprintf_r+0x1e4>)
 80058a6:	f7fa fc93 	bl	80001d0 <memchr>
 80058aa:	9a04      	ldr	r2, [sp, #16]
 80058ac:	b9d8      	cbnz	r0, 80058e6 <_svfiprintf_r+0xea>
 80058ae:	06d0      	lsls	r0, r2, #27
 80058b0:	bf44      	itt	mi
 80058b2:	2320      	movmi	r3, #32
 80058b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058b8:	0711      	lsls	r1, r2, #28
 80058ba:	bf44      	itt	mi
 80058bc:	232b      	movmi	r3, #43	@ 0x2b
 80058be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058c2:	f89a 3000 	ldrb.w	r3, [sl]
 80058c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80058c8:	d015      	beq.n	80058f6 <_svfiprintf_r+0xfa>
 80058ca:	9a07      	ldr	r2, [sp, #28]
 80058cc:	4654      	mov	r4, sl
 80058ce:	2000      	movs	r0, #0
 80058d0:	f04f 0c0a 	mov.w	ip, #10
 80058d4:	4621      	mov	r1, r4
 80058d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058da:	3b30      	subs	r3, #48	@ 0x30
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d94b      	bls.n	8005978 <_svfiprintf_r+0x17c>
 80058e0:	b1b0      	cbz	r0, 8005910 <_svfiprintf_r+0x114>
 80058e2:	9207      	str	r2, [sp, #28]
 80058e4:	e014      	b.n	8005910 <_svfiprintf_r+0x114>
 80058e6:	eba0 0308 	sub.w	r3, r0, r8
 80058ea:	fa09 f303 	lsl.w	r3, r9, r3
 80058ee:	4313      	orrs	r3, r2
 80058f0:	9304      	str	r3, [sp, #16]
 80058f2:	46a2      	mov	sl, r4
 80058f4:	e7d2      	b.n	800589c <_svfiprintf_r+0xa0>
 80058f6:	9b03      	ldr	r3, [sp, #12]
 80058f8:	1d19      	adds	r1, r3, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	9103      	str	r1, [sp, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bfbb      	ittet	lt
 8005902:	425b      	neglt	r3, r3
 8005904:	f042 0202 	orrlt.w	r2, r2, #2
 8005908:	9307      	strge	r3, [sp, #28]
 800590a:	9307      	strlt	r3, [sp, #28]
 800590c:	bfb8      	it	lt
 800590e:	9204      	strlt	r2, [sp, #16]
 8005910:	7823      	ldrb	r3, [r4, #0]
 8005912:	2b2e      	cmp	r3, #46	@ 0x2e
 8005914:	d10a      	bne.n	800592c <_svfiprintf_r+0x130>
 8005916:	7863      	ldrb	r3, [r4, #1]
 8005918:	2b2a      	cmp	r3, #42	@ 0x2a
 800591a:	d132      	bne.n	8005982 <_svfiprintf_r+0x186>
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	1d1a      	adds	r2, r3, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	9203      	str	r2, [sp, #12]
 8005924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005928:	3402      	adds	r4, #2
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80059f0 <_svfiprintf_r+0x1f4>
 8005930:	7821      	ldrb	r1, [r4, #0]
 8005932:	2203      	movs	r2, #3
 8005934:	4650      	mov	r0, sl
 8005936:	f7fa fc4b 	bl	80001d0 <memchr>
 800593a:	b138      	cbz	r0, 800594c <_svfiprintf_r+0x150>
 800593c:	9b04      	ldr	r3, [sp, #16]
 800593e:	eba0 000a 	sub.w	r0, r0, sl
 8005942:	2240      	movs	r2, #64	@ 0x40
 8005944:	4082      	lsls	r2, r0
 8005946:	4313      	orrs	r3, r2
 8005948:	3401      	adds	r4, #1
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005950:	4824      	ldr	r0, [pc, #144]	@ (80059e4 <_svfiprintf_r+0x1e8>)
 8005952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005956:	2206      	movs	r2, #6
 8005958:	f7fa fc3a 	bl	80001d0 <memchr>
 800595c:	2800      	cmp	r0, #0
 800595e:	d036      	beq.n	80059ce <_svfiprintf_r+0x1d2>
 8005960:	4b21      	ldr	r3, [pc, #132]	@ (80059e8 <_svfiprintf_r+0x1ec>)
 8005962:	bb1b      	cbnz	r3, 80059ac <_svfiprintf_r+0x1b0>
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	3307      	adds	r3, #7
 8005968:	f023 0307 	bic.w	r3, r3, #7
 800596c:	3308      	adds	r3, #8
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005972:	4433      	add	r3, r6
 8005974:	9309      	str	r3, [sp, #36]	@ 0x24
 8005976:	e76a      	b.n	800584e <_svfiprintf_r+0x52>
 8005978:	fb0c 3202 	mla	r2, ip, r2, r3
 800597c:	460c      	mov	r4, r1
 800597e:	2001      	movs	r0, #1
 8005980:	e7a8      	b.n	80058d4 <_svfiprintf_r+0xd8>
 8005982:	2300      	movs	r3, #0
 8005984:	3401      	adds	r4, #1
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	4619      	mov	r1, r3
 800598a:	f04f 0c0a 	mov.w	ip, #10
 800598e:	4620      	mov	r0, r4
 8005990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005994:	3a30      	subs	r2, #48	@ 0x30
 8005996:	2a09      	cmp	r2, #9
 8005998:	d903      	bls.n	80059a2 <_svfiprintf_r+0x1a6>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0c6      	beq.n	800592c <_svfiprintf_r+0x130>
 800599e:	9105      	str	r1, [sp, #20]
 80059a0:	e7c4      	b.n	800592c <_svfiprintf_r+0x130>
 80059a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80059a6:	4604      	mov	r4, r0
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7f0      	b.n	800598e <_svfiprintf_r+0x192>
 80059ac:	ab03      	add	r3, sp, #12
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4b0e      	ldr	r3, [pc, #56]	@ (80059ec <_svfiprintf_r+0x1f0>)
 80059b4:	a904      	add	r1, sp, #16
 80059b6:	4638      	mov	r0, r7
 80059b8:	f3af 8000 	nop.w
 80059bc:	1c42      	adds	r2, r0, #1
 80059be:	4606      	mov	r6, r0
 80059c0:	d1d6      	bne.n	8005970 <_svfiprintf_r+0x174>
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	065b      	lsls	r3, r3, #25
 80059c6:	f53f af2d 	bmi.w	8005824 <_svfiprintf_r+0x28>
 80059ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059cc:	e72c      	b.n	8005828 <_svfiprintf_r+0x2c>
 80059ce:	ab03      	add	r3, sp, #12
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	462a      	mov	r2, r5
 80059d4:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <_svfiprintf_r+0x1f0>)
 80059d6:	a904      	add	r1, sp, #16
 80059d8:	4638      	mov	r0, r7
 80059da:	f000 f9bb 	bl	8005d54 <_printf_i>
 80059de:	e7ed      	b.n	80059bc <_svfiprintf_r+0x1c0>
 80059e0:	08007bd8 	.word	0x08007bd8
 80059e4:	08007be2 	.word	0x08007be2
 80059e8:	00000000 	.word	0x00000000
 80059ec:	08005745 	.word	0x08005745
 80059f0:	08007bde 	.word	0x08007bde

080059f4 <__sfputc_r>:
 80059f4:	6893      	ldr	r3, [r2, #8]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	b410      	push	{r4}
 80059fc:	6093      	str	r3, [r2, #8]
 80059fe:	da08      	bge.n	8005a12 <__sfputc_r+0x1e>
 8005a00:	6994      	ldr	r4, [r2, #24]
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	db01      	blt.n	8005a0a <__sfputc_r+0x16>
 8005a06:	290a      	cmp	r1, #10
 8005a08:	d103      	bne.n	8005a12 <__sfputc_r+0x1e>
 8005a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a0e:	f7ff bc90 	b.w	8005332 <__swbuf_r>
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	1c58      	adds	r0, r3, #1
 8005a16:	6010      	str	r0, [r2, #0]
 8005a18:	7019      	strb	r1, [r3, #0]
 8005a1a:	4608      	mov	r0, r1
 8005a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <__sfputs_r>:
 8005a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a24:	4606      	mov	r6, r0
 8005a26:	460f      	mov	r7, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	18d5      	adds	r5, r2, r3
 8005a2c:	42ac      	cmp	r4, r5
 8005a2e:	d101      	bne.n	8005a34 <__sfputs_r+0x12>
 8005a30:	2000      	movs	r0, #0
 8005a32:	e007      	b.n	8005a44 <__sfputs_r+0x22>
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	463a      	mov	r2, r7
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f7ff ffda 	bl	80059f4 <__sfputc_r>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d1f3      	bne.n	8005a2c <__sfputs_r+0xa>
 8005a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a48 <_vfiprintf_r>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	460d      	mov	r5, r1
 8005a4e:	b09d      	sub	sp, #116	@ 0x74
 8005a50:	4614      	mov	r4, r2
 8005a52:	4698      	mov	r8, r3
 8005a54:	4606      	mov	r6, r0
 8005a56:	b118      	cbz	r0, 8005a60 <_vfiprintf_r+0x18>
 8005a58:	6a03      	ldr	r3, [r0, #32]
 8005a5a:	b90b      	cbnz	r3, 8005a60 <_vfiprintf_r+0x18>
 8005a5c:	f7ff fb60 	bl	8005120 <__sinit>
 8005a60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d405      	bmi.n	8005a72 <_vfiprintf_r+0x2a>
 8005a66:	89ab      	ldrh	r3, [r5, #12]
 8005a68:	059a      	lsls	r2, r3, #22
 8005a6a:	d402      	bmi.n	8005a72 <_vfiprintf_r+0x2a>
 8005a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a6e:	f7ff fd6e 	bl	800554e <__retarget_lock_acquire_recursive>
 8005a72:	89ab      	ldrh	r3, [r5, #12]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	d501      	bpl.n	8005a7c <_vfiprintf_r+0x34>
 8005a78:	692b      	ldr	r3, [r5, #16]
 8005a7a:	b99b      	cbnz	r3, 8005aa4 <_vfiprintf_r+0x5c>
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff fc96 	bl	80053b0 <__swsetup_r>
 8005a84:	b170      	cbz	r0, 8005aa4 <_vfiprintf_r+0x5c>
 8005a86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a88:	07dc      	lsls	r4, r3, #31
 8005a8a:	d504      	bpl.n	8005a96 <_vfiprintf_r+0x4e>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	b01d      	add	sp, #116	@ 0x74
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	89ab      	ldrh	r3, [r5, #12]
 8005a98:	0598      	lsls	r0, r3, #22
 8005a9a:	d4f7      	bmi.n	8005a8c <_vfiprintf_r+0x44>
 8005a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a9e:	f7ff fd57 	bl	8005550 <__retarget_lock_release_recursive>
 8005aa2:	e7f3      	b.n	8005a8c <_vfiprintf_r+0x44>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa8:	2320      	movs	r3, #32
 8005aaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ab2:	2330      	movs	r3, #48	@ 0x30
 8005ab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c64 <_vfiprintf_r+0x21c>
 8005ab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005abc:	f04f 0901 	mov.w	r9, #1
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	469a      	mov	sl, r3
 8005ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac8:	b10a      	cbz	r2, 8005ace <_vfiprintf_r+0x86>
 8005aca:	2a25      	cmp	r2, #37	@ 0x25
 8005acc:	d1f9      	bne.n	8005ac2 <_vfiprintf_r+0x7a>
 8005ace:	ebba 0b04 	subs.w	fp, sl, r4
 8005ad2:	d00b      	beq.n	8005aec <_vfiprintf_r+0xa4>
 8005ad4:	465b      	mov	r3, fp
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4630      	mov	r0, r6
 8005adc:	f7ff ffa1 	bl	8005a22 <__sfputs_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f000 80a7 	beq.w	8005c34 <_vfiprintf_r+0x1ec>
 8005ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ae8:	445a      	add	r2, fp
 8005aea:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aec:	f89a 3000 	ldrb.w	r3, [sl]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 809f 	beq.w	8005c34 <_vfiprintf_r+0x1ec>
 8005af6:	2300      	movs	r3, #0
 8005af8:	f04f 32ff 	mov.w	r2, #4294967295
 8005afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b00:	f10a 0a01 	add.w	sl, sl, #1
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	9307      	str	r3, [sp, #28]
 8005b08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b0e:	4654      	mov	r4, sl
 8005b10:	2205      	movs	r2, #5
 8005b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b16:	4853      	ldr	r0, [pc, #332]	@ (8005c64 <_vfiprintf_r+0x21c>)
 8005b18:	f7fa fb5a 	bl	80001d0 <memchr>
 8005b1c:	9a04      	ldr	r2, [sp, #16]
 8005b1e:	b9d8      	cbnz	r0, 8005b58 <_vfiprintf_r+0x110>
 8005b20:	06d1      	lsls	r1, r2, #27
 8005b22:	bf44      	itt	mi
 8005b24:	2320      	movmi	r3, #32
 8005b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b2a:	0713      	lsls	r3, r2, #28
 8005b2c:	bf44      	itt	mi
 8005b2e:	232b      	movmi	r3, #43	@ 0x2b
 8005b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b34:	f89a 3000 	ldrb.w	r3, [sl]
 8005b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b3a:	d015      	beq.n	8005b68 <_vfiprintf_r+0x120>
 8005b3c:	9a07      	ldr	r2, [sp, #28]
 8005b3e:	4654      	mov	r4, sl
 8005b40:	2000      	movs	r0, #0
 8005b42:	f04f 0c0a 	mov.w	ip, #10
 8005b46:	4621      	mov	r1, r4
 8005b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b4c:	3b30      	subs	r3, #48	@ 0x30
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d94b      	bls.n	8005bea <_vfiprintf_r+0x1a2>
 8005b52:	b1b0      	cbz	r0, 8005b82 <_vfiprintf_r+0x13a>
 8005b54:	9207      	str	r2, [sp, #28]
 8005b56:	e014      	b.n	8005b82 <_vfiprintf_r+0x13a>
 8005b58:	eba0 0308 	sub.w	r3, r0, r8
 8005b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b60:	4313      	orrs	r3, r2
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	46a2      	mov	sl, r4
 8005b66:	e7d2      	b.n	8005b0e <_vfiprintf_r+0xc6>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	1d19      	adds	r1, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	9103      	str	r1, [sp, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bfbb      	ittet	lt
 8005b74:	425b      	neglt	r3, r3
 8005b76:	f042 0202 	orrlt.w	r2, r2, #2
 8005b7a:	9307      	strge	r3, [sp, #28]
 8005b7c:	9307      	strlt	r3, [sp, #28]
 8005b7e:	bfb8      	it	lt
 8005b80:	9204      	strlt	r2, [sp, #16]
 8005b82:	7823      	ldrb	r3, [r4, #0]
 8005b84:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b86:	d10a      	bne.n	8005b9e <_vfiprintf_r+0x156>
 8005b88:	7863      	ldrb	r3, [r4, #1]
 8005b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b8c:	d132      	bne.n	8005bf4 <_vfiprintf_r+0x1ac>
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	1d1a      	adds	r2, r3, #4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	9203      	str	r2, [sp, #12]
 8005b96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b9a:	3402      	adds	r4, #2
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c74 <_vfiprintf_r+0x22c>
 8005ba2:	7821      	ldrb	r1, [r4, #0]
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	4650      	mov	r0, sl
 8005ba8:	f7fa fb12 	bl	80001d0 <memchr>
 8005bac:	b138      	cbz	r0, 8005bbe <_vfiprintf_r+0x176>
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	eba0 000a 	sub.w	r0, r0, sl
 8005bb4:	2240      	movs	r2, #64	@ 0x40
 8005bb6:	4082      	lsls	r2, r0
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	3401      	adds	r4, #1
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc2:	4829      	ldr	r0, [pc, #164]	@ (8005c68 <_vfiprintf_r+0x220>)
 8005bc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bc8:	2206      	movs	r2, #6
 8005bca:	f7fa fb01 	bl	80001d0 <memchr>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d03f      	beq.n	8005c52 <_vfiprintf_r+0x20a>
 8005bd2:	4b26      	ldr	r3, [pc, #152]	@ (8005c6c <_vfiprintf_r+0x224>)
 8005bd4:	bb1b      	cbnz	r3, 8005c1e <_vfiprintf_r+0x1d6>
 8005bd6:	9b03      	ldr	r3, [sp, #12]
 8005bd8:	3307      	adds	r3, #7
 8005bda:	f023 0307 	bic.w	r3, r3, #7
 8005bde:	3308      	adds	r3, #8
 8005be0:	9303      	str	r3, [sp, #12]
 8005be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be4:	443b      	add	r3, r7
 8005be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005be8:	e76a      	b.n	8005ac0 <_vfiprintf_r+0x78>
 8005bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bee:	460c      	mov	r4, r1
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	e7a8      	b.n	8005b46 <_vfiprintf_r+0xfe>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	3401      	adds	r4, #1
 8005bf8:	9305      	str	r3, [sp, #20]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	f04f 0c0a 	mov.w	ip, #10
 8005c00:	4620      	mov	r0, r4
 8005c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c06:	3a30      	subs	r2, #48	@ 0x30
 8005c08:	2a09      	cmp	r2, #9
 8005c0a:	d903      	bls.n	8005c14 <_vfiprintf_r+0x1cc>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0c6      	beq.n	8005b9e <_vfiprintf_r+0x156>
 8005c10:	9105      	str	r1, [sp, #20]
 8005c12:	e7c4      	b.n	8005b9e <_vfiprintf_r+0x156>
 8005c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c18:	4604      	mov	r4, r0
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e7f0      	b.n	8005c00 <_vfiprintf_r+0x1b8>
 8005c1e:	ab03      	add	r3, sp, #12
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	462a      	mov	r2, r5
 8005c24:	4b12      	ldr	r3, [pc, #72]	@ (8005c70 <_vfiprintf_r+0x228>)
 8005c26:	a904      	add	r1, sp, #16
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f3af 8000 	nop.w
 8005c2e:	4607      	mov	r7, r0
 8005c30:	1c78      	adds	r0, r7, #1
 8005c32:	d1d6      	bne.n	8005be2 <_vfiprintf_r+0x19a>
 8005c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c36:	07d9      	lsls	r1, r3, #31
 8005c38:	d405      	bmi.n	8005c46 <_vfiprintf_r+0x1fe>
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	059a      	lsls	r2, r3, #22
 8005c3e:	d402      	bmi.n	8005c46 <_vfiprintf_r+0x1fe>
 8005c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c42:	f7ff fc85 	bl	8005550 <__retarget_lock_release_recursive>
 8005c46:	89ab      	ldrh	r3, [r5, #12]
 8005c48:	065b      	lsls	r3, r3, #25
 8005c4a:	f53f af1f 	bmi.w	8005a8c <_vfiprintf_r+0x44>
 8005c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c50:	e71e      	b.n	8005a90 <_vfiprintf_r+0x48>
 8005c52:	ab03      	add	r3, sp, #12
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	462a      	mov	r2, r5
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <_vfiprintf_r+0x228>)
 8005c5a:	a904      	add	r1, sp, #16
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f000 f879 	bl	8005d54 <_printf_i>
 8005c62:	e7e4      	b.n	8005c2e <_vfiprintf_r+0x1e6>
 8005c64:	08007bd8 	.word	0x08007bd8
 8005c68:	08007be2 	.word	0x08007be2
 8005c6c:	00000000 	.word	0x00000000
 8005c70:	08005a23 	.word	0x08005a23
 8005c74:	08007bde 	.word	0x08007bde

08005c78 <_printf_common>:
 8005c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	4698      	mov	r8, r3
 8005c80:	688a      	ldr	r2, [r1, #8]
 8005c82:	690b      	ldr	r3, [r1, #16]
 8005c84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	bfb8      	it	lt
 8005c8c:	4613      	movlt	r3, r2
 8005c8e:	6033      	str	r3, [r6, #0]
 8005c90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c94:	4607      	mov	r7, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	b10a      	cbz	r2, 8005c9e <_printf_common+0x26>
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	6033      	str	r3, [r6, #0]
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	0699      	lsls	r1, r3, #26
 8005ca2:	bf42      	ittt	mi
 8005ca4:	6833      	ldrmi	r3, [r6, #0]
 8005ca6:	3302      	addmi	r3, #2
 8005ca8:	6033      	strmi	r3, [r6, #0]
 8005caa:	6825      	ldr	r5, [r4, #0]
 8005cac:	f015 0506 	ands.w	r5, r5, #6
 8005cb0:	d106      	bne.n	8005cc0 <_printf_common+0x48>
 8005cb2:	f104 0a19 	add.w	sl, r4, #25
 8005cb6:	68e3      	ldr	r3, [r4, #12]
 8005cb8:	6832      	ldr	r2, [r6, #0]
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	42ab      	cmp	r3, r5
 8005cbe:	dc26      	bgt.n	8005d0e <_printf_common+0x96>
 8005cc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cc4:	6822      	ldr	r2, [r4, #0]
 8005cc6:	3b00      	subs	r3, #0
 8005cc8:	bf18      	it	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	0692      	lsls	r2, r2, #26
 8005cce:	d42b      	bmi.n	8005d28 <_printf_common+0xb0>
 8005cd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	47c8      	blx	r9
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d01e      	beq.n	8005d1c <_printf_common+0xa4>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	6922      	ldr	r2, [r4, #16]
 8005ce2:	f003 0306 	and.w	r3, r3, #6
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	bf02      	ittt	eq
 8005cea:	68e5      	ldreq	r5, [r4, #12]
 8005cec:	6833      	ldreq	r3, [r6, #0]
 8005cee:	1aed      	subeq	r5, r5, r3
 8005cf0:	68a3      	ldr	r3, [r4, #8]
 8005cf2:	bf0c      	ite	eq
 8005cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf8:	2500      	movne	r5, #0
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	bfc4      	itt	gt
 8005cfe:	1a9b      	subgt	r3, r3, r2
 8005d00:	18ed      	addgt	r5, r5, r3
 8005d02:	2600      	movs	r6, #0
 8005d04:	341a      	adds	r4, #26
 8005d06:	42b5      	cmp	r5, r6
 8005d08:	d11a      	bne.n	8005d40 <_printf_common+0xc8>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e008      	b.n	8005d20 <_printf_common+0xa8>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4652      	mov	r2, sl
 8005d12:	4641      	mov	r1, r8
 8005d14:	4638      	mov	r0, r7
 8005d16:	47c8      	blx	r9
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d103      	bne.n	8005d24 <_printf_common+0xac>
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d24:	3501      	adds	r5, #1
 8005d26:	e7c6      	b.n	8005cb6 <_printf_common+0x3e>
 8005d28:	18e1      	adds	r1, r4, r3
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	2030      	movs	r0, #48	@ 0x30
 8005d2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d32:	4422      	add	r2, r4
 8005d34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d3c:	3302      	adds	r3, #2
 8005d3e:	e7c7      	b.n	8005cd0 <_printf_common+0x58>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4622      	mov	r2, r4
 8005d44:	4641      	mov	r1, r8
 8005d46:	4638      	mov	r0, r7
 8005d48:	47c8      	blx	r9
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d0e6      	beq.n	8005d1c <_printf_common+0xa4>
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7d9      	b.n	8005d06 <_printf_common+0x8e>
	...

08005d54 <_printf_i>:
 8005d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d58:	7e0f      	ldrb	r7, [r1, #24]
 8005d5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d5c:	2f78      	cmp	r7, #120	@ 0x78
 8005d5e:	4691      	mov	r9, r2
 8005d60:	4680      	mov	r8, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	469a      	mov	sl, r3
 8005d66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d6a:	d807      	bhi.n	8005d7c <_printf_i+0x28>
 8005d6c:	2f62      	cmp	r7, #98	@ 0x62
 8005d6e:	d80a      	bhi.n	8005d86 <_printf_i+0x32>
 8005d70:	2f00      	cmp	r7, #0
 8005d72:	f000 80d2 	beq.w	8005f1a <_printf_i+0x1c6>
 8005d76:	2f58      	cmp	r7, #88	@ 0x58
 8005d78:	f000 80b9 	beq.w	8005eee <_printf_i+0x19a>
 8005d7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d84:	e03a      	b.n	8005dfc <_printf_i+0xa8>
 8005d86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d8a:	2b15      	cmp	r3, #21
 8005d8c:	d8f6      	bhi.n	8005d7c <_printf_i+0x28>
 8005d8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d94 <_printf_i+0x40>)
 8005d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d94:	08005ded 	.word	0x08005ded
 8005d98:	08005e01 	.word	0x08005e01
 8005d9c:	08005d7d 	.word	0x08005d7d
 8005da0:	08005d7d 	.word	0x08005d7d
 8005da4:	08005d7d 	.word	0x08005d7d
 8005da8:	08005d7d 	.word	0x08005d7d
 8005dac:	08005e01 	.word	0x08005e01
 8005db0:	08005d7d 	.word	0x08005d7d
 8005db4:	08005d7d 	.word	0x08005d7d
 8005db8:	08005d7d 	.word	0x08005d7d
 8005dbc:	08005d7d 	.word	0x08005d7d
 8005dc0:	08005f01 	.word	0x08005f01
 8005dc4:	08005e2b 	.word	0x08005e2b
 8005dc8:	08005ebb 	.word	0x08005ebb
 8005dcc:	08005d7d 	.word	0x08005d7d
 8005dd0:	08005d7d 	.word	0x08005d7d
 8005dd4:	08005f23 	.word	0x08005f23
 8005dd8:	08005d7d 	.word	0x08005d7d
 8005ddc:	08005e2b 	.word	0x08005e2b
 8005de0:	08005d7d 	.word	0x08005d7d
 8005de4:	08005d7d 	.word	0x08005d7d
 8005de8:	08005ec3 	.word	0x08005ec3
 8005dec:	6833      	ldr	r3, [r6, #0]
 8005dee:	1d1a      	adds	r2, r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6032      	str	r2, [r6, #0]
 8005df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e09d      	b.n	8005f3c <_printf_i+0x1e8>
 8005e00:	6833      	ldr	r3, [r6, #0]
 8005e02:	6820      	ldr	r0, [r4, #0]
 8005e04:	1d19      	adds	r1, r3, #4
 8005e06:	6031      	str	r1, [r6, #0]
 8005e08:	0606      	lsls	r6, r0, #24
 8005e0a:	d501      	bpl.n	8005e10 <_printf_i+0xbc>
 8005e0c:	681d      	ldr	r5, [r3, #0]
 8005e0e:	e003      	b.n	8005e18 <_printf_i+0xc4>
 8005e10:	0645      	lsls	r5, r0, #25
 8005e12:	d5fb      	bpl.n	8005e0c <_printf_i+0xb8>
 8005e14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	da03      	bge.n	8005e24 <_printf_i+0xd0>
 8005e1c:	232d      	movs	r3, #45	@ 0x2d
 8005e1e:	426d      	negs	r5, r5
 8005e20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e24:	4859      	ldr	r0, [pc, #356]	@ (8005f8c <_printf_i+0x238>)
 8005e26:	230a      	movs	r3, #10
 8005e28:	e011      	b.n	8005e4e <_printf_i+0xfa>
 8005e2a:	6821      	ldr	r1, [r4, #0]
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	0608      	lsls	r0, r1, #24
 8005e30:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e34:	d402      	bmi.n	8005e3c <_printf_i+0xe8>
 8005e36:	0649      	lsls	r1, r1, #25
 8005e38:	bf48      	it	mi
 8005e3a:	b2ad      	uxthmi	r5, r5
 8005e3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e3e:	4853      	ldr	r0, [pc, #332]	@ (8005f8c <_printf_i+0x238>)
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	bf14      	ite	ne
 8005e44:	230a      	movne	r3, #10
 8005e46:	2308      	moveq	r3, #8
 8005e48:	2100      	movs	r1, #0
 8005e4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e4e:	6866      	ldr	r6, [r4, #4]
 8005e50:	60a6      	str	r6, [r4, #8]
 8005e52:	2e00      	cmp	r6, #0
 8005e54:	bfa2      	ittt	ge
 8005e56:	6821      	ldrge	r1, [r4, #0]
 8005e58:	f021 0104 	bicge.w	r1, r1, #4
 8005e5c:	6021      	strge	r1, [r4, #0]
 8005e5e:	b90d      	cbnz	r5, 8005e64 <_printf_i+0x110>
 8005e60:	2e00      	cmp	r6, #0
 8005e62:	d04b      	beq.n	8005efc <_printf_i+0x1a8>
 8005e64:	4616      	mov	r6, r2
 8005e66:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e6a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e6e:	5dc7      	ldrb	r7, [r0, r7]
 8005e70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e74:	462f      	mov	r7, r5
 8005e76:	42bb      	cmp	r3, r7
 8005e78:	460d      	mov	r5, r1
 8005e7a:	d9f4      	bls.n	8005e66 <_printf_i+0x112>
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d10b      	bne.n	8005e98 <_printf_i+0x144>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	07df      	lsls	r7, r3, #31
 8005e84:	d508      	bpl.n	8005e98 <_printf_i+0x144>
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	6861      	ldr	r1, [r4, #4]
 8005e8a:	4299      	cmp	r1, r3
 8005e8c:	bfde      	ittt	le
 8005e8e:	2330      	movle	r3, #48	@ 0x30
 8005e90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e98:	1b92      	subs	r2, r2, r6
 8005e9a:	6122      	str	r2, [r4, #16]
 8005e9c:	f8cd a000 	str.w	sl, [sp]
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	aa03      	add	r2, sp, #12
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f7ff fee6 	bl	8005c78 <_printf_common>
 8005eac:	3001      	adds	r0, #1
 8005eae:	d14a      	bne.n	8005f46 <_printf_i+0x1f2>
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb4:	b004      	add	sp, #16
 8005eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f043 0320 	orr.w	r3, r3, #32
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	4833      	ldr	r0, [pc, #204]	@ (8005f90 <_printf_i+0x23c>)
 8005ec4:	2778      	movs	r7, #120	@ 0x78
 8005ec6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	6831      	ldr	r1, [r6, #0]
 8005ece:	061f      	lsls	r7, r3, #24
 8005ed0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ed4:	d402      	bmi.n	8005edc <_printf_i+0x188>
 8005ed6:	065f      	lsls	r7, r3, #25
 8005ed8:	bf48      	it	mi
 8005eda:	b2ad      	uxthmi	r5, r5
 8005edc:	6031      	str	r1, [r6, #0]
 8005ede:	07d9      	lsls	r1, r3, #31
 8005ee0:	bf44      	itt	mi
 8005ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee6:	6023      	strmi	r3, [r4, #0]
 8005ee8:	b11d      	cbz	r5, 8005ef2 <_printf_i+0x19e>
 8005eea:	2310      	movs	r3, #16
 8005eec:	e7ac      	b.n	8005e48 <_printf_i+0xf4>
 8005eee:	4827      	ldr	r0, [pc, #156]	@ (8005f8c <_printf_i+0x238>)
 8005ef0:	e7e9      	b.n	8005ec6 <_printf_i+0x172>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f023 0320 	bic.w	r3, r3, #32
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	e7f6      	b.n	8005eea <_printf_i+0x196>
 8005efc:	4616      	mov	r6, r2
 8005efe:	e7bd      	b.n	8005e7c <_printf_i+0x128>
 8005f00:	6833      	ldr	r3, [r6, #0]
 8005f02:	6825      	ldr	r5, [r4, #0]
 8005f04:	6961      	ldr	r1, [r4, #20]
 8005f06:	1d18      	adds	r0, r3, #4
 8005f08:	6030      	str	r0, [r6, #0]
 8005f0a:	062e      	lsls	r6, r5, #24
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	d501      	bpl.n	8005f14 <_printf_i+0x1c0>
 8005f10:	6019      	str	r1, [r3, #0]
 8005f12:	e002      	b.n	8005f1a <_printf_i+0x1c6>
 8005f14:	0668      	lsls	r0, r5, #25
 8005f16:	d5fb      	bpl.n	8005f10 <_printf_i+0x1bc>
 8005f18:	8019      	strh	r1, [r3, #0]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6123      	str	r3, [r4, #16]
 8005f1e:	4616      	mov	r6, r2
 8005f20:	e7bc      	b.n	8005e9c <_printf_i+0x148>
 8005f22:	6833      	ldr	r3, [r6, #0]
 8005f24:	1d1a      	adds	r2, r3, #4
 8005f26:	6032      	str	r2, [r6, #0]
 8005f28:	681e      	ldr	r6, [r3, #0]
 8005f2a:	6862      	ldr	r2, [r4, #4]
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f7fa f94e 	bl	80001d0 <memchr>
 8005f34:	b108      	cbz	r0, 8005f3a <_printf_i+0x1e6>
 8005f36:	1b80      	subs	r0, r0, r6
 8005f38:	6060      	str	r0, [r4, #4]
 8005f3a:	6863      	ldr	r3, [r4, #4]
 8005f3c:	6123      	str	r3, [r4, #16]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f44:	e7aa      	b.n	8005e9c <_printf_i+0x148>
 8005f46:	6923      	ldr	r3, [r4, #16]
 8005f48:	4632      	mov	r2, r6
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	47d0      	blx	sl
 8005f50:	3001      	adds	r0, #1
 8005f52:	d0ad      	beq.n	8005eb0 <_printf_i+0x15c>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	079b      	lsls	r3, r3, #30
 8005f58:	d413      	bmi.n	8005f82 <_printf_i+0x22e>
 8005f5a:	68e0      	ldr	r0, [r4, #12]
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	4298      	cmp	r0, r3
 8005f60:	bfb8      	it	lt
 8005f62:	4618      	movlt	r0, r3
 8005f64:	e7a6      	b.n	8005eb4 <_printf_i+0x160>
 8005f66:	2301      	movs	r3, #1
 8005f68:	4632      	mov	r2, r6
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	47d0      	blx	sl
 8005f70:	3001      	adds	r0, #1
 8005f72:	d09d      	beq.n	8005eb0 <_printf_i+0x15c>
 8005f74:	3501      	adds	r5, #1
 8005f76:	68e3      	ldr	r3, [r4, #12]
 8005f78:	9903      	ldr	r1, [sp, #12]
 8005f7a:	1a5b      	subs	r3, r3, r1
 8005f7c:	42ab      	cmp	r3, r5
 8005f7e:	dcf2      	bgt.n	8005f66 <_printf_i+0x212>
 8005f80:	e7eb      	b.n	8005f5a <_printf_i+0x206>
 8005f82:	2500      	movs	r5, #0
 8005f84:	f104 0619 	add.w	r6, r4, #25
 8005f88:	e7f5      	b.n	8005f76 <_printf_i+0x222>
 8005f8a:	bf00      	nop
 8005f8c:	08007be9 	.word	0x08007be9
 8005f90:	08007bfa 	.word	0x08007bfa

08005f94 <__sflush_r>:
 8005f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9c:	0716      	lsls	r6, r2, #28
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	d454      	bmi.n	800604e <__sflush_r+0xba>
 8005fa4:	684b      	ldr	r3, [r1, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dc02      	bgt.n	8005fb0 <__sflush_r+0x1c>
 8005faa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dd48      	ble.n	8006042 <__sflush_r+0xae>
 8005fb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d045      	beq.n	8006042 <__sflush_r+0xae>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fbc:	682f      	ldr	r7, [r5, #0]
 8005fbe:	6a21      	ldr	r1, [r4, #32]
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	d030      	beq.n	8006026 <__sflush_r+0x92>
 8005fc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	0759      	lsls	r1, r3, #29
 8005fca:	d505      	bpl.n	8005fd8 <__sflush_r+0x44>
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fd2:	b10b      	cbz	r3, 8005fd8 <__sflush_r+0x44>
 8005fd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fdc:	6a21      	ldr	r1, [r4, #32]
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b0      	blx	r6
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	d106      	bne.n	8005ff6 <__sflush_r+0x62>
 8005fe8:	6829      	ldr	r1, [r5, #0]
 8005fea:	291d      	cmp	r1, #29
 8005fec:	d82b      	bhi.n	8006046 <__sflush_r+0xb2>
 8005fee:	4a2a      	ldr	r2, [pc, #168]	@ (8006098 <__sflush_r+0x104>)
 8005ff0:	410a      	asrs	r2, r1
 8005ff2:	07d6      	lsls	r6, r2, #31
 8005ff4:	d427      	bmi.n	8006046 <__sflush_r+0xb2>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	6062      	str	r2, [r4, #4]
 8005ffa:	04d9      	lsls	r1, r3, #19
 8005ffc:	6922      	ldr	r2, [r4, #16]
 8005ffe:	6022      	str	r2, [r4, #0]
 8006000:	d504      	bpl.n	800600c <__sflush_r+0x78>
 8006002:	1c42      	adds	r2, r0, #1
 8006004:	d101      	bne.n	800600a <__sflush_r+0x76>
 8006006:	682b      	ldr	r3, [r5, #0]
 8006008:	b903      	cbnz	r3, 800600c <__sflush_r+0x78>
 800600a:	6560      	str	r0, [r4, #84]	@ 0x54
 800600c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800600e:	602f      	str	r7, [r5, #0]
 8006010:	b1b9      	cbz	r1, 8006042 <__sflush_r+0xae>
 8006012:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006016:	4299      	cmp	r1, r3
 8006018:	d002      	beq.n	8006020 <__sflush_r+0x8c>
 800601a:	4628      	mov	r0, r5
 800601c:	f7ff fa9a 	bl	8005554 <_free_r>
 8006020:	2300      	movs	r3, #0
 8006022:	6363      	str	r3, [r4, #52]	@ 0x34
 8006024:	e00d      	b.n	8006042 <__sflush_r+0xae>
 8006026:	2301      	movs	r3, #1
 8006028:	4628      	mov	r0, r5
 800602a:	47b0      	blx	r6
 800602c:	4602      	mov	r2, r0
 800602e:	1c50      	adds	r0, r2, #1
 8006030:	d1c9      	bne.n	8005fc6 <__sflush_r+0x32>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0c6      	beq.n	8005fc6 <__sflush_r+0x32>
 8006038:	2b1d      	cmp	r3, #29
 800603a:	d001      	beq.n	8006040 <__sflush_r+0xac>
 800603c:	2b16      	cmp	r3, #22
 800603e:	d11e      	bne.n	800607e <__sflush_r+0xea>
 8006040:	602f      	str	r7, [r5, #0]
 8006042:	2000      	movs	r0, #0
 8006044:	e022      	b.n	800608c <__sflush_r+0xf8>
 8006046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800604a:	b21b      	sxth	r3, r3
 800604c:	e01b      	b.n	8006086 <__sflush_r+0xf2>
 800604e:	690f      	ldr	r7, [r1, #16]
 8006050:	2f00      	cmp	r7, #0
 8006052:	d0f6      	beq.n	8006042 <__sflush_r+0xae>
 8006054:	0793      	lsls	r3, r2, #30
 8006056:	680e      	ldr	r6, [r1, #0]
 8006058:	bf08      	it	eq
 800605a:	694b      	ldreq	r3, [r1, #20]
 800605c:	600f      	str	r7, [r1, #0]
 800605e:	bf18      	it	ne
 8006060:	2300      	movne	r3, #0
 8006062:	eba6 0807 	sub.w	r8, r6, r7
 8006066:	608b      	str	r3, [r1, #8]
 8006068:	f1b8 0f00 	cmp.w	r8, #0
 800606c:	dde9      	ble.n	8006042 <__sflush_r+0xae>
 800606e:	6a21      	ldr	r1, [r4, #32]
 8006070:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006072:	4643      	mov	r3, r8
 8006074:	463a      	mov	r2, r7
 8006076:	4628      	mov	r0, r5
 8006078:	47b0      	blx	r6
 800607a:	2800      	cmp	r0, #0
 800607c:	dc08      	bgt.n	8006090 <__sflush_r+0xfc>
 800607e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006090:	4407      	add	r7, r0
 8006092:	eba8 0800 	sub.w	r8, r8, r0
 8006096:	e7e7      	b.n	8006068 <__sflush_r+0xd4>
 8006098:	dfbffffe 	.word	0xdfbffffe

0800609c <_fflush_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	4605      	mov	r5, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	b913      	cbnz	r3, 80060ac <_fflush_r+0x10>
 80060a6:	2500      	movs	r5, #0
 80060a8:	4628      	mov	r0, r5
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	b118      	cbz	r0, 80060b6 <_fflush_r+0x1a>
 80060ae:	6a03      	ldr	r3, [r0, #32]
 80060b0:	b90b      	cbnz	r3, 80060b6 <_fflush_r+0x1a>
 80060b2:	f7ff f835 	bl	8005120 <__sinit>
 80060b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0f3      	beq.n	80060a6 <_fflush_r+0xa>
 80060be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060c0:	07d0      	lsls	r0, r2, #31
 80060c2:	d404      	bmi.n	80060ce <_fflush_r+0x32>
 80060c4:	0599      	lsls	r1, r3, #22
 80060c6:	d402      	bmi.n	80060ce <_fflush_r+0x32>
 80060c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ca:	f7ff fa40 	bl	800554e <__retarget_lock_acquire_recursive>
 80060ce:	4628      	mov	r0, r5
 80060d0:	4621      	mov	r1, r4
 80060d2:	f7ff ff5f 	bl	8005f94 <__sflush_r>
 80060d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060d8:	07da      	lsls	r2, r3, #31
 80060da:	4605      	mov	r5, r0
 80060dc:	d4e4      	bmi.n	80060a8 <_fflush_r+0xc>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	059b      	lsls	r3, r3, #22
 80060e2:	d4e1      	bmi.n	80060a8 <_fflush_r+0xc>
 80060e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060e6:	f7ff fa33 	bl	8005550 <__retarget_lock_release_recursive>
 80060ea:	e7dd      	b.n	80060a8 <_fflush_r+0xc>

080060ec <__swhatbuf_r>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f4:	2900      	cmp	r1, #0
 80060f6:	b096      	sub	sp, #88	@ 0x58
 80060f8:	4615      	mov	r5, r2
 80060fa:	461e      	mov	r6, r3
 80060fc:	da0d      	bge.n	800611a <__swhatbuf_r+0x2e>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	bf14      	ite	ne
 800610a:	2340      	movne	r3, #64	@ 0x40
 800610c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006110:	2000      	movs	r0, #0
 8006112:	6031      	str	r1, [r6, #0]
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	b016      	add	sp, #88	@ 0x58
 8006118:	bd70      	pop	{r4, r5, r6, pc}
 800611a:	466a      	mov	r2, sp
 800611c:	f000 f862 	bl	80061e4 <_fstat_r>
 8006120:	2800      	cmp	r0, #0
 8006122:	dbec      	blt.n	80060fe <__swhatbuf_r+0x12>
 8006124:	9901      	ldr	r1, [sp, #4]
 8006126:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800612a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800612e:	4259      	negs	r1, r3
 8006130:	4159      	adcs	r1, r3
 8006132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006136:	e7eb      	b.n	8006110 <__swhatbuf_r+0x24>

08006138 <__smakebuf_r>:
 8006138:	898b      	ldrh	r3, [r1, #12]
 800613a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800613c:	079d      	lsls	r5, r3, #30
 800613e:	4606      	mov	r6, r0
 8006140:	460c      	mov	r4, r1
 8006142:	d507      	bpl.n	8006154 <__smakebuf_r+0x1c>
 8006144:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	6123      	str	r3, [r4, #16]
 800614c:	2301      	movs	r3, #1
 800614e:	6163      	str	r3, [r4, #20]
 8006150:	b003      	add	sp, #12
 8006152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006154:	ab01      	add	r3, sp, #4
 8006156:	466a      	mov	r2, sp
 8006158:	f7ff ffc8 	bl	80060ec <__swhatbuf_r>
 800615c:	9f00      	ldr	r7, [sp, #0]
 800615e:	4605      	mov	r5, r0
 8006160:	4639      	mov	r1, r7
 8006162:	4630      	mov	r0, r6
 8006164:	f7ff fa62 	bl	800562c <_malloc_r>
 8006168:	b948      	cbnz	r0, 800617e <__smakebuf_r+0x46>
 800616a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616e:	059a      	lsls	r2, r3, #22
 8006170:	d4ee      	bmi.n	8006150 <__smakebuf_r+0x18>
 8006172:	f023 0303 	bic.w	r3, r3, #3
 8006176:	f043 0302 	orr.w	r3, r3, #2
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	e7e2      	b.n	8006144 <__smakebuf_r+0xc>
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	6020      	str	r0, [r4, #0]
 8006182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	9b01      	ldr	r3, [sp, #4]
 800618a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800618e:	b15b      	cbz	r3, 80061a8 <__smakebuf_r+0x70>
 8006190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006194:	4630      	mov	r0, r6
 8006196:	f000 f837 	bl	8006208 <_isatty_r>
 800619a:	b128      	cbz	r0, 80061a8 <__smakebuf_r+0x70>
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	81a3      	strh	r3, [r4, #12]
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	431d      	orrs	r5, r3
 80061ac:	81a5      	strh	r5, [r4, #12]
 80061ae:	e7cf      	b.n	8006150 <__smakebuf_r+0x18>

080061b0 <memmove>:
 80061b0:	4288      	cmp	r0, r1
 80061b2:	b510      	push	{r4, lr}
 80061b4:	eb01 0402 	add.w	r4, r1, r2
 80061b8:	d902      	bls.n	80061c0 <memmove+0x10>
 80061ba:	4284      	cmp	r4, r0
 80061bc:	4623      	mov	r3, r4
 80061be:	d807      	bhi.n	80061d0 <memmove+0x20>
 80061c0:	1e43      	subs	r3, r0, #1
 80061c2:	42a1      	cmp	r1, r4
 80061c4:	d008      	beq.n	80061d8 <memmove+0x28>
 80061c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ce:	e7f8      	b.n	80061c2 <memmove+0x12>
 80061d0:	4402      	add	r2, r0
 80061d2:	4601      	mov	r1, r0
 80061d4:	428a      	cmp	r2, r1
 80061d6:	d100      	bne.n	80061da <memmove+0x2a>
 80061d8:	bd10      	pop	{r4, pc}
 80061da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061e2:	e7f7      	b.n	80061d4 <memmove+0x24>

080061e4 <_fstat_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4d07      	ldr	r5, [pc, #28]	@ (8006204 <_fstat_r+0x20>)
 80061e8:	2300      	movs	r3, #0
 80061ea:	4604      	mov	r4, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	4611      	mov	r1, r2
 80061f0:	602b      	str	r3, [r5, #0]
 80061f2:	f7fb fc5a 	bl	8001aaa <_fstat>
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	d102      	bne.n	8006200 <_fstat_r+0x1c>
 80061fa:	682b      	ldr	r3, [r5, #0]
 80061fc:	b103      	cbz	r3, 8006200 <_fstat_r+0x1c>
 80061fe:	6023      	str	r3, [r4, #0]
 8006200:	bd38      	pop	{r3, r4, r5, pc}
 8006202:	bf00      	nop
 8006204:	200003d8 	.word	0x200003d8

08006208 <_isatty_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d06      	ldr	r5, [pc, #24]	@ (8006224 <_isatty_r+0x1c>)
 800620c:	2300      	movs	r3, #0
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	f7fb fc59 	bl	8001aca <_isatty>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_isatty_r+0x1a>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_isatty_r+0x1a>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	200003d8 	.word	0x200003d8

08006228 <_sbrk_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d06      	ldr	r5, [pc, #24]	@ (8006244 <_sbrk_r+0x1c>)
 800622c:	2300      	movs	r3, #0
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	f7fb fc62 	bl	8001afc <_sbrk>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_sbrk_r+0x1a>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_sbrk_r+0x1a>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	200003d8 	.word	0x200003d8

08006248 <memcpy>:
 8006248:	440a      	add	r2, r1
 800624a:	4291      	cmp	r1, r2
 800624c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006250:	d100      	bne.n	8006254 <memcpy+0xc>
 8006252:	4770      	bx	lr
 8006254:	b510      	push	{r4, lr}
 8006256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800625e:	4291      	cmp	r1, r2
 8006260:	d1f9      	bne.n	8006256 <memcpy+0xe>
 8006262:	bd10      	pop	{r4, pc}

08006264 <_realloc_r>:
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	4680      	mov	r8, r0
 800626a:	4615      	mov	r5, r2
 800626c:	460c      	mov	r4, r1
 800626e:	b921      	cbnz	r1, 800627a <_realloc_r+0x16>
 8006270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	4611      	mov	r1, r2
 8006276:	f7ff b9d9 	b.w	800562c <_malloc_r>
 800627a:	b92a      	cbnz	r2, 8006288 <_realloc_r+0x24>
 800627c:	f7ff f96a 	bl	8005554 <_free_r>
 8006280:	2400      	movs	r4, #0
 8006282:	4620      	mov	r0, r4
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	f000 f81a 	bl	80062c0 <_malloc_usable_size_r>
 800628c:	4285      	cmp	r5, r0
 800628e:	4606      	mov	r6, r0
 8006290:	d802      	bhi.n	8006298 <_realloc_r+0x34>
 8006292:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006296:	d8f4      	bhi.n	8006282 <_realloc_r+0x1e>
 8006298:	4629      	mov	r1, r5
 800629a:	4640      	mov	r0, r8
 800629c:	f7ff f9c6 	bl	800562c <_malloc_r>
 80062a0:	4607      	mov	r7, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d0ec      	beq.n	8006280 <_realloc_r+0x1c>
 80062a6:	42b5      	cmp	r5, r6
 80062a8:	462a      	mov	r2, r5
 80062aa:	4621      	mov	r1, r4
 80062ac:	bf28      	it	cs
 80062ae:	4632      	movcs	r2, r6
 80062b0:	f7ff ffca 	bl	8006248 <memcpy>
 80062b4:	4621      	mov	r1, r4
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7ff f94c 	bl	8005554 <_free_r>
 80062bc:	463c      	mov	r4, r7
 80062be:	e7e0      	b.n	8006282 <_realloc_r+0x1e>

080062c0 <_malloc_usable_size_r>:
 80062c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062c4:	1f18      	subs	r0, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bfbc      	itt	lt
 80062ca:	580b      	ldrlt	r3, [r1, r0]
 80062cc:	18c0      	addlt	r0, r0, r3
 80062ce:	4770      	bx	lr

080062d0 <_init>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr

080062dc <_fini>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr
